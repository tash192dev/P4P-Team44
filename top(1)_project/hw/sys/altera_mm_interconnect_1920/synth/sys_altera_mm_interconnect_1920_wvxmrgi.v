// sys_altera_mm_interconnect_1920_wvxmrgi.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 24.1 115

`timescale 1 ps / 1 ps
module sys_altera_mm_interconnect_1920_wvxmrgi (
		input  wire [31:0] cpu_data_manager_awaddr,                 //                cpu_data_manager.awaddr
		input  wire [7:0]  cpu_data_manager_awlen,                  //                                .awlen
		input  wire [2:0]  cpu_data_manager_awsize,                 //                                .awsize
		input  wire [2:0]  cpu_data_manager_awprot,                 //                                .awprot
		input  wire        cpu_data_manager_awvalid,                //                                .awvalid
		output wire        cpu_data_manager_awready,                //                                .awready
		input  wire [31:0] cpu_data_manager_wdata,                  //                                .wdata
		input  wire [3:0]  cpu_data_manager_wstrb,                  //                                .wstrb
		input  wire        cpu_data_manager_wlast,                  //                                .wlast
		input  wire        cpu_data_manager_wvalid,                 //                                .wvalid
		output wire        cpu_data_manager_wready,                 //                                .wready
		output wire [1:0]  cpu_data_manager_bresp,                  //                                .bresp
		output wire        cpu_data_manager_bvalid,                 //                                .bvalid
		input  wire        cpu_data_manager_bready,                 //                                .bready
		input  wire [31:0] cpu_data_manager_araddr,                 //                                .araddr
		input  wire [7:0]  cpu_data_manager_arlen,                  //                                .arlen
		input  wire [2:0]  cpu_data_manager_arsize,                 //                                .arsize
		input  wire [2:0]  cpu_data_manager_arprot,                 //                                .arprot
		input  wire        cpu_data_manager_arvalid,                //                                .arvalid
		output wire        cpu_data_manager_arready,                //                                .arready
		output wire [31:0] cpu_data_manager_rdata,                  //                                .rdata
		output wire [1:0]  cpu_data_manager_rresp,                  //                                .rresp
		output wire        cpu_data_manager_rlast,                  //                                .rlast
		output wire        cpu_data_manager_rvalid,                 //                                .rvalid
		input  wire        cpu_data_manager_rready,                 //                                .rready
		input  wire [31:0] cpu_instruction_manager_awaddr,          //         cpu_instruction_manager.awaddr
		input  wire [7:0]  cpu_instruction_manager_awlen,           //                                .awlen
		input  wire [2:0]  cpu_instruction_manager_awsize,          //                                .awsize
		input  wire [1:0]  cpu_instruction_manager_awburst,         //                                .awburst
		input  wire [2:0]  cpu_instruction_manager_awprot,          //                                .awprot
		input  wire        cpu_instruction_manager_awvalid,         //                                .awvalid
		output wire        cpu_instruction_manager_awready,         //                                .awready
		input  wire [31:0] cpu_instruction_manager_wdata,           //                                .wdata
		input  wire [3:0]  cpu_instruction_manager_wstrb,           //                                .wstrb
		input  wire        cpu_instruction_manager_wlast,           //                                .wlast
		input  wire        cpu_instruction_manager_wvalid,          //                                .wvalid
		output wire        cpu_instruction_manager_wready,          //                                .wready
		output wire [1:0]  cpu_instruction_manager_bresp,           //                                .bresp
		output wire        cpu_instruction_manager_bvalid,          //                                .bvalid
		input  wire        cpu_instruction_manager_bready,          //                                .bready
		input  wire [31:0] cpu_instruction_manager_araddr,          //                                .araddr
		input  wire [7:0]  cpu_instruction_manager_arlen,           //                                .arlen
		input  wire [2:0]  cpu_instruction_manager_arsize,          //                                .arsize
		input  wire [1:0]  cpu_instruction_manager_arburst,         //                                .arburst
		input  wire [2:0]  cpu_instruction_manager_arprot,          //                                .arprot
		input  wire        cpu_instruction_manager_arvalid,         //                                .arvalid
		output wire        cpu_instruction_manager_arready,         //                                .arready
		output wire [31:0] cpu_instruction_manager_rdata,           //                                .rdata
		output wire [1:0]  cpu_instruction_manager_rresp,           //                                .rresp
		output wire        cpu_instruction_manager_rlast,           //                                .rlast
		output wire        cpu_instruction_manager_rvalid,          //                                .rvalid
		input  wire        cpu_instruction_manager_rready,          //                                .rready
		output wire [0:0]  jtag_uart_avalon_jtag_slave_address,     //     jtag_uart_avalon_jtag_slave.address
		output wire        jtag_uart_avalon_jtag_slave_write,       //                                .write
		output wire        jtag_uart_avalon_jtag_slave_read,        //                                .read
		input  wire [31:0] jtag_uart_avalon_jtag_slave_readdata,    //                                .readdata
		output wire [31:0] jtag_uart_avalon_jtag_slave_writedata,   //                                .writedata
		input  wire        jtag_uart_avalon_jtag_slave_waitrequest, //                                .waitrequest
		output wire        jtag_uart_avalon_jtag_slave_chipselect,  //                                .chipselect
		output wire [0:0]  sysid_qsys_0_control_slave_address,      //      sysid_qsys_0_control_slave.address
		input  wire [31:0] sysid_qsys_0_control_slave_readdata,     //                                .readdata
		output wire [15:0] cpu_dm_agent_address,                    //                    cpu_dm_agent.address
		output wire        cpu_dm_agent_write,                      //                                .write
		output wire        cpu_dm_agent_read,                       //                                .read
		input  wire [31:0] cpu_dm_agent_readdata,                   //                                .readdata
		output wire [31:0] cpu_dm_agent_writedata,                  //                                .writedata
		input  wire        cpu_dm_agent_readdatavalid,              //                                .readdatavalid
		input  wire        cpu_dm_agent_waitrequest,                //                                .waitrequest
		output wire [18:0] ram_s1_address,                          //                          ram_s1.address
		output wire        ram_s1_write,                            //                                .write
		output wire        ram_s1_read,                             //                                .read
		input  wire [31:0] ram_s1_readdata,                         //                                .readdata
		output wire [31:0] ram_s1_writedata,                        //                                .writedata
		output wire [3:0]  ram_s1_byteenable,                       //                                .byteenable
		output wire [5:0]  cpu_timer_sw_agent_address,              //              cpu_timer_sw_agent.address
		output wire        cpu_timer_sw_agent_write,                //                                .write
		output wire        cpu_timer_sw_agent_read,                 //                                .read
		input  wire [31:0] cpu_timer_sw_agent_readdata,             //                                .readdata
		output wire [31:0] cpu_timer_sw_agent_writedata,            //                                .writedata
		output wire [3:0]  cpu_timer_sw_agent_byteenable,           //                                .byteenable
		input  wire        cpu_timer_sw_agent_readdatavalid,        //                                .readdatavalid
		input  wire        cpu_timer_sw_agent_waitrequest,          //                                .waitrequest
		input  wire        cpu_reset_reset_bridge_in_reset_reset,   // cpu_reset_reset_bridge_in_reset.reset,        Reset Input
		input  wire        clock_in_out_clk_clk                     //                clock_in_out_clk.clk,          Clock Input
	);

	wire    [0:0] cpu_data_manager_translator_m0_ruser;                            // cpu_data_manager_agent:ruser -> cpu_data_manager_translator:m0_ruser
	wire    [0:0] cpu_data_manager_translator_m0_wuser;                            // cpu_data_manager_translator:m0_wuser -> cpu_data_manager_agent:wuser
	wire    [1:0] cpu_data_manager_translator_m0_awburst;                          // cpu_data_manager_translator:m0_awburst -> cpu_data_manager_agent:awburst
	wire    [3:0] cpu_data_manager_translator_m0_arregion;                         // cpu_data_manager_translator:m0_arregion -> cpu_data_manager_agent:arregion
	wire    [0:0] cpu_data_manager_translator_m0_awuser;                           // cpu_data_manager_translator:m0_awuser -> cpu_data_manager_agent:awuser
	wire    [7:0] cpu_data_manager_translator_m0_arlen;                            // cpu_data_manager_translator:m0_arlen -> cpu_data_manager_agent:arlen
	wire    [3:0] cpu_data_manager_translator_m0_arqos;                            // cpu_data_manager_translator:m0_arqos -> cpu_data_manager_agent:arqos
	wire    [3:0] cpu_data_manager_translator_m0_wstrb;                            // cpu_data_manager_translator:m0_wstrb -> cpu_data_manager_agent:wstrb
	wire          cpu_data_manager_translator_m0_wready;                           // cpu_data_manager_agent:wready -> cpu_data_manager_translator:m0_wready
	wire    [0:0] cpu_data_manager_translator_m0_rid;                              // cpu_data_manager_agent:rid -> cpu_data_manager_translator:m0_rid
	wire          cpu_data_manager_translator_m0_rready;                           // cpu_data_manager_translator:m0_rready -> cpu_data_manager_agent:rready
	wire    [7:0] cpu_data_manager_translator_m0_awlen;                            // cpu_data_manager_translator:m0_awlen -> cpu_data_manager_agent:awlen
	wire    [3:0] cpu_data_manager_translator_m0_awqos;                            // cpu_data_manager_translator:m0_awqos -> cpu_data_manager_agent:awqos
	wire    [3:0] cpu_data_manager_translator_m0_arcache;                          // cpu_data_manager_translator:m0_arcache -> cpu_data_manager_agent:arcache
	wire          cpu_data_manager_translator_m0_wvalid;                           // cpu_data_manager_translator:m0_wvalid -> cpu_data_manager_agent:wvalid
	wire   [31:0] cpu_data_manager_translator_m0_araddr;                           // cpu_data_manager_translator:m0_araddr -> cpu_data_manager_agent:araddr
	wire    [2:0] cpu_data_manager_translator_m0_arprot;                           // cpu_data_manager_translator:m0_arprot -> cpu_data_manager_agent:arprot
	wire    [2:0] cpu_data_manager_translator_m0_awprot;                           // cpu_data_manager_translator:m0_awprot -> cpu_data_manager_agent:awprot
	wire   [31:0] cpu_data_manager_translator_m0_wdata;                            // cpu_data_manager_translator:m0_wdata -> cpu_data_manager_agent:wdata
	wire          cpu_data_manager_translator_m0_arvalid;                          // cpu_data_manager_translator:m0_arvalid -> cpu_data_manager_agent:arvalid
	wire    [3:0] cpu_data_manager_translator_m0_awcache;                          // cpu_data_manager_translator:m0_awcache -> cpu_data_manager_agent:awcache
	wire    [0:0] cpu_data_manager_translator_m0_arid;                             // cpu_data_manager_translator:m0_arid -> cpu_data_manager_agent:arid
	wire    [0:0] cpu_data_manager_translator_m0_arlock;                           // cpu_data_manager_translator:m0_arlock -> cpu_data_manager_agent:arlock
	wire    [0:0] cpu_data_manager_translator_m0_awlock;                           // cpu_data_manager_translator:m0_awlock -> cpu_data_manager_agent:awlock
	wire   [31:0] cpu_data_manager_translator_m0_awaddr;                           // cpu_data_manager_translator:m0_awaddr -> cpu_data_manager_agent:awaddr
	wire    [1:0] cpu_data_manager_translator_m0_bresp;                            // cpu_data_manager_agent:bresp -> cpu_data_manager_translator:m0_bresp
	wire          cpu_data_manager_translator_m0_arready;                          // cpu_data_manager_agent:arready -> cpu_data_manager_translator:m0_arready
	wire   [31:0] cpu_data_manager_translator_m0_rdata;                            // cpu_data_manager_agent:rdata -> cpu_data_manager_translator:m0_rdata
	wire          cpu_data_manager_translator_m0_awready;                          // cpu_data_manager_agent:awready -> cpu_data_manager_translator:m0_awready
	wire    [1:0] cpu_data_manager_translator_m0_arburst;                          // cpu_data_manager_translator:m0_arburst -> cpu_data_manager_agent:arburst
	wire    [2:0] cpu_data_manager_translator_m0_arsize;                           // cpu_data_manager_translator:m0_arsize -> cpu_data_manager_agent:arsize
	wire          cpu_data_manager_translator_m0_bready;                           // cpu_data_manager_translator:m0_bready -> cpu_data_manager_agent:bready
	wire          cpu_data_manager_translator_m0_rlast;                            // cpu_data_manager_agent:rlast -> cpu_data_manager_translator:m0_rlast
	wire          cpu_data_manager_translator_m0_wlast;                            // cpu_data_manager_translator:m0_wlast -> cpu_data_manager_agent:wlast
	wire    [3:0] cpu_data_manager_translator_m0_awregion;                         // cpu_data_manager_translator:m0_awregion -> cpu_data_manager_agent:awregion
	wire    [0:0] cpu_data_manager_translator_m0_buser;                            // cpu_data_manager_agent:buser -> cpu_data_manager_translator:m0_buser
	wire    [1:0] cpu_data_manager_translator_m0_rresp;                            // cpu_data_manager_agent:rresp -> cpu_data_manager_translator:m0_rresp
	wire    [0:0] cpu_data_manager_translator_m0_awid;                             // cpu_data_manager_translator:m0_awid -> cpu_data_manager_agent:awid
	wire    [0:0] cpu_data_manager_translator_m0_bid;                              // cpu_data_manager_agent:bid -> cpu_data_manager_translator:m0_bid
	wire          cpu_data_manager_translator_m0_bvalid;                           // cpu_data_manager_agent:bvalid -> cpu_data_manager_translator:m0_bvalid
	wire    [2:0] cpu_data_manager_translator_m0_awsize;                           // cpu_data_manager_translator:m0_awsize -> cpu_data_manager_agent:awsize
	wire          cpu_data_manager_translator_m0_awvalid;                          // cpu_data_manager_translator:m0_awvalid -> cpu_data_manager_agent:awvalid
	wire    [0:0] cpu_data_manager_translator_m0_aruser;                           // cpu_data_manager_translator:m0_aruser -> cpu_data_manager_agent:aruser
	wire          cpu_data_manager_translator_m0_rvalid;                           // cpu_data_manager_agent:rvalid -> cpu_data_manager_translator:m0_rvalid
	wire          rsp_mux_src_valid;                                               // rsp_mux:src_valid -> cpu_data_manager_agent:write_rp_valid
	wire  [143:0] rsp_mux_src_data;                                                // rsp_mux:src_data -> cpu_data_manager_agent:write_rp_data
	wire          rsp_mux_src_ready;                                               // cpu_data_manager_agent:write_rp_ready -> rsp_mux:src_ready
	wire    [4:0] rsp_mux_src_channel;                                             // rsp_mux:src_channel -> cpu_data_manager_agent:write_rp_channel
	wire          rsp_mux_src_startofpacket;                                       // rsp_mux:src_startofpacket -> cpu_data_manager_agent:write_rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                         // rsp_mux:src_endofpacket -> cpu_data_manager_agent:write_rp_endofpacket
	wire          rsp_mux_001_src_valid;                                           // rsp_mux_001:src_valid -> cpu_data_manager_agent:read_rp_valid
	wire  [143:0] rsp_mux_001_src_data;                                            // rsp_mux_001:src_data -> cpu_data_manager_agent:read_rp_data
	wire          rsp_mux_001_src_ready;                                           // cpu_data_manager_agent:read_rp_ready -> rsp_mux_001:src_ready
	wire    [4:0] rsp_mux_001_src_channel;                                         // rsp_mux_001:src_channel -> cpu_data_manager_agent:read_rp_channel
	wire          rsp_mux_001_src_startofpacket;                                   // rsp_mux_001:src_startofpacket -> cpu_data_manager_agent:read_rp_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                     // rsp_mux_001:src_endofpacket -> cpu_data_manager_agent:read_rp_endofpacket
	wire    [0:0] cpu_instruction_manager_translator_m0_ruser;                     // cpu_instruction_manager_agent:ruser -> cpu_instruction_manager_translator:m0_ruser
	wire    [0:0] cpu_instruction_manager_translator_m0_wuser;                     // cpu_instruction_manager_translator:m0_wuser -> cpu_instruction_manager_agent:wuser
	wire    [1:0] cpu_instruction_manager_translator_m0_awburst;                   // cpu_instruction_manager_translator:m0_awburst -> cpu_instruction_manager_agent:awburst
	wire    [3:0] cpu_instruction_manager_translator_m0_arregion;                  // cpu_instruction_manager_translator:m0_arregion -> cpu_instruction_manager_agent:arregion
	wire    [0:0] cpu_instruction_manager_translator_m0_awuser;                    // cpu_instruction_manager_translator:m0_awuser -> cpu_instruction_manager_agent:awuser
	wire    [7:0] cpu_instruction_manager_translator_m0_arlen;                     // cpu_instruction_manager_translator:m0_arlen -> cpu_instruction_manager_agent:arlen
	wire    [3:0] cpu_instruction_manager_translator_m0_arqos;                     // cpu_instruction_manager_translator:m0_arqos -> cpu_instruction_manager_agent:arqos
	wire    [3:0] cpu_instruction_manager_translator_m0_wstrb;                     // cpu_instruction_manager_translator:m0_wstrb -> cpu_instruction_manager_agent:wstrb
	wire          cpu_instruction_manager_translator_m0_wready;                    // cpu_instruction_manager_agent:wready -> cpu_instruction_manager_translator:m0_wready
	wire    [0:0] cpu_instruction_manager_translator_m0_rid;                       // cpu_instruction_manager_agent:rid -> cpu_instruction_manager_translator:m0_rid
	wire          cpu_instruction_manager_translator_m0_rready;                    // cpu_instruction_manager_translator:m0_rready -> cpu_instruction_manager_agent:rready
	wire    [7:0] cpu_instruction_manager_translator_m0_awlen;                     // cpu_instruction_manager_translator:m0_awlen -> cpu_instruction_manager_agent:awlen
	wire    [3:0] cpu_instruction_manager_translator_m0_awqos;                     // cpu_instruction_manager_translator:m0_awqos -> cpu_instruction_manager_agent:awqos
	wire    [3:0] cpu_instruction_manager_translator_m0_arcache;                   // cpu_instruction_manager_translator:m0_arcache -> cpu_instruction_manager_agent:arcache
	wire          cpu_instruction_manager_translator_m0_wvalid;                    // cpu_instruction_manager_translator:m0_wvalid -> cpu_instruction_manager_agent:wvalid
	wire   [31:0] cpu_instruction_manager_translator_m0_araddr;                    // cpu_instruction_manager_translator:m0_araddr -> cpu_instruction_manager_agent:araddr
	wire    [2:0] cpu_instruction_manager_translator_m0_arprot;                    // cpu_instruction_manager_translator:m0_arprot -> cpu_instruction_manager_agent:arprot
	wire    [2:0] cpu_instruction_manager_translator_m0_awprot;                    // cpu_instruction_manager_translator:m0_awprot -> cpu_instruction_manager_agent:awprot
	wire   [31:0] cpu_instruction_manager_translator_m0_wdata;                     // cpu_instruction_manager_translator:m0_wdata -> cpu_instruction_manager_agent:wdata
	wire          cpu_instruction_manager_translator_m0_arvalid;                   // cpu_instruction_manager_translator:m0_arvalid -> cpu_instruction_manager_agent:arvalid
	wire    [3:0] cpu_instruction_manager_translator_m0_awcache;                   // cpu_instruction_manager_translator:m0_awcache -> cpu_instruction_manager_agent:awcache
	wire    [0:0] cpu_instruction_manager_translator_m0_arid;                      // cpu_instruction_manager_translator:m0_arid -> cpu_instruction_manager_agent:arid
	wire    [0:0] cpu_instruction_manager_translator_m0_arlock;                    // cpu_instruction_manager_translator:m0_arlock -> cpu_instruction_manager_agent:arlock
	wire    [0:0] cpu_instruction_manager_translator_m0_awlock;                    // cpu_instruction_manager_translator:m0_awlock -> cpu_instruction_manager_agent:awlock
	wire   [31:0] cpu_instruction_manager_translator_m0_awaddr;                    // cpu_instruction_manager_translator:m0_awaddr -> cpu_instruction_manager_agent:awaddr
	wire    [1:0] cpu_instruction_manager_translator_m0_bresp;                     // cpu_instruction_manager_agent:bresp -> cpu_instruction_manager_translator:m0_bresp
	wire          cpu_instruction_manager_translator_m0_arready;                   // cpu_instruction_manager_agent:arready -> cpu_instruction_manager_translator:m0_arready
	wire   [31:0] cpu_instruction_manager_translator_m0_rdata;                     // cpu_instruction_manager_agent:rdata -> cpu_instruction_manager_translator:m0_rdata
	wire          cpu_instruction_manager_translator_m0_awready;                   // cpu_instruction_manager_agent:awready -> cpu_instruction_manager_translator:m0_awready
	wire    [1:0] cpu_instruction_manager_translator_m0_arburst;                   // cpu_instruction_manager_translator:m0_arburst -> cpu_instruction_manager_agent:arburst
	wire    [2:0] cpu_instruction_manager_translator_m0_arsize;                    // cpu_instruction_manager_translator:m0_arsize -> cpu_instruction_manager_agent:arsize
	wire          cpu_instruction_manager_translator_m0_bready;                    // cpu_instruction_manager_translator:m0_bready -> cpu_instruction_manager_agent:bready
	wire          cpu_instruction_manager_translator_m0_rlast;                     // cpu_instruction_manager_agent:rlast -> cpu_instruction_manager_translator:m0_rlast
	wire          cpu_instruction_manager_translator_m0_wlast;                     // cpu_instruction_manager_translator:m0_wlast -> cpu_instruction_manager_agent:wlast
	wire    [3:0] cpu_instruction_manager_translator_m0_awregion;                  // cpu_instruction_manager_translator:m0_awregion -> cpu_instruction_manager_agent:awregion
	wire    [0:0] cpu_instruction_manager_translator_m0_buser;                     // cpu_instruction_manager_agent:buser -> cpu_instruction_manager_translator:m0_buser
	wire    [1:0] cpu_instruction_manager_translator_m0_rresp;                     // cpu_instruction_manager_agent:rresp -> cpu_instruction_manager_translator:m0_rresp
	wire    [0:0] cpu_instruction_manager_translator_m0_awid;                      // cpu_instruction_manager_translator:m0_awid -> cpu_instruction_manager_agent:awid
	wire    [0:0] cpu_instruction_manager_translator_m0_bid;                       // cpu_instruction_manager_agent:bid -> cpu_instruction_manager_translator:m0_bid
	wire          cpu_instruction_manager_translator_m0_bvalid;                    // cpu_instruction_manager_agent:bvalid -> cpu_instruction_manager_translator:m0_bvalid
	wire    [2:0] cpu_instruction_manager_translator_m0_awsize;                    // cpu_instruction_manager_translator:m0_awsize -> cpu_instruction_manager_agent:awsize
	wire          cpu_instruction_manager_translator_m0_awvalid;                   // cpu_instruction_manager_translator:m0_awvalid -> cpu_instruction_manager_agent:awvalid
	wire    [0:0] cpu_instruction_manager_translator_m0_aruser;                    // cpu_instruction_manager_translator:m0_aruser -> cpu_instruction_manager_agent:aruser
	wire          cpu_instruction_manager_translator_m0_rvalid;                    // cpu_instruction_manager_agent:rvalid -> cpu_instruction_manager_translator:m0_rvalid
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_readdata;                   // jtag_uart_avalon_jtag_slave_translator:uav_readdata -> jtag_uart_avalon_jtag_slave_agent:m0_readdata
	wire          jtag_uart_avalon_jtag_slave_agent_m0_waitrequest;                // jtag_uart_avalon_jtag_slave_translator:uav_waitrequest -> jtag_uart_avalon_jtag_slave_agent:m0_waitrequest
	wire          jtag_uart_avalon_jtag_slave_agent_m0_debugaccess;                // jtag_uart_avalon_jtag_slave_agent:m0_debugaccess -> jtag_uart_avalon_jtag_slave_translator:uav_debugaccess
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_address;                    // jtag_uart_avalon_jtag_slave_agent:m0_address -> jtag_uart_avalon_jtag_slave_translator:uav_address
	wire    [3:0] jtag_uart_avalon_jtag_slave_agent_m0_byteenable;                 // jtag_uart_avalon_jtag_slave_agent:m0_byteenable -> jtag_uart_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_uart_avalon_jtag_slave_agent_m0_read;                       // jtag_uart_avalon_jtag_slave_agent:m0_read -> jtag_uart_avalon_jtag_slave_translator:uav_read
	wire          jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid;              // jtag_uart_avalon_jtag_slave_translator:uav_readdatavalid -> jtag_uart_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtag_uart_avalon_jtag_slave_agent_m0_lock;                       // jtag_uart_avalon_jtag_slave_agent:m0_lock -> jtag_uart_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_writedata;                  // jtag_uart_avalon_jtag_slave_agent:m0_writedata -> jtag_uart_avalon_jtag_slave_translator:uav_writedata
	wire          jtag_uart_avalon_jtag_slave_agent_m0_write;                      // jtag_uart_avalon_jtag_slave_agent:m0_write -> jtag_uart_avalon_jtag_slave_translator:uav_write
	wire    [2:0] jtag_uart_avalon_jtag_slave_agent_m0_burstcount;                 // jtag_uart_avalon_jtag_slave_agent:m0_burstcount -> jtag_uart_avalon_jtag_slave_translator:uav_burstcount
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_valid;               // jtag_uart_avalon_jtag_slave_agent:rf_source_valid -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [144:0] jtag_uart_avalon_jtag_slave_agent_rf_source_data;                // jtag_uart_avalon_jtag_slave_agent:rf_source_data -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_ready;               // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_ready -> jtag_uart_avalon_jtag_slave_agent:rf_source_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket;       // jtag_uart_avalon_jtag_slave_agent:rf_source_startofpacket -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket;         // jtag_uart_avalon_jtag_slave_agent:rf_source_endofpacket -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid;            // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_valid -> jtag_uart_avalon_jtag_slave_agent:rf_sink_valid
	wire  [144:0] jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data;             // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_data -> jtag_uart_avalon_jtag_slave_agent:rf_sink_data
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready;            // jtag_uart_avalon_jtag_slave_agent:rf_sink_ready -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;    // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> jtag_uart_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;      // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> jtag_uart_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid;          // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_valid -> jtag_uart_avalon_jtag_slave_agent_rdata_fifo:in_valid
	wire   [33:0] jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data;           // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_data -> jtag_uart_avalon_jtag_slave_agent_rdata_fifo:in_data
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready;          // jtag_uart_avalon_jtag_slave_agent_rdata_fifo:in_ready -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_valid;          // jtag_uart_avalon_jtag_slave_agent_rdata_fifo:out_valid -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_data;           // jtag_uart_avalon_jtag_slave_agent_rdata_fifo:out_data -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_ready;          // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> jtag_uart_avalon_jtag_slave_agent_rdata_fifo:out_ready
	wire   [31:0] sysid_qsys_0_control_slave_agent_m0_readdata;                    // sysid_qsys_0_control_slave_translator:uav_readdata -> sysid_qsys_0_control_slave_agent:m0_readdata
	wire          sysid_qsys_0_control_slave_agent_m0_waitrequest;                 // sysid_qsys_0_control_slave_translator:uav_waitrequest -> sysid_qsys_0_control_slave_agent:m0_waitrequest
	wire          sysid_qsys_0_control_slave_agent_m0_debugaccess;                 // sysid_qsys_0_control_slave_agent:m0_debugaccess -> sysid_qsys_0_control_slave_translator:uav_debugaccess
	wire   [31:0] sysid_qsys_0_control_slave_agent_m0_address;                     // sysid_qsys_0_control_slave_agent:m0_address -> sysid_qsys_0_control_slave_translator:uav_address
	wire    [3:0] sysid_qsys_0_control_slave_agent_m0_byteenable;                  // sysid_qsys_0_control_slave_agent:m0_byteenable -> sysid_qsys_0_control_slave_translator:uav_byteenable
	wire          sysid_qsys_0_control_slave_agent_m0_read;                        // sysid_qsys_0_control_slave_agent:m0_read -> sysid_qsys_0_control_slave_translator:uav_read
	wire          sysid_qsys_0_control_slave_agent_m0_readdatavalid;               // sysid_qsys_0_control_slave_translator:uav_readdatavalid -> sysid_qsys_0_control_slave_agent:m0_readdatavalid
	wire          sysid_qsys_0_control_slave_agent_m0_lock;                        // sysid_qsys_0_control_slave_agent:m0_lock -> sysid_qsys_0_control_slave_translator:uav_lock
	wire   [31:0] sysid_qsys_0_control_slave_agent_m0_writedata;                   // sysid_qsys_0_control_slave_agent:m0_writedata -> sysid_qsys_0_control_slave_translator:uav_writedata
	wire          sysid_qsys_0_control_slave_agent_m0_write;                       // sysid_qsys_0_control_slave_agent:m0_write -> sysid_qsys_0_control_slave_translator:uav_write
	wire    [2:0] sysid_qsys_0_control_slave_agent_m0_burstcount;                  // sysid_qsys_0_control_slave_agent:m0_burstcount -> sysid_qsys_0_control_slave_translator:uav_burstcount
	wire          sysid_qsys_0_control_slave_agent_rf_source_valid;                // sysid_qsys_0_control_slave_agent:rf_source_valid -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_valid
	wire  [144:0] sysid_qsys_0_control_slave_agent_rf_source_data;                 // sysid_qsys_0_control_slave_agent:rf_source_data -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_data
	wire          sysid_qsys_0_control_slave_agent_rf_source_ready;                // sysid_qsys_0_control_slave_agent_rsp_fifo:in_ready -> sysid_qsys_0_control_slave_agent:rf_source_ready
	wire          sysid_qsys_0_control_slave_agent_rf_source_startofpacket;        // sysid_qsys_0_control_slave_agent:rf_source_startofpacket -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_startofpacket
	wire          sysid_qsys_0_control_slave_agent_rf_source_endofpacket;          // sysid_qsys_0_control_slave_agent:rf_source_endofpacket -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_endofpacket
	wire          sysid_qsys_0_control_slave_agent_rsp_fifo_out_valid;             // sysid_qsys_0_control_slave_agent_rsp_fifo:out_valid -> sysid_qsys_0_control_slave_agent:rf_sink_valid
	wire  [144:0] sysid_qsys_0_control_slave_agent_rsp_fifo_out_data;              // sysid_qsys_0_control_slave_agent_rsp_fifo:out_data -> sysid_qsys_0_control_slave_agent:rf_sink_data
	wire          sysid_qsys_0_control_slave_agent_rsp_fifo_out_ready;             // sysid_qsys_0_control_slave_agent:rf_sink_ready -> sysid_qsys_0_control_slave_agent_rsp_fifo:out_ready
	wire          sysid_qsys_0_control_slave_agent_rsp_fifo_out_startofpacket;     // sysid_qsys_0_control_slave_agent_rsp_fifo:out_startofpacket -> sysid_qsys_0_control_slave_agent:rf_sink_startofpacket
	wire          sysid_qsys_0_control_slave_agent_rsp_fifo_out_endofpacket;       // sysid_qsys_0_control_slave_agent_rsp_fifo:out_endofpacket -> sysid_qsys_0_control_slave_agent:rf_sink_endofpacket
	wire          sysid_qsys_0_control_slave_agent_rdata_fifo_src_valid;           // sysid_qsys_0_control_slave_agent:rdata_fifo_src_valid -> sysid_qsys_0_control_slave_agent_rdata_fifo:in_valid
	wire   [33:0] sysid_qsys_0_control_slave_agent_rdata_fifo_src_data;            // sysid_qsys_0_control_slave_agent:rdata_fifo_src_data -> sysid_qsys_0_control_slave_agent_rdata_fifo:in_data
	wire          sysid_qsys_0_control_slave_agent_rdata_fifo_src_ready;           // sysid_qsys_0_control_slave_agent_rdata_fifo:in_ready -> sysid_qsys_0_control_slave_agent:rdata_fifo_src_ready
	wire          sysid_qsys_0_control_slave_agent_rdata_fifo_out_valid;           // sysid_qsys_0_control_slave_agent_rdata_fifo:out_valid -> sysid_qsys_0_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] sysid_qsys_0_control_slave_agent_rdata_fifo_out_data;            // sysid_qsys_0_control_slave_agent_rdata_fifo:out_data -> sysid_qsys_0_control_slave_agent:rdata_fifo_sink_data
	wire          sysid_qsys_0_control_slave_agent_rdata_fifo_out_ready;           // sysid_qsys_0_control_slave_agent:rdata_fifo_sink_ready -> sysid_qsys_0_control_slave_agent_rdata_fifo:out_ready
	wire   [31:0] cpu_dm_agent_agent_m0_readdata;                                  // cpu_dm_agent_translator:uav_readdata -> cpu_dm_agent_agent:m0_readdata
	wire          cpu_dm_agent_agent_m0_waitrequest;                               // cpu_dm_agent_translator:uav_waitrequest -> cpu_dm_agent_agent:m0_waitrequest
	wire          cpu_dm_agent_agent_m0_debugaccess;                               // cpu_dm_agent_agent:m0_debugaccess -> cpu_dm_agent_translator:uav_debugaccess
	wire   [31:0] cpu_dm_agent_agent_m0_address;                                   // cpu_dm_agent_agent:m0_address -> cpu_dm_agent_translator:uav_address
	wire    [3:0] cpu_dm_agent_agent_m0_byteenable;                                // cpu_dm_agent_agent:m0_byteenable -> cpu_dm_agent_translator:uav_byteenable
	wire          cpu_dm_agent_agent_m0_read;                                      // cpu_dm_agent_agent:m0_read -> cpu_dm_agent_translator:uav_read
	wire          cpu_dm_agent_agent_m0_readdatavalid;                             // cpu_dm_agent_translator:uav_readdatavalid -> cpu_dm_agent_agent:m0_readdatavalid
	wire          cpu_dm_agent_agent_m0_lock;                                      // cpu_dm_agent_agent:m0_lock -> cpu_dm_agent_translator:uav_lock
	wire   [31:0] cpu_dm_agent_agent_m0_writedata;                                 // cpu_dm_agent_agent:m0_writedata -> cpu_dm_agent_translator:uav_writedata
	wire          cpu_dm_agent_agent_m0_write;                                     // cpu_dm_agent_agent:m0_write -> cpu_dm_agent_translator:uav_write
	wire    [2:0] cpu_dm_agent_agent_m0_burstcount;                                // cpu_dm_agent_agent:m0_burstcount -> cpu_dm_agent_translator:uav_burstcount
	wire          cpu_dm_agent_agent_rf_source_valid;                              // cpu_dm_agent_agent:rf_source_valid -> cpu_dm_agent_agent_rsp_fifo:in_valid
	wire  [144:0] cpu_dm_agent_agent_rf_source_data;                               // cpu_dm_agent_agent:rf_source_data -> cpu_dm_agent_agent_rsp_fifo:in_data
	wire          cpu_dm_agent_agent_rf_source_ready;                              // cpu_dm_agent_agent_rsp_fifo:in_ready -> cpu_dm_agent_agent:rf_source_ready
	wire          cpu_dm_agent_agent_rf_source_startofpacket;                      // cpu_dm_agent_agent:rf_source_startofpacket -> cpu_dm_agent_agent_rsp_fifo:in_startofpacket
	wire          cpu_dm_agent_agent_rf_source_endofpacket;                        // cpu_dm_agent_agent:rf_source_endofpacket -> cpu_dm_agent_agent_rsp_fifo:in_endofpacket
	wire          cpu_dm_agent_agent_rsp_fifo_out_valid;                           // cpu_dm_agent_agent_rsp_fifo:out_valid -> cpu_dm_agent_agent:rf_sink_valid
	wire  [144:0] cpu_dm_agent_agent_rsp_fifo_out_data;                            // cpu_dm_agent_agent_rsp_fifo:out_data -> cpu_dm_agent_agent:rf_sink_data
	wire          cpu_dm_agent_agent_rsp_fifo_out_ready;                           // cpu_dm_agent_agent:rf_sink_ready -> cpu_dm_agent_agent_rsp_fifo:out_ready
	wire          cpu_dm_agent_agent_rsp_fifo_out_startofpacket;                   // cpu_dm_agent_agent_rsp_fifo:out_startofpacket -> cpu_dm_agent_agent:rf_sink_startofpacket
	wire          cpu_dm_agent_agent_rsp_fifo_out_endofpacket;                     // cpu_dm_agent_agent_rsp_fifo:out_endofpacket -> cpu_dm_agent_agent:rf_sink_endofpacket
	wire          cpu_dm_agent_agent_rdata_fifo_src_valid;                         // cpu_dm_agent_agent:rdata_fifo_src_valid -> cpu_dm_agent_agent_rdata_fifo:in_valid
	wire   [33:0] cpu_dm_agent_agent_rdata_fifo_src_data;                          // cpu_dm_agent_agent:rdata_fifo_src_data -> cpu_dm_agent_agent_rdata_fifo:in_data
	wire          cpu_dm_agent_agent_rdata_fifo_src_ready;                         // cpu_dm_agent_agent_rdata_fifo:in_ready -> cpu_dm_agent_agent:rdata_fifo_src_ready
	wire          cpu_dm_agent_agent_rdata_fifo_out_valid;                         // cpu_dm_agent_agent_rdata_fifo:out_valid -> cpu_dm_agent_agent:rdata_fifo_sink_valid
	wire   [33:0] cpu_dm_agent_agent_rdata_fifo_out_data;                          // cpu_dm_agent_agent_rdata_fifo:out_data -> cpu_dm_agent_agent:rdata_fifo_sink_data
	wire          cpu_dm_agent_agent_rdata_fifo_out_ready;                         // cpu_dm_agent_agent:rdata_fifo_sink_ready -> cpu_dm_agent_agent_rdata_fifo:out_ready
	wire   [31:0] ram_s1_agent_m0_readdata;                                        // ram_s1_translator:uav_readdata -> ram_s1_agent:m0_readdata
	wire          ram_s1_agent_m0_waitrequest;                                     // ram_s1_translator:uav_waitrequest -> ram_s1_agent:m0_waitrequest
	wire          ram_s1_agent_m0_debugaccess;                                     // ram_s1_agent:m0_debugaccess -> ram_s1_translator:uav_debugaccess
	wire   [31:0] ram_s1_agent_m0_address;                                         // ram_s1_agent:m0_address -> ram_s1_translator:uav_address
	wire    [3:0] ram_s1_agent_m0_byteenable;                                      // ram_s1_agent:m0_byteenable -> ram_s1_translator:uav_byteenable
	wire          ram_s1_agent_m0_read;                                            // ram_s1_agent:m0_read -> ram_s1_translator:uav_read
	wire          ram_s1_agent_m0_readdatavalid;                                   // ram_s1_translator:uav_readdatavalid -> ram_s1_agent:m0_readdatavalid
	wire          ram_s1_agent_m0_lock;                                            // ram_s1_agent:m0_lock -> ram_s1_translator:uav_lock
	wire   [31:0] ram_s1_agent_m0_writedata;                                       // ram_s1_agent:m0_writedata -> ram_s1_translator:uav_writedata
	wire          ram_s1_agent_m0_write;                                           // ram_s1_agent:m0_write -> ram_s1_translator:uav_write
	wire    [2:0] ram_s1_agent_m0_burstcount;                                      // ram_s1_agent:m0_burstcount -> ram_s1_translator:uav_burstcount
	wire          ram_s1_agent_rf_source_valid;                                    // ram_s1_agent:rf_source_valid -> ram_s1_agent_rsp_fifo:in_valid
	wire  [144:0] ram_s1_agent_rf_source_data;                                     // ram_s1_agent:rf_source_data -> ram_s1_agent_rsp_fifo:in_data
	wire          ram_s1_agent_rf_source_ready;                                    // ram_s1_agent_rsp_fifo:in_ready -> ram_s1_agent:rf_source_ready
	wire          ram_s1_agent_rf_source_startofpacket;                            // ram_s1_agent:rf_source_startofpacket -> ram_s1_agent_rsp_fifo:in_startofpacket
	wire          ram_s1_agent_rf_source_endofpacket;                              // ram_s1_agent:rf_source_endofpacket -> ram_s1_agent_rsp_fifo:in_endofpacket
	wire          ram_s1_agent_rsp_fifo_out_valid;                                 // ram_s1_agent_rsp_fifo:out_valid -> ram_s1_agent:rf_sink_valid
	wire  [144:0] ram_s1_agent_rsp_fifo_out_data;                                  // ram_s1_agent_rsp_fifo:out_data -> ram_s1_agent:rf_sink_data
	wire          ram_s1_agent_rsp_fifo_out_ready;                                 // ram_s1_agent:rf_sink_ready -> ram_s1_agent_rsp_fifo:out_ready
	wire          ram_s1_agent_rsp_fifo_out_startofpacket;                         // ram_s1_agent_rsp_fifo:out_startofpacket -> ram_s1_agent:rf_sink_startofpacket
	wire          ram_s1_agent_rsp_fifo_out_endofpacket;                           // ram_s1_agent_rsp_fifo:out_endofpacket -> ram_s1_agent:rf_sink_endofpacket
	wire          ram_s1_agent_rdata_fifo_src_valid;                               // ram_s1_agent:rdata_fifo_src_valid -> ram_s1_agent_rdata_fifo:in_valid
	wire   [33:0] ram_s1_agent_rdata_fifo_src_data;                                // ram_s1_agent:rdata_fifo_src_data -> ram_s1_agent_rdata_fifo:in_data
	wire          ram_s1_agent_rdata_fifo_src_ready;                               // ram_s1_agent_rdata_fifo:in_ready -> ram_s1_agent:rdata_fifo_src_ready
	wire          ram_s1_agent_rdata_fifo_out_valid;                               // ram_s1_agent_rdata_fifo:out_valid -> ram_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] ram_s1_agent_rdata_fifo_out_data;                                // ram_s1_agent_rdata_fifo:out_data -> ram_s1_agent:rdata_fifo_sink_data
	wire          ram_s1_agent_rdata_fifo_out_ready;                               // ram_s1_agent:rdata_fifo_sink_ready -> ram_s1_agent_rdata_fifo:out_ready
	wire   [31:0] cpu_timer_sw_agent_agent_m0_readdata;                            // cpu_timer_sw_agent_translator:uav_readdata -> cpu_timer_sw_agent_agent:m0_readdata
	wire          cpu_timer_sw_agent_agent_m0_waitrequest;                         // cpu_timer_sw_agent_translator:uav_waitrequest -> cpu_timer_sw_agent_agent:m0_waitrequest
	wire          cpu_timer_sw_agent_agent_m0_debugaccess;                         // cpu_timer_sw_agent_agent:m0_debugaccess -> cpu_timer_sw_agent_translator:uav_debugaccess
	wire   [31:0] cpu_timer_sw_agent_agent_m0_address;                             // cpu_timer_sw_agent_agent:m0_address -> cpu_timer_sw_agent_translator:uav_address
	wire    [3:0] cpu_timer_sw_agent_agent_m0_byteenable;                          // cpu_timer_sw_agent_agent:m0_byteenable -> cpu_timer_sw_agent_translator:uav_byteenable
	wire          cpu_timer_sw_agent_agent_m0_read;                                // cpu_timer_sw_agent_agent:m0_read -> cpu_timer_sw_agent_translator:uav_read
	wire          cpu_timer_sw_agent_agent_m0_readdatavalid;                       // cpu_timer_sw_agent_translator:uav_readdatavalid -> cpu_timer_sw_agent_agent:m0_readdatavalid
	wire          cpu_timer_sw_agent_agent_m0_lock;                                // cpu_timer_sw_agent_agent:m0_lock -> cpu_timer_sw_agent_translator:uav_lock
	wire   [31:0] cpu_timer_sw_agent_agent_m0_writedata;                           // cpu_timer_sw_agent_agent:m0_writedata -> cpu_timer_sw_agent_translator:uav_writedata
	wire          cpu_timer_sw_agent_agent_m0_write;                               // cpu_timer_sw_agent_agent:m0_write -> cpu_timer_sw_agent_translator:uav_write
	wire    [2:0] cpu_timer_sw_agent_agent_m0_burstcount;                          // cpu_timer_sw_agent_agent:m0_burstcount -> cpu_timer_sw_agent_translator:uav_burstcount
	wire          cpu_timer_sw_agent_agent_rf_source_valid;                        // cpu_timer_sw_agent_agent:rf_source_valid -> cpu_timer_sw_agent_agent_rsp_fifo:in_valid
	wire  [144:0] cpu_timer_sw_agent_agent_rf_source_data;                         // cpu_timer_sw_agent_agent:rf_source_data -> cpu_timer_sw_agent_agent_rsp_fifo:in_data
	wire          cpu_timer_sw_agent_agent_rf_source_ready;                        // cpu_timer_sw_agent_agent_rsp_fifo:in_ready -> cpu_timer_sw_agent_agent:rf_source_ready
	wire          cpu_timer_sw_agent_agent_rf_source_startofpacket;                // cpu_timer_sw_agent_agent:rf_source_startofpacket -> cpu_timer_sw_agent_agent_rsp_fifo:in_startofpacket
	wire          cpu_timer_sw_agent_agent_rf_source_endofpacket;                  // cpu_timer_sw_agent_agent:rf_source_endofpacket -> cpu_timer_sw_agent_agent_rsp_fifo:in_endofpacket
	wire          cpu_timer_sw_agent_agent_rsp_fifo_out_valid;                     // cpu_timer_sw_agent_agent_rsp_fifo:out_valid -> cpu_timer_sw_agent_agent:rf_sink_valid
	wire  [144:0] cpu_timer_sw_agent_agent_rsp_fifo_out_data;                      // cpu_timer_sw_agent_agent_rsp_fifo:out_data -> cpu_timer_sw_agent_agent:rf_sink_data
	wire          cpu_timer_sw_agent_agent_rsp_fifo_out_ready;                     // cpu_timer_sw_agent_agent:rf_sink_ready -> cpu_timer_sw_agent_agent_rsp_fifo:out_ready
	wire          cpu_timer_sw_agent_agent_rsp_fifo_out_startofpacket;             // cpu_timer_sw_agent_agent_rsp_fifo:out_startofpacket -> cpu_timer_sw_agent_agent:rf_sink_startofpacket
	wire          cpu_timer_sw_agent_agent_rsp_fifo_out_endofpacket;               // cpu_timer_sw_agent_agent_rsp_fifo:out_endofpacket -> cpu_timer_sw_agent_agent:rf_sink_endofpacket
	wire          cpu_timer_sw_agent_agent_rdata_fifo_src_valid;                   // cpu_timer_sw_agent_agent:rdata_fifo_src_valid -> cpu_timer_sw_agent_agent_rdata_fifo:in_valid
	wire   [33:0] cpu_timer_sw_agent_agent_rdata_fifo_src_data;                    // cpu_timer_sw_agent_agent:rdata_fifo_src_data -> cpu_timer_sw_agent_agent_rdata_fifo:in_data
	wire          cpu_timer_sw_agent_agent_rdata_fifo_src_ready;                   // cpu_timer_sw_agent_agent_rdata_fifo:in_ready -> cpu_timer_sw_agent_agent:rdata_fifo_src_ready
	wire          cpu_timer_sw_agent_agent_rdata_fifo_out_valid;                   // cpu_timer_sw_agent_agent_rdata_fifo:out_valid -> cpu_timer_sw_agent_agent:rdata_fifo_sink_valid
	wire   [33:0] cpu_timer_sw_agent_agent_rdata_fifo_out_data;                    // cpu_timer_sw_agent_agent_rdata_fifo:out_data -> cpu_timer_sw_agent_agent:rdata_fifo_sink_data
	wire          cpu_timer_sw_agent_agent_rdata_fifo_out_ready;                   // cpu_timer_sw_agent_agent:rdata_fifo_sink_ready -> cpu_timer_sw_agent_agent_rdata_fifo:out_ready
	wire          cpu_data_manager_agent_write_cp_valid;                           // cpu_data_manager_agent:write_cp_valid -> router:sink_valid
	wire  [143:0] cpu_data_manager_agent_write_cp_data;                            // cpu_data_manager_agent:write_cp_data -> router:sink_data
	wire          cpu_data_manager_agent_write_cp_ready;                           // router:sink_ready -> cpu_data_manager_agent:write_cp_ready
	wire          cpu_data_manager_agent_write_cp_startofpacket;                   // cpu_data_manager_agent:write_cp_startofpacket -> router:sink_startofpacket
	wire          cpu_data_manager_agent_write_cp_endofpacket;                     // cpu_data_manager_agent:write_cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                // router:src_valid -> cmd_demux:sink_valid
	wire  [143:0] router_src_data;                                                 // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                // cmd_demux:sink_ready -> router:src_ready
	wire    [4:0] router_src_channel;                                              // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                        // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                          // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          cpu_data_manager_agent_read_cp_valid;                            // cpu_data_manager_agent:read_cp_valid -> router_001:sink_valid
	wire  [143:0] cpu_data_manager_agent_read_cp_data;                             // cpu_data_manager_agent:read_cp_data -> router_001:sink_data
	wire          cpu_data_manager_agent_read_cp_ready;                            // router_001:sink_ready -> cpu_data_manager_agent:read_cp_ready
	wire          cpu_data_manager_agent_read_cp_startofpacket;                    // cpu_data_manager_agent:read_cp_startofpacket -> router_001:sink_startofpacket
	wire          cpu_data_manager_agent_read_cp_endofpacket;                      // cpu_data_manager_agent:read_cp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                            // router_001:src_valid -> cmd_demux_001:sink_valid
	wire  [143:0] router_001_src_data;                                             // router_001:src_data -> cmd_demux_001:sink_data
	wire          router_001_src_ready;                                            // cmd_demux_001:sink_ready -> router_001:src_ready
	wire    [4:0] router_001_src_channel;                                          // router_001:src_channel -> cmd_demux_001:sink_channel
	wire          router_001_src_startofpacket;                                    // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          router_001_src_endofpacket;                                      // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          cpu_instruction_manager_agent_write_cp_valid;                    // cpu_instruction_manager_agent:write_cp_valid -> router_002:sink_valid
	wire  [143:0] cpu_instruction_manager_agent_write_cp_data;                     // cpu_instruction_manager_agent:write_cp_data -> router_002:sink_data
	wire          cpu_instruction_manager_agent_write_cp_ready;                    // router_002:sink_ready -> cpu_instruction_manager_agent:write_cp_ready
	wire          cpu_instruction_manager_agent_write_cp_startofpacket;            // cpu_instruction_manager_agent:write_cp_startofpacket -> router_002:sink_startofpacket
	wire          cpu_instruction_manager_agent_write_cp_endofpacket;              // cpu_instruction_manager_agent:write_cp_endofpacket -> router_002:sink_endofpacket
	wire          cpu_instruction_manager_agent_read_cp_valid;                     // cpu_instruction_manager_agent:read_cp_valid -> router_003:sink_valid
	wire  [143:0] cpu_instruction_manager_agent_read_cp_data;                      // cpu_instruction_manager_agent:read_cp_data -> router_003:sink_data
	wire          cpu_instruction_manager_agent_read_cp_ready;                     // router_003:sink_ready -> cpu_instruction_manager_agent:read_cp_ready
	wire          cpu_instruction_manager_agent_read_cp_startofpacket;             // cpu_instruction_manager_agent:read_cp_startofpacket -> router_003:sink_startofpacket
	wire          cpu_instruction_manager_agent_read_cp_endofpacket;               // cpu_instruction_manager_agent:read_cp_endofpacket -> router_003:sink_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rp_valid;                      // jtag_uart_avalon_jtag_slave_agent:rp_valid -> router_004:sink_valid
	wire  [143:0] jtag_uart_avalon_jtag_slave_agent_rp_data;                       // jtag_uart_avalon_jtag_slave_agent:rp_data -> router_004:sink_data
	wire          jtag_uart_avalon_jtag_slave_agent_rp_ready;                      // router_004:sink_ready -> jtag_uart_avalon_jtag_slave_agent:rp_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rp_startofpacket;              // jtag_uart_avalon_jtag_slave_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rp_endofpacket;                // jtag_uart_avalon_jtag_slave_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                            // router_004:src_valid -> rsp_demux:sink_valid
	wire  [143:0] router_004_src_data;                                             // router_004:src_data -> rsp_demux:sink_data
	wire          router_004_src_ready;                                            // rsp_demux:sink_ready -> router_004:src_ready
	wire    [4:0] router_004_src_channel;                                          // router_004:src_channel -> rsp_demux:sink_channel
	wire          router_004_src_startofpacket;                                    // router_004:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_004_src_endofpacket;                                      // router_004:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          sysid_qsys_0_control_slave_agent_rp_valid;                       // sysid_qsys_0_control_slave_agent:rp_valid -> router_005:sink_valid
	wire  [143:0] sysid_qsys_0_control_slave_agent_rp_data;                        // sysid_qsys_0_control_slave_agent:rp_data -> router_005:sink_data
	wire          sysid_qsys_0_control_slave_agent_rp_ready;                       // router_005:sink_ready -> sysid_qsys_0_control_slave_agent:rp_ready
	wire          sysid_qsys_0_control_slave_agent_rp_startofpacket;               // sysid_qsys_0_control_slave_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          sysid_qsys_0_control_slave_agent_rp_endofpacket;                 // sysid_qsys_0_control_slave_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                            // router_005:src_valid -> rsp_demux_001:sink_valid
	wire  [143:0] router_005_src_data;                                             // router_005:src_data -> rsp_demux_001:sink_data
	wire          router_005_src_ready;                                            // rsp_demux_001:sink_ready -> router_005:src_ready
	wire    [4:0] router_005_src_channel;                                          // router_005:src_channel -> rsp_demux_001:sink_channel
	wire          router_005_src_startofpacket;                                    // router_005:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_005_src_endofpacket;                                      // router_005:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          cpu_dm_agent_agent_rp_valid;                                     // cpu_dm_agent_agent:rp_valid -> router_006:sink_valid
	wire  [143:0] cpu_dm_agent_agent_rp_data;                                      // cpu_dm_agent_agent:rp_data -> router_006:sink_data
	wire          cpu_dm_agent_agent_rp_ready;                                     // router_006:sink_ready -> cpu_dm_agent_agent:rp_ready
	wire          cpu_dm_agent_agent_rp_startofpacket;                             // cpu_dm_agent_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          cpu_dm_agent_agent_rp_endofpacket;                               // cpu_dm_agent_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                            // router_006:src_valid -> rsp_demux_002:sink_valid
	wire  [143:0] router_006_src_data;                                             // router_006:src_data -> rsp_demux_002:sink_data
	wire          router_006_src_ready;                                            // rsp_demux_002:sink_ready -> router_006:src_ready
	wire    [4:0] router_006_src_channel;                                          // router_006:src_channel -> rsp_demux_002:sink_channel
	wire          router_006_src_startofpacket;                                    // router_006:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_006_src_endofpacket;                                      // router_006:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          ram_s1_agent_rp_valid;                                           // ram_s1_agent:rp_valid -> router_007:sink_valid
	wire  [143:0] ram_s1_agent_rp_data;                                            // ram_s1_agent:rp_data -> router_007:sink_data
	wire          ram_s1_agent_rp_ready;                                           // router_007:sink_ready -> ram_s1_agent:rp_ready
	wire          ram_s1_agent_rp_startofpacket;                                   // ram_s1_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          ram_s1_agent_rp_endofpacket;                                     // ram_s1_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                            // router_007:src_valid -> rsp_demux_003:sink_valid
	wire  [143:0] router_007_src_data;                                             // router_007:src_data -> rsp_demux_003:sink_data
	wire          router_007_src_ready;                                            // rsp_demux_003:sink_ready -> router_007:src_ready
	wire    [4:0] router_007_src_channel;                                          // router_007:src_channel -> rsp_demux_003:sink_channel
	wire          router_007_src_startofpacket;                                    // router_007:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_007_src_endofpacket;                                      // router_007:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          cpu_timer_sw_agent_agent_rp_valid;                               // cpu_timer_sw_agent_agent:rp_valid -> router_008:sink_valid
	wire  [143:0] cpu_timer_sw_agent_agent_rp_data;                                // cpu_timer_sw_agent_agent:rp_data -> router_008:sink_data
	wire          cpu_timer_sw_agent_agent_rp_ready;                               // router_008:sink_ready -> cpu_timer_sw_agent_agent:rp_ready
	wire          cpu_timer_sw_agent_agent_rp_startofpacket;                       // cpu_timer_sw_agent_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          cpu_timer_sw_agent_agent_rp_endofpacket;                         // cpu_timer_sw_agent_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                            // router_008:src_valid -> rsp_demux_004:sink_valid
	wire  [143:0] router_008_src_data;                                             // router_008:src_data -> rsp_demux_004:sink_data
	wire          router_008_src_ready;                                            // rsp_demux_004:sink_ready -> router_008:src_ready
	wire    [4:0] router_008_src_channel;                                          // router_008:src_channel -> rsp_demux_004:sink_channel
	wire          router_008_src_startofpacket;                                    // router_008:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_008_src_endofpacket;                                      // router_008:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          router_002_src_valid;                                            // router_002:src_valid -> cpu_instruction_manager_wr_limiter:cmd_sink_valid
	wire  [143:0] router_002_src_data;                                             // router_002:src_data -> cpu_instruction_manager_wr_limiter:cmd_sink_data
	wire          router_002_src_ready;                                            // cpu_instruction_manager_wr_limiter:cmd_sink_ready -> router_002:src_ready
	wire    [4:0] router_002_src_channel;                                          // router_002:src_channel -> cpu_instruction_manager_wr_limiter:cmd_sink_channel
	wire          router_002_src_startofpacket;                                    // router_002:src_startofpacket -> cpu_instruction_manager_wr_limiter:cmd_sink_startofpacket
	wire          router_002_src_endofpacket;                                      // router_002:src_endofpacket -> cpu_instruction_manager_wr_limiter:cmd_sink_endofpacket
	wire  [143:0] cpu_instruction_manager_wr_limiter_cmd_src_data;                 // cpu_instruction_manager_wr_limiter:cmd_src_data -> cmd_demux_002:sink_data
	wire          cpu_instruction_manager_wr_limiter_cmd_src_ready;                // cmd_demux_002:sink_ready -> cpu_instruction_manager_wr_limiter:cmd_src_ready
	wire    [4:0] cpu_instruction_manager_wr_limiter_cmd_src_channel;              // cpu_instruction_manager_wr_limiter:cmd_src_channel -> cmd_demux_002:sink_channel
	wire          cpu_instruction_manager_wr_limiter_cmd_src_startofpacket;        // cpu_instruction_manager_wr_limiter:cmd_src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          cpu_instruction_manager_wr_limiter_cmd_src_endofpacket;          // cpu_instruction_manager_wr_limiter:cmd_src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          rsp_mux_002_src_valid;                                           // rsp_mux_002:src_valid -> cpu_instruction_manager_wr_limiter:rsp_sink_valid
	wire  [143:0] rsp_mux_002_src_data;                                            // rsp_mux_002:src_data -> cpu_instruction_manager_wr_limiter:rsp_sink_data
	wire          rsp_mux_002_src_ready;                                           // cpu_instruction_manager_wr_limiter:rsp_sink_ready -> rsp_mux_002:src_ready
	wire    [4:0] rsp_mux_002_src_channel;                                         // rsp_mux_002:src_channel -> cpu_instruction_manager_wr_limiter:rsp_sink_channel
	wire          rsp_mux_002_src_startofpacket;                                   // rsp_mux_002:src_startofpacket -> cpu_instruction_manager_wr_limiter:rsp_sink_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                     // rsp_mux_002:src_endofpacket -> cpu_instruction_manager_wr_limiter:rsp_sink_endofpacket
	wire          cpu_instruction_manager_wr_limiter_rsp_src_valid;                // cpu_instruction_manager_wr_limiter:rsp_src_valid -> cpu_instruction_manager_agent:write_rp_valid
	wire  [143:0] cpu_instruction_manager_wr_limiter_rsp_src_data;                 // cpu_instruction_manager_wr_limiter:rsp_src_data -> cpu_instruction_manager_agent:write_rp_data
	wire          cpu_instruction_manager_wr_limiter_rsp_src_ready;                // cpu_instruction_manager_agent:write_rp_ready -> cpu_instruction_manager_wr_limiter:rsp_src_ready
	wire    [4:0] cpu_instruction_manager_wr_limiter_rsp_src_channel;              // cpu_instruction_manager_wr_limiter:rsp_src_channel -> cpu_instruction_manager_agent:write_rp_channel
	wire          cpu_instruction_manager_wr_limiter_rsp_src_startofpacket;        // cpu_instruction_manager_wr_limiter:rsp_src_startofpacket -> cpu_instruction_manager_agent:write_rp_startofpacket
	wire          cpu_instruction_manager_wr_limiter_rsp_src_endofpacket;          // cpu_instruction_manager_wr_limiter:rsp_src_endofpacket -> cpu_instruction_manager_agent:write_rp_endofpacket
	wire          router_003_src_valid;                                            // router_003:src_valid -> cpu_instruction_manager_rd_limiter:cmd_sink_valid
	wire  [143:0] router_003_src_data;                                             // router_003:src_data -> cpu_instruction_manager_rd_limiter:cmd_sink_data
	wire          router_003_src_ready;                                            // cpu_instruction_manager_rd_limiter:cmd_sink_ready -> router_003:src_ready
	wire    [4:0] router_003_src_channel;                                          // router_003:src_channel -> cpu_instruction_manager_rd_limiter:cmd_sink_channel
	wire          router_003_src_startofpacket;                                    // router_003:src_startofpacket -> cpu_instruction_manager_rd_limiter:cmd_sink_startofpacket
	wire          router_003_src_endofpacket;                                      // router_003:src_endofpacket -> cpu_instruction_manager_rd_limiter:cmd_sink_endofpacket
	wire  [143:0] cpu_instruction_manager_rd_limiter_cmd_src_data;                 // cpu_instruction_manager_rd_limiter:cmd_src_data -> cmd_demux_003:sink_data
	wire          cpu_instruction_manager_rd_limiter_cmd_src_ready;                // cmd_demux_003:sink_ready -> cpu_instruction_manager_rd_limiter:cmd_src_ready
	wire    [4:0] cpu_instruction_manager_rd_limiter_cmd_src_channel;              // cpu_instruction_manager_rd_limiter:cmd_src_channel -> cmd_demux_003:sink_channel
	wire          cpu_instruction_manager_rd_limiter_cmd_src_startofpacket;        // cpu_instruction_manager_rd_limiter:cmd_src_startofpacket -> cmd_demux_003:sink_startofpacket
	wire          cpu_instruction_manager_rd_limiter_cmd_src_endofpacket;          // cpu_instruction_manager_rd_limiter:cmd_src_endofpacket -> cmd_demux_003:sink_endofpacket
	wire          rsp_mux_003_src_valid;                                           // rsp_mux_003:src_valid -> cpu_instruction_manager_rd_limiter:rsp_sink_valid
	wire  [143:0] rsp_mux_003_src_data;                                            // rsp_mux_003:src_data -> cpu_instruction_manager_rd_limiter:rsp_sink_data
	wire          rsp_mux_003_src_ready;                                           // cpu_instruction_manager_rd_limiter:rsp_sink_ready -> rsp_mux_003:src_ready
	wire    [4:0] rsp_mux_003_src_channel;                                         // rsp_mux_003:src_channel -> cpu_instruction_manager_rd_limiter:rsp_sink_channel
	wire          rsp_mux_003_src_startofpacket;                                   // rsp_mux_003:src_startofpacket -> cpu_instruction_manager_rd_limiter:rsp_sink_startofpacket
	wire          rsp_mux_003_src_endofpacket;                                     // rsp_mux_003:src_endofpacket -> cpu_instruction_manager_rd_limiter:rsp_sink_endofpacket
	wire          cpu_instruction_manager_rd_limiter_rsp_src_valid;                // cpu_instruction_manager_rd_limiter:rsp_src_valid -> cpu_instruction_manager_agent:read_rp_valid
	wire  [143:0] cpu_instruction_manager_rd_limiter_rsp_src_data;                 // cpu_instruction_manager_rd_limiter:rsp_src_data -> cpu_instruction_manager_agent:read_rp_data
	wire          cpu_instruction_manager_rd_limiter_rsp_src_ready;                // cpu_instruction_manager_agent:read_rp_ready -> cpu_instruction_manager_rd_limiter:rsp_src_ready
	wire    [4:0] cpu_instruction_manager_rd_limiter_rsp_src_channel;              // cpu_instruction_manager_rd_limiter:rsp_src_channel -> cpu_instruction_manager_agent:read_rp_channel
	wire          cpu_instruction_manager_rd_limiter_rsp_src_startofpacket;        // cpu_instruction_manager_rd_limiter:rsp_src_startofpacket -> cpu_instruction_manager_agent:read_rp_startofpacket
	wire          cpu_instruction_manager_rd_limiter_rsp_src_endofpacket;          // cpu_instruction_manager_rd_limiter:rsp_src_endofpacket -> cpu_instruction_manager_agent:read_rp_endofpacket
	wire          cmd_mux_src_valid;                                               // cmd_mux:src_valid -> jtag_uart_avalon_jtag_slave_burst_adapter:sink0_valid
	wire  [143:0] cmd_mux_src_data;                                                // cmd_mux:src_data -> jtag_uart_avalon_jtag_slave_burst_adapter:sink0_data
	wire          cmd_mux_src_ready;                                               // jtag_uart_avalon_jtag_slave_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire    [4:0] cmd_mux_src_channel;                                             // cmd_mux:src_channel -> jtag_uart_avalon_jtag_slave_burst_adapter:sink0_channel
	wire          cmd_mux_src_startofpacket;                                       // cmd_mux:src_startofpacket -> jtag_uart_avalon_jtag_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_src_endofpacket;                                         // cmd_mux:src_endofpacket -> jtag_uart_avalon_jtag_slave_burst_adapter:sink0_endofpacket
	wire          jtag_uart_avalon_jtag_slave_burst_adapter_source0_valid;         // jtag_uart_avalon_jtag_slave_burst_adapter:source0_valid -> jtag_uart_avalon_jtag_slave_agent:cp_valid
	wire  [143:0] jtag_uart_avalon_jtag_slave_burst_adapter_source0_data;          // jtag_uart_avalon_jtag_slave_burst_adapter:source0_data -> jtag_uart_avalon_jtag_slave_agent:cp_data
	wire          jtag_uart_avalon_jtag_slave_burst_adapter_source0_ready;         // jtag_uart_avalon_jtag_slave_agent:cp_ready -> jtag_uart_avalon_jtag_slave_burst_adapter:source0_ready
	wire    [4:0] jtag_uart_avalon_jtag_slave_burst_adapter_source0_channel;       // jtag_uart_avalon_jtag_slave_burst_adapter:source0_channel -> jtag_uart_avalon_jtag_slave_agent:cp_channel
	wire          jtag_uart_avalon_jtag_slave_burst_adapter_source0_startofpacket; // jtag_uart_avalon_jtag_slave_burst_adapter:source0_startofpacket -> jtag_uart_avalon_jtag_slave_agent:cp_startofpacket
	wire          jtag_uart_avalon_jtag_slave_burst_adapter_source0_endofpacket;   // jtag_uart_avalon_jtag_slave_burst_adapter:source0_endofpacket -> jtag_uart_avalon_jtag_slave_agent:cp_endofpacket
	wire          cmd_mux_001_src_valid;                                           // cmd_mux_001:src_valid -> sysid_qsys_0_control_slave_burst_adapter:sink0_valid
	wire  [143:0] cmd_mux_001_src_data;                                            // cmd_mux_001:src_data -> sysid_qsys_0_control_slave_burst_adapter:sink0_data
	wire          cmd_mux_001_src_ready;                                           // sysid_qsys_0_control_slave_burst_adapter:sink0_ready -> cmd_mux_001:src_ready
	wire    [4:0] cmd_mux_001_src_channel;                                         // cmd_mux_001:src_channel -> sysid_qsys_0_control_slave_burst_adapter:sink0_channel
	wire          cmd_mux_001_src_startofpacket;                                   // cmd_mux_001:src_startofpacket -> sysid_qsys_0_control_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                     // cmd_mux_001:src_endofpacket -> sysid_qsys_0_control_slave_burst_adapter:sink0_endofpacket
	wire          sysid_qsys_0_control_slave_burst_adapter_source0_valid;          // sysid_qsys_0_control_slave_burst_adapter:source0_valid -> sysid_qsys_0_control_slave_agent:cp_valid
	wire  [143:0] sysid_qsys_0_control_slave_burst_adapter_source0_data;           // sysid_qsys_0_control_slave_burst_adapter:source0_data -> sysid_qsys_0_control_slave_agent:cp_data
	wire          sysid_qsys_0_control_slave_burst_adapter_source0_ready;          // sysid_qsys_0_control_slave_agent:cp_ready -> sysid_qsys_0_control_slave_burst_adapter:source0_ready
	wire    [4:0] sysid_qsys_0_control_slave_burst_adapter_source0_channel;        // sysid_qsys_0_control_slave_burst_adapter:source0_channel -> sysid_qsys_0_control_slave_agent:cp_channel
	wire          sysid_qsys_0_control_slave_burst_adapter_source0_startofpacket;  // sysid_qsys_0_control_slave_burst_adapter:source0_startofpacket -> sysid_qsys_0_control_slave_agent:cp_startofpacket
	wire          sysid_qsys_0_control_slave_burst_adapter_source0_endofpacket;    // sysid_qsys_0_control_slave_burst_adapter:source0_endofpacket -> sysid_qsys_0_control_slave_agent:cp_endofpacket
	wire          cmd_mux_002_src_valid;                                           // cmd_mux_002:src_valid -> cpu_dm_agent_burst_adapter:sink0_valid
	wire  [143:0] cmd_mux_002_src_data;                                            // cmd_mux_002:src_data -> cpu_dm_agent_burst_adapter:sink0_data
	wire          cmd_mux_002_src_ready;                                           // cpu_dm_agent_burst_adapter:sink0_ready -> cmd_mux_002:src_ready
	wire    [4:0] cmd_mux_002_src_channel;                                         // cmd_mux_002:src_channel -> cpu_dm_agent_burst_adapter:sink0_channel
	wire          cmd_mux_002_src_startofpacket;                                   // cmd_mux_002:src_startofpacket -> cpu_dm_agent_burst_adapter:sink0_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                     // cmd_mux_002:src_endofpacket -> cpu_dm_agent_burst_adapter:sink0_endofpacket
	wire          cpu_dm_agent_burst_adapter_source0_valid;                        // cpu_dm_agent_burst_adapter:source0_valid -> cpu_dm_agent_agent:cp_valid
	wire  [143:0] cpu_dm_agent_burst_adapter_source0_data;                         // cpu_dm_agent_burst_adapter:source0_data -> cpu_dm_agent_agent:cp_data
	wire          cpu_dm_agent_burst_adapter_source0_ready;                        // cpu_dm_agent_agent:cp_ready -> cpu_dm_agent_burst_adapter:source0_ready
	wire    [4:0] cpu_dm_agent_burst_adapter_source0_channel;                      // cpu_dm_agent_burst_adapter:source0_channel -> cpu_dm_agent_agent:cp_channel
	wire          cpu_dm_agent_burst_adapter_source0_startofpacket;                // cpu_dm_agent_burst_adapter:source0_startofpacket -> cpu_dm_agent_agent:cp_startofpacket
	wire          cpu_dm_agent_burst_adapter_source0_endofpacket;                  // cpu_dm_agent_burst_adapter:source0_endofpacket -> cpu_dm_agent_agent:cp_endofpacket
	wire          cmd_mux_003_src_valid;                                           // cmd_mux_003:src_valid -> ram_s1_burst_adapter:sink0_valid
	wire  [143:0] cmd_mux_003_src_data;                                            // cmd_mux_003:src_data -> ram_s1_burst_adapter:sink0_data
	wire          cmd_mux_003_src_ready;                                           // ram_s1_burst_adapter:sink0_ready -> cmd_mux_003:src_ready
	wire    [4:0] cmd_mux_003_src_channel;                                         // cmd_mux_003:src_channel -> ram_s1_burst_adapter:sink0_channel
	wire          cmd_mux_003_src_startofpacket;                                   // cmd_mux_003:src_startofpacket -> ram_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                     // cmd_mux_003:src_endofpacket -> ram_s1_burst_adapter:sink0_endofpacket
	wire          ram_s1_burst_adapter_source0_valid;                              // ram_s1_burst_adapter:source0_valid -> ram_s1_agent:cp_valid
	wire  [143:0] ram_s1_burst_adapter_source0_data;                               // ram_s1_burst_adapter:source0_data -> ram_s1_agent:cp_data
	wire          ram_s1_burst_adapter_source0_ready;                              // ram_s1_agent:cp_ready -> ram_s1_burst_adapter:source0_ready
	wire    [4:0] ram_s1_burst_adapter_source0_channel;                            // ram_s1_burst_adapter:source0_channel -> ram_s1_agent:cp_channel
	wire          ram_s1_burst_adapter_source0_startofpacket;                      // ram_s1_burst_adapter:source0_startofpacket -> ram_s1_agent:cp_startofpacket
	wire          ram_s1_burst_adapter_source0_endofpacket;                        // ram_s1_burst_adapter:source0_endofpacket -> ram_s1_agent:cp_endofpacket
	wire          cmd_mux_004_src_valid;                                           // cmd_mux_004:src_valid -> cpu_timer_sw_agent_burst_adapter:sink0_valid
	wire  [143:0] cmd_mux_004_src_data;                                            // cmd_mux_004:src_data -> cpu_timer_sw_agent_burst_adapter:sink0_data
	wire          cmd_mux_004_src_ready;                                           // cpu_timer_sw_agent_burst_adapter:sink0_ready -> cmd_mux_004:src_ready
	wire    [4:0] cmd_mux_004_src_channel;                                         // cmd_mux_004:src_channel -> cpu_timer_sw_agent_burst_adapter:sink0_channel
	wire          cmd_mux_004_src_startofpacket;                                   // cmd_mux_004:src_startofpacket -> cpu_timer_sw_agent_burst_adapter:sink0_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                     // cmd_mux_004:src_endofpacket -> cpu_timer_sw_agent_burst_adapter:sink0_endofpacket
	wire          cpu_timer_sw_agent_burst_adapter_source0_valid;                  // cpu_timer_sw_agent_burst_adapter:source0_valid -> cpu_timer_sw_agent_agent:cp_valid
	wire  [143:0] cpu_timer_sw_agent_burst_adapter_source0_data;                   // cpu_timer_sw_agent_burst_adapter:source0_data -> cpu_timer_sw_agent_agent:cp_data
	wire          cpu_timer_sw_agent_burst_adapter_source0_ready;                  // cpu_timer_sw_agent_agent:cp_ready -> cpu_timer_sw_agent_burst_adapter:source0_ready
	wire    [4:0] cpu_timer_sw_agent_burst_adapter_source0_channel;                // cpu_timer_sw_agent_burst_adapter:source0_channel -> cpu_timer_sw_agent_agent:cp_channel
	wire          cpu_timer_sw_agent_burst_adapter_source0_startofpacket;          // cpu_timer_sw_agent_burst_adapter:source0_startofpacket -> cpu_timer_sw_agent_agent:cp_startofpacket
	wire          cpu_timer_sw_agent_burst_adapter_source0_endofpacket;            // cpu_timer_sw_agent_burst_adapter:source0_endofpacket -> cpu_timer_sw_agent_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                            // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [143:0] cmd_demux_src0_data;                                             // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                            // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [4:0] cmd_demux_src0_channel;                                          // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                    // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                      // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                            // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [143:0] cmd_demux_src1_data;                                             // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                            // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire    [4:0] cmd_demux_src1_channel;                                          // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                    // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                      // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                            // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [143:0] cmd_demux_src2_data;                                             // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                            // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire    [4:0] cmd_demux_src2_channel;                                          // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                    // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                      // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                            // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [143:0] cmd_demux_src3_data;                                             // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_src3_ready;                                            // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire    [4:0] cmd_demux_src3_channel;                                          // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_startofpacket;                                    // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_src3_endofpacket;                                      // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                            // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [143:0] cmd_demux_src4_data;                                             // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_src4_ready;                                            // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire    [4:0] cmd_demux_src4_channel;                                          // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_src4_startofpacket;                                    // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_src4_endofpacket;                                      // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                        // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire  [143:0] cmd_demux_001_src0_data;                                         // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire          cmd_demux_001_src0_ready;                                        // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire    [4:0] cmd_demux_001_src0_channel;                                      // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                  // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                        // cmd_demux_001:src1_valid -> cmd_mux_001:sink1_valid
	wire  [143:0] cmd_demux_001_src1_data;                                         // cmd_demux_001:src1_data -> cmd_mux_001:sink1_data
	wire          cmd_demux_001_src1_ready;                                        // cmd_mux_001:sink1_ready -> cmd_demux_001:src1_ready
	wire    [4:0] cmd_demux_001_src1_channel;                                      // cmd_demux_001:src1_channel -> cmd_mux_001:sink1_channel
	wire          cmd_demux_001_src1_startofpacket;                                // cmd_demux_001:src1_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                  // cmd_demux_001:src1_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          cmd_demux_001_src2_valid;                                        // cmd_demux_001:src2_valid -> cmd_mux_002:sink1_valid
	wire  [143:0] cmd_demux_001_src2_data;                                         // cmd_demux_001:src2_data -> cmd_mux_002:sink1_data
	wire          cmd_demux_001_src2_ready;                                        // cmd_mux_002:sink1_ready -> cmd_demux_001:src2_ready
	wire    [4:0] cmd_demux_001_src2_channel;                                      // cmd_demux_001:src2_channel -> cmd_mux_002:sink1_channel
	wire          cmd_demux_001_src2_startofpacket;                                // cmd_demux_001:src2_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                  // cmd_demux_001:src2_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          cmd_demux_001_src3_valid;                                        // cmd_demux_001:src3_valid -> cmd_mux_003:sink1_valid
	wire  [143:0] cmd_demux_001_src3_data;                                         // cmd_demux_001:src3_data -> cmd_mux_003:sink1_data
	wire          cmd_demux_001_src3_ready;                                        // cmd_mux_003:sink1_ready -> cmd_demux_001:src3_ready
	wire    [4:0] cmd_demux_001_src3_channel;                                      // cmd_demux_001:src3_channel -> cmd_mux_003:sink1_channel
	wire          cmd_demux_001_src3_startofpacket;                                // cmd_demux_001:src3_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire          cmd_demux_001_src3_endofpacket;                                  // cmd_demux_001:src3_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire          cmd_demux_001_src4_valid;                                        // cmd_demux_001:src4_valid -> cmd_mux_004:sink1_valid
	wire  [143:0] cmd_demux_001_src4_data;                                         // cmd_demux_001:src4_data -> cmd_mux_004:sink1_data
	wire          cmd_demux_001_src4_ready;                                        // cmd_mux_004:sink1_ready -> cmd_demux_001:src4_ready
	wire    [4:0] cmd_demux_001_src4_channel;                                      // cmd_demux_001:src4_channel -> cmd_mux_004:sink1_channel
	wire          cmd_demux_001_src4_startofpacket;                                // cmd_demux_001:src4_startofpacket -> cmd_mux_004:sink1_startofpacket
	wire          cmd_demux_001_src4_endofpacket;                                  // cmd_demux_001:src4_endofpacket -> cmd_mux_004:sink1_endofpacket
	wire          cmd_demux_002_src0_valid;                                        // cmd_demux_002:src0_valid -> cmd_mux_002:sink2_valid
	wire  [143:0] cmd_demux_002_src0_data;                                         // cmd_demux_002:src0_data -> cmd_mux_002:sink2_data
	wire          cmd_demux_002_src0_ready;                                        // cmd_mux_002:sink2_ready -> cmd_demux_002:src0_ready
	wire    [4:0] cmd_demux_002_src0_channel;                                      // cmd_demux_002:src0_channel -> cmd_mux_002:sink2_channel
	wire          cmd_demux_002_src0_startofpacket;                                // cmd_demux_002:src0_startofpacket -> cmd_mux_002:sink2_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                  // cmd_demux_002:src0_endofpacket -> cmd_mux_002:sink2_endofpacket
	wire          cmd_demux_002_src1_valid;                                        // cmd_demux_002:src1_valid -> cmd_mux_003:sink2_valid
	wire  [143:0] cmd_demux_002_src1_data;                                         // cmd_demux_002:src1_data -> cmd_mux_003:sink2_data
	wire          cmd_demux_002_src1_ready;                                        // cmd_mux_003:sink2_ready -> cmd_demux_002:src1_ready
	wire    [4:0] cmd_demux_002_src1_channel;                                      // cmd_demux_002:src1_channel -> cmd_mux_003:sink2_channel
	wire          cmd_demux_002_src1_startofpacket;                                // cmd_demux_002:src1_startofpacket -> cmd_mux_003:sink2_startofpacket
	wire          cmd_demux_002_src1_endofpacket;                                  // cmd_demux_002:src1_endofpacket -> cmd_mux_003:sink2_endofpacket
	wire          cmd_demux_003_src0_valid;                                        // cmd_demux_003:src0_valid -> cmd_mux_002:sink3_valid
	wire  [143:0] cmd_demux_003_src0_data;                                         // cmd_demux_003:src0_data -> cmd_mux_002:sink3_data
	wire          cmd_demux_003_src0_ready;                                        // cmd_mux_002:sink3_ready -> cmd_demux_003:src0_ready
	wire    [4:0] cmd_demux_003_src0_channel;                                      // cmd_demux_003:src0_channel -> cmd_mux_002:sink3_channel
	wire          cmd_demux_003_src0_startofpacket;                                // cmd_demux_003:src0_startofpacket -> cmd_mux_002:sink3_startofpacket
	wire          cmd_demux_003_src0_endofpacket;                                  // cmd_demux_003:src0_endofpacket -> cmd_mux_002:sink3_endofpacket
	wire          cmd_demux_003_src1_valid;                                        // cmd_demux_003:src1_valid -> cmd_mux_003:sink3_valid
	wire  [143:0] cmd_demux_003_src1_data;                                         // cmd_demux_003:src1_data -> cmd_mux_003:sink3_data
	wire          cmd_demux_003_src1_ready;                                        // cmd_mux_003:sink3_ready -> cmd_demux_003:src1_ready
	wire    [4:0] cmd_demux_003_src1_channel;                                      // cmd_demux_003:src1_channel -> cmd_mux_003:sink3_channel
	wire          cmd_demux_003_src1_startofpacket;                                // cmd_demux_003:src1_startofpacket -> cmd_mux_003:sink3_startofpacket
	wire          cmd_demux_003_src1_endofpacket;                                  // cmd_demux_003:src1_endofpacket -> cmd_mux_003:sink3_endofpacket
	wire          rsp_demux_src0_valid;                                            // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [143:0] rsp_demux_src0_data;                                             // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                            // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [4:0] rsp_demux_src0_channel;                                          // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                    // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                      // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                            // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire  [143:0] rsp_demux_src1_data;                                             // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_src1_ready;                                            // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire    [4:0] rsp_demux_src1_channel;                                          // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_src1_startofpacket;                                    // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_src1_endofpacket;                                      // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                        // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [143:0] rsp_demux_001_src0_data;                                         // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                        // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire    [4:0] rsp_demux_001_src0_channel;                                      // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                  // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_001_src1_valid;                                        // rsp_demux_001:src1_valid -> rsp_mux_001:sink1_valid
	wire  [143:0] rsp_demux_001_src1_data;                                         // rsp_demux_001:src1_data -> rsp_mux_001:sink1_data
	wire          rsp_demux_001_src1_ready;                                        // rsp_mux_001:sink1_ready -> rsp_demux_001:src1_ready
	wire    [4:0] rsp_demux_001_src1_channel;                                      // rsp_demux_001:src1_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_001_src1_startofpacket;                                // rsp_demux_001:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                                  // rsp_demux_001:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                        // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [143:0] rsp_demux_002_src0_data;                                         // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                        // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire    [4:0] rsp_demux_002_src0_channel;                                      // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                  // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_002_src1_valid;                                        // rsp_demux_002:src1_valid -> rsp_mux_001:sink2_valid
	wire  [143:0] rsp_demux_002_src1_data;                                         // rsp_demux_002:src1_data -> rsp_mux_001:sink2_data
	wire          rsp_demux_002_src1_ready;                                        // rsp_mux_001:sink2_ready -> rsp_demux_002:src1_ready
	wire    [4:0] rsp_demux_002_src1_channel;                                      // rsp_demux_002:src1_channel -> rsp_mux_001:sink2_channel
	wire          rsp_demux_002_src1_startofpacket;                                // rsp_demux_002:src1_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          rsp_demux_002_src1_endofpacket;                                  // rsp_demux_002:src1_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_002_src2_valid;                                        // rsp_demux_002:src2_valid -> rsp_mux_002:sink0_valid
	wire  [143:0] rsp_demux_002_src2_data;                                         // rsp_demux_002:src2_data -> rsp_mux_002:sink0_data
	wire          rsp_demux_002_src2_ready;                                        // rsp_mux_002:sink0_ready -> rsp_demux_002:src2_ready
	wire    [4:0] rsp_demux_002_src2_channel;                                      // rsp_demux_002:src2_channel -> rsp_mux_002:sink0_channel
	wire          rsp_demux_002_src2_startofpacket;                                // rsp_demux_002:src2_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          rsp_demux_002_src2_endofpacket;                                  // rsp_demux_002:src2_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          rsp_demux_002_src3_valid;                                        // rsp_demux_002:src3_valid -> rsp_mux_003:sink0_valid
	wire  [143:0] rsp_demux_002_src3_data;                                         // rsp_demux_002:src3_data -> rsp_mux_003:sink0_data
	wire          rsp_demux_002_src3_ready;                                        // rsp_mux_003:sink0_ready -> rsp_demux_002:src3_ready
	wire    [4:0] rsp_demux_002_src3_channel;                                      // rsp_demux_002:src3_channel -> rsp_mux_003:sink0_channel
	wire          rsp_demux_002_src3_startofpacket;                                // rsp_demux_002:src3_startofpacket -> rsp_mux_003:sink0_startofpacket
	wire          rsp_demux_002_src3_endofpacket;                                  // rsp_demux_002:src3_endofpacket -> rsp_mux_003:sink0_endofpacket
	wire          rsp_demux_003_src0_valid;                                        // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [143:0] rsp_demux_003_src0_data;                                         // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire          rsp_demux_003_src0_ready;                                        // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire    [4:0] rsp_demux_003_src0_channel;                                      // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                  // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_003_src1_valid;                                        // rsp_demux_003:src1_valid -> rsp_mux_001:sink3_valid
	wire  [143:0] rsp_demux_003_src1_data;                                         // rsp_demux_003:src1_data -> rsp_mux_001:sink3_data
	wire          rsp_demux_003_src1_ready;                                        // rsp_mux_001:sink3_ready -> rsp_demux_003:src1_ready
	wire    [4:0] rsp_demux_003_src1_channel;                                      // rsp_demux_003:src1_channel -> rsp_mux_001:sink3_channel
	wire          rsp_demux_003_src1_startofpacket;                                // rsp_demux_003:src1_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire          rsp_demux_003_src1_endofpacket;                                  // rsp_demux_003:src1_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          rsp_demux_003_src2_valid;                                        // rsp_demux_003:src2_valid -> rsp_mux_002:sink1_valid
	wire  [143:0] rsp_demux_003_src2_data;                                         // rsp_demux_003:src2_data -> rsp_mux_002:sink1_data
	wire          rsp_demux_003_src2_ready;                                        // rsp_mux_002:sink1_ready -> rsp_demux_003:src2_ready
	wire    [4:0] rsp_demux_003_src2_channel;                                      // rsp_demux_003:src2_channel -> rsp_mux_002:sink1_channel
	wire          rsp_demux_003_src2_startofpacket;                                // rsp_demux_003:src2_startofpacket -> rsp_mux_002:sink1_startofpacket
	wire          rsp_demux_003_src2_endofpacket;                                  // rsp_demux_003:src2_endofpacket -> rsp_mux_002:sink1_endofpacket
	wire          rsp_demux_003_src3_valid;                                        // rsp_demux_003:src3_valid -> rsp_mux_003:sink1_valid
	wire  [143:0] rsp_demux_003_src3_data;                                         // rsp_demux_003:src3_data -> rsp_mux_003:sink1_data
	wire          rsp_demux_003_src3_ready;                                        // rsp_mux_003:sink1_ready -> rsp_demux_003:src3_ready
	wire    [4:0] rsp_demux_003_src3_channel;                                      // rsp_demux_003:src3_channel -> rsp_mux_003:sink1_channel
	wire          rsp_demux_003_src3_startofpacket;                                // rsp_demux_003:src3_startofpacket -> rsp_mux_003:sink1_startofpacket
	wire          rsp_demux_003_src3_endofpacket;                                  // rsp_demux_003:src3_endofpacket -> rsp_mux_003:sink1_endofpacket
	wire          rsp_demux_004_src0_valid;                                        // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [143:0] rsp_demux_004_src0_data;                                         // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire          rsp_demux_004_src0_ready;                                        // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire    [4:0] rsp_demux_004_src0_channel;                                      // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                                // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                  // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_004_src1_valid;                                        // rsp_demux_004:src1_valid -> rsp_mux_001:sink4_valid
	wire  [143:0] rsp_demux_004_src1_data;                                         // rsp_demux_004:src1_data -> rsp_mux_001:sink4_data
	wire          rsp_demux_004_src1_ready;                                        // rsp_mux_001:sink4_ready -> rsp_demux_004:src1_ready
	wire    [4:0] rsp_demux_004_src1_channel;                                      // rsp_demux_004:src1_channel -> rsp_mux_001:sink4_channel
	wire          rsp_demux_004_src1_startofpacket;                                // rsp_demux_004:src1_startofpacket -> rsp_mux_001:sink4_startofpacket
	wire          rsp_demux_004_src1_endofpacket;                                  // rsp_demux_004:src1_endofpacket -> rsp_mux_001:sink4_endofpacket
	wire    [4:0] cpu_instruction_manager_wr_limiter_cmd_valid_data;               // cpu_instruction_manager_wr_limiter:cmd_src_valid -> cmd_demux_002:sink_valid
	wire    [4:0] cpu_instruction_manager_rd_limiter_cmd_valid_data;               // cpu_instruction_manager_rd_limiter:cmd_src_valid -> cmd_demux_003:sink_valid

	sys_altera_merlin_axi_translator_1950_sjnedva #(
		.USE_S0_AWID                       (0),
		.USE_S0_AWREGION                   (0),
		.USE_M0_AWREGION                   (1),
		.USE_S0_AWLEN                      (1),
		.USE_S0_AWSIZE                     (1),
		.USE_S0_AWBURST                    (0),
		.USE_S0_AWLOCK                     (0),
		.USE_M0_AWLOCK                     (1),
		.USE_S0_AWCACHE                    (0),
		.USE_M0_AWCACHE                    (1),
		.USE_M0_AWPROT                     (1),
		.USE_S0_AWQOS                      (0),
		.USE_M0_AWQOS                      (1),
		.USE_S0_WSTRB                      (1),
		.USE_M0_WLAST                      (1),
		.USE_S0_BID                        (0),
		.USE_S0_BRESP                      (1),
		.USE_M0_BRESP                      (1),
		.USE_S0_ARID                       (0),
		.USE_S0_ARREGION                   (0),
		.USE_M0_ARREGION                   (1),
		.USE_S0_ARLEN                      (1),
		.USE_S0_ARSIZE                     (1),
		.USE_S0_ARBURST                    (0),
		.USE_S0_ARLOCK                     (0),
		.USE_M0_ARLOCK                     (1),
		.USE_M0_ARCACHE                    (1),
		.USE_M0_ARQOS                      (1),
		.USE_M0_ARPROT                     (1),
		.USE_S0_ARCACHE                    (0),
		.USE_S0_ARQOS                      (0),
		.USE_S0_RID                        (0),
		.USE_S0_RRESP                      (1),
		.USE_M0_RRESP                      (1),
		.USE_S0_RLAST                      (1),
		.M0_ID_WIDTH                       (1),
		.DATA_WIDTH                        (32),
		.M0_SAI_WIDTH                      (4),
		.S0_SAI_WIDTH                      (4),
		.USER_DATA_WIDTH                   (4),
		.M0_USER_ADDRCHK_WIDTH             (4),
		.S0_USER_ADDRCHK_WIDTH             (4),
		.S0_ID_WIDTH                       (1),
		.M0_ADDR_WIDTH                     (32),
		.S0_WRITE_ADDR_USER_WIDTH          (1),
		.S0_READ_ADDR_USER_WIDTH           (1),
		.M0_WRITE_ADDR_USER_WIDTH          (1),
		.M0_READ_ADDR_USER_WIDTH           (1),
		.S0_WRITE_DATA_USER_WIDTH          (1),
		.S0_WRITE_RESPONSE_DATA_USER_WIDTH (1),
		.S0_READ_DATA_USER_WIDTH           (1),
		.M0_WRITE_DATA_USER_WIDTH          (1),
		.M0_WRITE_RESPONSE_DATA_USER_WIDTH (1),
		.M0_READ_DATA_USER_WIDTH           (1),
		.S0_ADDR_WIDTH                     (32),
		.USE_S0_AWUSER                     (0),
		.USE_S0_ARUSER                     (0),
		.USE_S0_WUSER                      (0),
		.USE_S0_RUSER                      (0),
		.USE_S0_BUSER                      (0),
		.USE_M0_AWUSER                     (1),
		.USE_M0_ARUSER                     (1),
		.USE_M0_WUSER                      (1),
		.USE_M0_RUSER                      (1),
		.USE_M0_BUSER                      (1),
		.M0_AXI_VERSION                    ("AXI4"),
		.M0_BURST_LENGTH_WIDTH             (8),
		.S0_BURST_LENGTH_WIDTH             (8),
		.M0_LOCK_WIDTH                     (1),
		.S0_LOCK_WIDTH                     (1),
		.S0_AXI_VERSION                    ("AXI4"),
		.ACE_LITE_SUPPORT                  (0),
		.USE_M0_AWUSER_ADDRCHK             (0),
		.USE_M0_AWUSER_SAI                 (0),
		.USE_M0_ARUSER_ADDRCHK             (0),
		.USE_M0_ARUSER_SAI                 (0),
		.USE_M0_WUSER_DATACHK              (0),
		.USE_M0_WUSER_POISON               (0),
		.USE_M0_RUSER_DATACHK              (0),
		.USE_M0_RUSER_POISON               (0),
		.USE_M0_WUSER_DATA                 (0),
		.USE_M0_RUSER_DATA                 (0),
		.USE_S0_AWUSER_ADDRCHK             (0),
		.USE_S0_AWUSER_SAI                 (0),
		.USE_S0_ARUSER_ADDRCHK             (0),
		.USE_S0_ARUSER_SAI                 (0),
		.USE_S0_WUSER_DATACHK              (0),
		.USE_S0_WUSER_POISON               (0),
		.USE_S0_RUSER_DATACHK              (0),
		.USE_S0_WUSER_DATA                 (0),
		.USE_S0_RUSER_DATA                 (0),
		.USE_S0_RUSER_POISON               (0),
		.REGENERATE_ADDRCHK                (0),
		.ROLE_BASED_USER                   (0)
	) cpu_data_manager_translator (
		.aclk              (clock_in_out_clk_clk),                    //   input,   width = 1,       clk.clk
		.aresetn           (~cpu_reset_reset_bridge_in_reset_reset),  //   input,   width = 1, clk_reset.reset_n
		.m0_awid           (cpu_data_manager_translator_m0_awid),     //  output,   width = 1,        m0.awid
		.m0_awaddr         (cpu_data_manager_translator_m0_awaddr),   //  output,  width = 32,          .awaddr
		.m0_awlen          (cpu_data_manager_translator_m0_awlen),    //  output,   width = 8,          .awlen
		.m0_awsize         (cpu_data_manager_translator_m0_awsize),   //  output,   width = 3,          .awsize
		.m0_awburst        (cpu_data_manager_translator_m0_awburst),  //  output,   width = 2,          .awburst
		.m0_awlock         (cpu_data_manager_translator_m0_awlock),   //  output,   width = 1,          .awlock
		.m0_awcache        (cpu_data_manager_translator_m0_awcache),  //  output,   width = 4,          .awcache
		.m0_awprot         (cpu_data_manager_translator_m0_awprot),   //  output,   width = 3,          .awprot
		.m0_awuser         (cpu_data_manager_translator_m0_awuser),   //  output,   width = 1,          .awuser
		.m0_awqos          (cpu_data_manager_translator_m0_awqos),    //  output,   width = 4,          .awqos
		.m0_awregion       (cpu_data_manager_translator_m0_awregion), //  output,   width = 4,          .awregion
		.m0_awvalid        (cpu_data_manager_translator_m0_awvalid),  //  output,   width = 1,          .awvalid
		.m0_awready        (cpu_data_manager_translator_m0_awready),  //   input,   width = 1,          .awready
		.m0_wdata          (cpu_data_manager_translator_m0_wdata),    //  output,  width = 32,          .wdata
		.m0_wstrb          (cpu_data_manager_translator_m0_wstrb),    //  output,   width = 4,          .wstrb
		.m0_wlast          (cpu_data_manager_translator_m0_wlast),    //  output,   width = 1,          .wlast
		.m0_wvalid         (cpu_data_manager_translator_m0_wvalid),   //  output,   width = 1,          .wvalid
		.m0_wuser          (cpu_data_manager_translator_m0_wuser),    //  output,   width = 1,          .wuser
		.m0_wready         (cpu_data_manager_translator_m0_wready),   //   input,   width = 1,          .wready
		.m0_bid            (cpu_data_manager_translator_m0_bid),      //   input,   width = 1,          .bid
		.m0_bresp          (cpu_data_manager_translator_m0_bresp),    //   input,   width = 2,          .bresp
		.m0_buser          (cpu_data_manager_translator_m0_buser),    //   input,   width = 1,          .buser
		.m0_bvalid         (cpu_data_manager_translator_m0_bvalid),   //   input,   width = 1,          .bvalid
		.m0_bready         (cpu_data_manager_translator_m0_bready),   //  output,   width = 1,          .bready
		.m0_arid           (cpu_data_manager_translator_m0_arid),     //  output,   width = 1,          .arid
		.m0_araddr         (cpu_data_manager_translator_m0_araddr),   //  output,  width = 32,          .araddr
		.m0_arlen          (cpu_data_manager_translator_m0_arlen),    //  output,   width = 8,          .arlen
		.m0_arsize         (cpu_data_manager_translator_m0_arsize),   //  output,   width = 3,          .arsize
		.m0_arburst        (cpu_data_manager_translator_m0_arburst),  //  output,   width = 2,          .arburst
		.m0_arlock         (cpu_data_manager_translator_m0_arlock),   //  output,   width = 1,          .arlock
		.m0_arcache        (cpu_data_manager_translator_m0_arcache),  //  output,   width = 4,          .arcache
		.m0_arprot         (cpu_data_manager_translator_m0_arprot),   //  output,   width = 3,          .arprot
		.m0_aruser         (cpu_data_manager_translator_m0_aruser),   //  output,   width = 1,          .aruser
		.m0_arqos          (cpu_data_manager_translator_m0_arqos),    //  output,   width = 4,          .arqos
		.m0_arregion       (cpu_data_manager_translator_m0_arregion), //  output,   width = 4,          .arregion
		.m0_arvalid        (cpu_data_manager_translator_m0_arvalid),  //  output,   width = 1,          .arvalid
		.m0_arready        (cpu_data_manager_translator_m0_arready),  //   input,   width = 1,          .arready
		.m0_rid            (cpu_data_manager_translator_m0_rid),      //   input,   width = 1,          .rid
		.m0_rdata          (cpu_data_manager_translator_m0_rdata),    //   input,  width = 32,          .rdata
		.m0_rresp          (cpu_data_manager_translator_m0_rresp),    //   input,   width = 2,          .rresp
		.m0_rlast          (cpu_data_manager_translator_m0_rlast),    //   input,   width = 1,          .rlast
		.m0_rvalid         (cpu_data_manager_translator_m0_rvalid),   //   input,   width = 1,          .rvalid
		.m0_rready         (cpu_data_manager_translator_m0_rready),   //  output,   width = 1,          .rready
		.m0_ruser          (cpu_data_manager_translator_m0_ruser),    //   input,   width = 1,          .ruser
		.s0_awaddr         (cpu_data_manager_awaddr),                 //   input,  width = 32,        s0.awaddr
		.s0_awlen          (cpu_data_manager_awlen),                  //   input,   width = 8,          .awlen
		.s0_awsize         (cpu_data_manager_awsize),                 //   input,   width = 3,          .awsize
		.s0_awprot         (cpu_data_manager_awprot),                 //   input,   width = 3,          .awprot
		.s0_awvalid        (cpu_data_manager_awvalid),                //   input,   width = 1,          .awvalid
		.s0_awready        (cpu_data_manager_awready),                //  output,   width = 1,          .awready
		.s0_wdata          (cpu_data_manager_wdata),                  //   input,  width = 32,          .wdata
		.s0_wstrb          (cpu_data_manager_wstrb),                  //   input,   width = 4,          .wstrb
		.s0_wlast          (cpu_data_manager_wlast),                  //   input,   width = 1,          .wlast
		.s0_wvalid         (cpu_data_manager_wvalid),                 //   input,   width = 1,          .wvalid
		.s0_wready         (cpu_data_manager_wready),                 //  output,   width = 1,          .wready
		.s0_bresp          (cpu_data_manager_bresp),                  //  output,   width = 2,          .bresp
		.s0_bvalid         (cpu_data_manager_bvalid),                 //  output,   width = 1,          .bvalid
		.s0_bready         (cpu_data_manager_bready),                 //   input,   width = 1,          .bready
		.s0_araddr         (cpu_data_manager_araddr),                 //   input,  width = 32,          .araddr
		.s0_arlen          (cpu_data_manager_arlen),                  //   input,   width = 8,          .arlen
		.s0_arsize         (cpu_data_manager_arsize),                 //   input,   width = 3,          .arsize
		.s0_arprot         (cpu_data_manager_arprot),                 //   input,   width = 3,          .arprot
		.s0_arvalid        (cpu_data_manager_arvalid),                //   input,   width = 1,          .arvalid
		.s0_arready        (cpu_data_manager_arready),                //  output,   width = 1,          .arready
		.s0_rdata          (cpu_data_manager_rdata),                  //  output,  width = 32,          .rdata
		.s0_rresp          (cpu_data_manager_rresp),                  //  output,   width = 2,          .rresp
		.s0_rlast          (cpu_data_manager_rlast),                  //  output,   width = 1,          .rlast
		.s0_rvalid         (cpu_data_manager_rvalid),                 //  output,   width = 1,          .rvalid
		.s0_rready         (cpu_data_manager_rready),                 //   input,   width = 1,          .rready
		.m0_awuser_addrchk (),                                        // (terminated),                        
		.m0_awuser_sai     (),                                        // (terminated),                        
		.m0_wuser_datachk  (),                                        // (terminated),                        
		.m0_wuser_data     (),                                        // (terminated),                        
		.m0_wuser_poison   (),                                        // (terminated),                        
		.m0_aruser_addrchk (),                                        // (terminated),                        
		.m0_aruser_sai     (),                                        // (terminated),                        
		.m0_ruser_datachk  (4'b0000),                                 // (terminated),                        
		.m0_ruser_data     (4'b0000),                                 // (terminated),                        
		.m0_ruser_poison   (1'b0),                                    // (terminated),                        
		.s0_awid           (1'b0),                                    // (terminated),                        
		.s0_awburst        (2'b00),                                   // (terminated),                        
		.s0_awlock         (1'b0),                                    // (terminated),                        
		.s0_awcache        (4'b0000),                                 // (terminated),                        
		.s0_awuser         (1'b0),                                    // (terminated),                        
		.s0_awuser_addrchk (4'b0000),                                 // (terminated),                        
		.s0_awuser_sai     (4'b0000),                                 // (terminated),                        
		.s0_awqos          (4'b0000),                                 // (terminated),                        
		.s0_awregion       (4'b0000),                                 // (terminated),                        
		.s0_wuser          (1'b0),                                    // (terminated),                        
		.s0_wuser_datachk  (4'b0000),                                 // (terminated),                        
		.s0_wuser_data     (4'b0000),                                 // (terminated),                        
		.s0_wuser_poison   (1'b0),                                    // (terminated),                        
		.s0_bid            (),                                        // (terminated),                        
		.s0_buser          (),                                        // (terminated),                        
		.s0_arid           (1'b0),                                    // (terminated),                        
		.s0_arburst        (2'b00),                                   // (terminated),                        
		.s0_arlock         (1'b0),                                    // (terminated),                        
		.s0_arcache        (4'b0000),                                 // (terminated),                        
		.s0_aruser         (1'b0),                                    // (terminated),                        
		.s0_aruser_addrchk (4'b0000),                                 // (terminated),                        
		.s0_aruser_sai     (4'b0000),                                 // (terminated),                        
		.s0_arqos          (4'b0000),                                 // (terminated),                        
		.s0_arregion       (4'b0000),                                 // (terminated),                        
		.s0_rid            (),                                        // (terminated),                        
		.s0_ruser          (),                                        // (terminated),                        
		.s0_ruser_datachk  (),                                        // (terminated),                        
		.s0_ruser_data     (),                                        // (terminated),                        
		.s0_ruser_poison   (),                                        // (terminated),                        
		.s0_wid            (1'b0),                                    // (terminated),                        
		.s0_ardomain       (2'b00),                                   // (terminated),                        
		.s0_arsnoop        (4'b0000),                                 // (terminated),                        
		.s0_arbar          (2'b00),                                   // (terminated),                        
		.s0_awdomain       (2'b00),                                   // (terminated),                        
		.s0_awsnoop        (3'b000),                                  // (terminated),                        
		.s0_awbar          (2'b00),                                   // (terminated),                        
		.s0_awunique       (1'b0),                                    // (terminated),                        
		.m0_wid            (),                                        // (terminated),                        
		.m0_ardomain       (),                                        // (terminated),                        
		.m0_arsnoop        (),                                        // (terminated),                        
		.m0_arbar          (),                                        // (terminated),                        
		.m0_awdomain       (),                                        // (terminated),                        
		.m0_awsnoop        (),                                        // (terminated),                        
		.m0_awbar          (),                                        // (terminated),                        
		.m0_awunique       ()                                         // (terminated),                        
	);

	sys_altera_merlin_axi_translator_1950_sjnedva #(
		.USE_S0_AWID                       (0),
		.USE_S0_AWREGION                   (0),
		.USE_M0_AWREGION                   (1),
		.USE_S0_AWLEN                      (1),
		.USE_S0_AWSIZE                     (1),
		.USE_S0_AWBURST                    (1),
		.USE_S0_AWLOCK                     (0),
		.USE_M0_AWLOCK                     (1),
		.USE_S0_AWCACHE                    (0),
		.USE_M0_AWCACHE                    (1),
		.USE_M0_AWPROT                     (1),
		.USE_S0_AWQOS                      (0),
		.USE_M0_AWQOS                      (1),
		.USE_S0_WSTRB                      (1),
		.USE_M0_WLAST                      (1),
		.USE_S0_BID                        (0),
		.USE_S0_BRESP                      (1),
		.USE_M0_BRESP                      (1),
		.USE_S0_ARID                       (0),
		.USE_S0_ARREGION                   (0),
		.USE_M0_ARREGION                   (1),
		.USE_S0_ARLEN                      (1),
		.USE_S0_ARSIZE                     (1),
		.USE_S0_ARBURST                    (1),
		.USE_S0_ARLOCK                     (0),
		.USE_M0_ARLOCK                     (1),
		.USE_M0_ARCACHE                    (1),
		.USE_M0_ARQOS                      (1),
		.USE_M0_ARPROT                     (1),
		.USE_S0_ARCACHE                    (0),
		.USE_S0_ARQOS                      (0),
		.USE_S0_RID                        (0),
		.USE_S0_RRESP                      (1),
		.USE_M0_RRESP                      (1),
		.USE_S0_RLAST                      (1),
		.M0_ID_WIDTH                       (1),
		.DATA_WIDTH                        (32),
		.M0_SAI_WIDTH                      (4),
		.S0_SAI_WIDTH                      (4),
		.USER_DATA_WIDTH                   (4),
		.M0_USER_ADDRCHK_WIDTH             (4),
		.S0_USER_ADDRCHK_WIDTH             (4),
		.S0_ID_WIDTH                       (1),
		.M0_ADDR_WIDTH                     (32),
		.S0_WRITE_ADDR_USER_WIDTH          (1),
		.S0_READ_ADDR_USER_WIDTH           (1),
		.M0_WRITE_ADDR_USER_WIDTH          (1),
		.M0_READ_ADDR_USER_WIDTH           (1),
		.S0_WRITE_DATA_USER_WIDTH          (1),
		.S0_WRITE_RESPONSE_DATA_USER_WIDTH (1),
		.S0_READ_DATA_USER_WIDTH           (1),
		.M0_WRITE_DATA_USER_WIDTH          (1),
		.M0_WRITE_RESPONSE_DATA_USER_WIDTH (1),
		.M0_READ_DATA_USER_WIDTH           (1),
		.S0_ADDR_WIDTH                     (32),
		.USE_S0_AWUSER                     (0),
		.USE_S0_ARUSER                     (0),
		.USE_S0_WUSER                      (0),
		.USE_S0_RUSER                      (0),
		.USE_S0_BUSER                      (0),
		.USE_M0_AWUSER                     (1),
		.USE_M0_ARUSER                     (1),
		.USE_M0_WUSER                      (1),
		.USE_M0_RUSER                      (1),
		.USE_M0_BUSER                      (1),
		.M0_AXI_VERSION                    ("AXI4"),
		.M0_BURST_LENGTH_WIDTH             (8),
		.S0_BURST_LENGTH_WIDTH             (8),
		.M0_LOCK_WIDTH                     (1),
		.S0_LOCK_WIDTH                     (1),
		.S0_AXI_VERSION                    ("AXI4"),
		.ACE_LITE_SUPPORT                  (0),
		.USE_M0_AWUSER_ADDRCHK             (0),
		.USE_M0_AWUSER_SAI                 (0),
		.USE_M0_ARUSER_ADDRCHK             (0),
		.USE_M0_ARUSER_SAI                 (0),
		.USE_M0_WUSER_DATACHK              (0),
		.USE_M0_WUSER_POISON               (0),
		.USE_M0_RUSER_DATACHK              (0),
		.USE_M0_RUSER_POISON               (0),
		.USE_M0_WUSER_DATA                 (0),
		.USE_M0_RUSER_DATA                 (0),
		.USE_S0_AWUSER_ADDRCHK             (0),
		.USE_S0_AWUSER_SAI                 (0),
		.USE_S0_ARUSER_ADDRCHK             (0),
		.USE_S0_ARUSER_SAI                 (0),
		.USE_S0_WUSER_DATACHK              (0),
		.USE_S0_WUSER_POISON               (0),
		.USE_S0_RUSER_DATACHK              (0),
		.USE_S0_WUSER_DATA                 (0),
		.USE_S0_RUSER_DATA                 (0),
		.USE_S0_RUSER_POISON               (0),
		.REGENERATE_ADDRCHK                (0),
		.ROLE_BASED_USER                   (0)
	) cpu_instruction_manager_translator (
		.aclk              (clock_in_out_clk_clk),                           //   input,   width = 1,       clk.clk
		.aresetn           (~cpu_reset_reset_bridge_in_reset_reset),         //   input,   width = 1, clk_reset.reset_n
		.m0_awid           (cpu_instruction_manager_translator_m0_awid),     //  output,   width = 1,        m0.awid
		.m0_awaddr         (cpu_instruction_manager_translator_m0_awaddr),   //  output,  width = 32,          .awaddr
		.m0_awlen          (cpu_instruction_manager_translator_m0_awlen),    //  output,   width = 8,          .awlen
		.m0_awsize         (cpu_instruction_manager_translator_m0_awsize),   //  output,   width = 3,          .awsize
		.m0_awburst        (cpu_instruction_manager_translator_m0_awburst),  //  output,   width = 2,          .awburst
		.m0_awlock         (cpu_instruction_manager_translator_m0_awlock),   //  output,   width = 1,          .awlock
		.m0_awcache        (cpu_instruction_manager_translator_m0_awcache),  //  output,   width = 4,          .awcache
		.m0_awprot         (cpu_instruction_manager_translator_m0_awprot),   //  output,   width = 3,          .awprot
		.m0_awuser         (cpu_instruction_manager_translator_m0_awuser),   //  output,   width = 1,          .awuser
		.m0_awqos          (cpu_instruction_manager_translator_m0_awqos),    //  output,   width = 4,          .awqos
		.m0_awregion       (cpu_instruction_manager_translator_m0_awregion), //  output,   width = 4,          .awregion
		.m0_awvalid        (cpu_instruction_manager_translator_m0_awvalid),  //  output,   width = 1,          .awvalid
		.m0_awready        (cpu_instruction_manager_translator_m0_awready),  //   input,   width = 1,          .awready
		.m0_wdata          (cpu_instruction_manager_translator_m0_wdata),    //  output,  width = 32,          .wdata
		.m0_wstrb          (cpu_instruction_manager_translator_m0_wstrb),    //  output,   width = 4,          .wstrb
		.m0_wlast          (cpu_instruction_manager_translator_m0_wlast),    //  output,   width = 1,          .wlast
		.m0_wvalid         (cpu_instruction_manager_translator_m0_wvalid),   //  output,   width = 1,          .wvalid
		.m0_wuser          (cpu_instruction_manager_translator_m0_wuser),    //  output,   width = 1,          .wuser
		.m0_wready         (cpu_instruction_manager_translator_m0_wready),   //   input,   width = 1,          .wready
		.m0_bid            (cpu_instruction_manager_translator_m0_bid),      //   input,   width = 1,          .bid
		.m0_bresp          (cpu_instruction_manager_translator_m0_bresp),    //   input,   width = 2,          .bresp
		.m0_buser          (cpu_instruction_manager_translator_m0_buser),    //   input,   width = 1,          .buser
		.m0_bvalid         (cpu_instruction_manager_translator_m0_bvalid),   //   input,   width = 1,          .bvalid
		.m0_bready         (cpu_instruction_manager_translator_m0_bready),   //  output,   width = 1,          .bready
		.m0_arid           (cpu_instruction_manager_translator_m0_arid),     //  output,   width = 1,          .arid
		.m0_araddr         (cpu_instruction_manager_translator_m0_araddr),   //  output,  width = 32,          .araddr
		.m0_arlen          (cpu_instruction_manager_translator_m0_arlen),    //  output,   width = 8,          .arlen
		.m0_arsize         (cpu_instruction_manager_translator_m0_arsize),   //  output,   width = 3,          .arsize
		.m0_arburst        (cpu_instruction_manager_translator_m0_arburst),  //  output,   width = 2,          .arburst
		.m0_arlock         (cpu_instruction_manager_translator_m0_arlock),   //  output,   width = 1,          .arlock
		.m0_arcache        (cpu_instruction_manager_translator_m0_arcache),  //  output,   width = 4,          .arcache
		.m0_arprot         (cpu_instruction_manager_translator_m0_arprot),   //  output,   width = 3,          .arprot
		.m0_aruser         (cpu_instruction_manager_translator_m0_aruser),   //  output,   width = 1,          .aruser
		.m0_arqos          (cpu_instruction_manager_translator_m0_arqos),    //  output,   width = 4,          .arqos
		.m0_arregion       (cpu_instruction_manager_translator_m0_arregion), //  output,   width = 4,          .arregion
		.m0_arvalid        (cpu_instruction_manager_translator_m0_arvalid),  //  output,   width = 1,          .arvalid
		.m0_arready        (cpu_instruction_manager_translator_m0_arready),  //   input,   width = 1,          .arready
		.m0_rid            (cpu_instruction_manager_translator_m0_rid),      //   input,   width = 1,          .rid
		.m0_rdata          (cpu_instruction_manager_translator_m0_rdata),    //   input,  width = 32,          .rdata
		.m0_rresp          (cpu_instruction_manager_translator_m0_rresp),    //   input,   width = 2,          .rresp
		.m0_rlast          (cpu_instruction_manager_translator_m0_rlast),    //   input,   width = 1,          .rlast
		.m0_rvalid         (cpu_instruction_manager_translator_m0_rvalid),   //   input,   width = 1,          .rvalid
		.m0_rready         (cpu_instruction_manager_translator_m0_rready),   //  output,   width = 1,          .rready
		.m0_ruser          (cpu_instruction_manager_translator_m0_ruser),    //   input,   width = 1,          .ruser
		.s0_awaddr         (cpu_instruction_manager_awaddr),                 //   input,  width = 32,        s0.awaddr
		.s0_awlen          (cpu_instruction_manager_awlen),                  //   input,   width = 8,          .awlen
		.s0_awsize         (cpu_instruction_manager_awsize),                 //   input,   width = 3,          .awsize
		.s0_awburst        (cpu_instruction_manager_awburst),                //   input,   width = 2,          .awburst
		.s0_awprot         (cpu_instruction_manager_awprot),                 //   input,   width = 3,          .awprot
		.s0_awvalid        (cpu_instruction_manager_awvalid),                //   input,   width = 1,          .awvalid
		.s0_awready        (cpu_instruction_manager_awready),                //  output,   width = 1,          .awready
		.s0_wdata          (cpu_instruction_manager_wdata),                  //   input,  width = 32,          .wdata
		.s0_wstrb          (cpu_instruction_manager_wstrb),                  //   input,   width = 4,          .wstrb
		.s0_wlast          (cpu_instruction_manager_wlast),                  //   input,   width = 1,          .wlast
		.s0_wvalid         (cpu_instruction_manager_wvalid),                 //   input,   width = 1,          .wvalid
		.s0_wready         (cpu_instruction_manager_wready),                 //  output,   width = 1,          .wready
		.s0_bresp          (cpu_instruction_manager_bresp),                  //  output,   width = 2,          .bresp
		.s0_bvalid         (cpu_instruction_manager_bvalid),                 //  output,   width = 1,          .bvalid
		.s0_bready         (cpu_instruction_manager_bready),                 //   input,   width = 1,          .bready
		.s0_araddr         (cpu_instruction_manager_araddr),                 //   input,  width = 32,          .araddr
		.s0_arlen          (cpu_instruction_manager_arlen),                  //   input,   width = 8,          .arlen
		.s0_arsize         (cpu_instruction_manager_arsize),                 //   input,   width = 3,          .arsize
		.s0_arburst        (cpu_instruction_manager_arburst),                //   input,   width = 2,          .arburst
		.s0_arprot         (cpu_instruction_manager_arprot),                 //   input,   width = 3,          .arprot
		.s0_arvalid        (cpu_instruction_manager_arvalid),                //   input,   width = 1,          .arvalid
		.s0_arready        (cpu_instruction_manager_arready),                //  output,   width = 1,          .arready
		.s0_rdata          (cpu_instruction_manager_rdata),                  //  output,  width = 32,          .rdata
		.s0_rresp          (cpu_instruction_manager_rresp),                  //  output,   width = 2,          .rresp
		.s0_rlast          (cpu_instruction_manager_rlast),                  //  output,   width = 1,          .rlast
		.s0_rvalid         (cpu_instruction_manager_rvalid),                 //  output,   width = 1,          .rvalid
		.s0_rready         (cpu_instruction_manager_rready),                 //   input,   width = 1,          .rready
		.m0_awuser_addrchk (),                                               // (terminated),                        
		.m0_awuser_sai     (),                                               // (terminated),                        
		.m0_wuser_datachk  (),                                               // (terminated),                        
		.m0_wuser_data     (),                                               // (terminated),                        
		.m0_wuser_poison   (),                                               // (terminated),                        
		.m0_aruser_addrchk (),                                               // (terminated),                        
		.m0_aruser_sai     (),                                               // (terminated),                        
		.m0_ruser_datachk  (4'b0000),                                        // (terminated),                        
		.m0_ruser_data     (4'b0000),                                        // (terminated),                        
		.m0_ruser_poison   (1'b0),                                           // (terminated),                        
		.s0_awid           (1'b0),                                           // (terminated),                        
		.s0_awlock         (1'b0),                                           // (terminated),                        
		.s0_awcache        (4'b0000),                                        // (terminated),                        
		.s0_awuser         (1'b0),                                           // (terminated),                        
		.s0_awuser_addrchk (4'b0000),                                        // (terminated),                        
		.s0_awuser_sai     (4'b0000),                                        // (terminated),                        
		.s0_awqos          (4'b0000),                                        // (terminated),                        
		.s0_awregion       (4'b0000),                                        // (terminated),                        
		.s0_wuser          (1'b0),                                           // (terminated),                        
		.s0_wuser_datachk  (4'b0000),                                        // (terminated),                        
		.s0_wuser_data     (4'b0000),                                        // (terminated),                        
		.s0_wuser_poison   (1'b0),                                           // (terminated),                        
		.s0_bid            (),                                               // (terminated),                        
		.s0_buser          (),                                               // (terminated),                        
		.s0_arid           (1'b0),                                           // (terminated),                        
		.s0_arlock         (1'b0),                                           // (terminated),                        
		.s0_arcache        (4'b0000),                                        // (terminated),                        
		.s0_aruser         (1'b0),                                           // (terminated),                        
		.s0_aruser_addrchk (4'b0000),                                        // (terminated),                        
		.s0_aruser_sai     (4'b0000),                                        // (terminated),                        
		.s0_arqos          (4'b0000),                                        // (terminated),                        
		.s0_arregion       (4'b0000),                                        // (terminated),                        
		.s0_rid            (),                                               // (terminated),                        
		.s0_ruser          (),                                               // (terminated),                        
		.s0_ruser_datachk  (),                                               // (terminated),                        
		.s0_ruser_data     (),                                               // (terminated),                        
		.s0_ruser_poison   (),                                               // (terminated),                        
		.s0_wid            (1'b0),                                           // (terminated),                        
		.s0_ardomain       (2'b00),                                          // (terminated),                        
		.s0_arsnoop        (4'b0000),                                        // (terminated),                        
		.s0_arbar          (2'b00),                                          // (terminated),                        
		.s0_awdomain       (2'b00),                                          // (terminated),                        
		.s0_awsnoop        (3'b000),                                         // (terminated),                        
		.s0_awbar          (2'b00),                                          // (terminated),                        
		.s0_awunique       (1'b0),                                           // (terminated),                        
		.m0_wid            (),                                               // (terminated),                        
		.m0_ardomain       (),                                               // (terminated),                        
		.m0_arsnoop        (),                                               // (terminated),                        
		.m0_arbar          (),                                               // (terminated),                        
		.m0_awdomain       (),                                               // (terminated),                        
		.m0_awsnoop        (),                                               // (terminated),                        
		.m0_awbar          (),                                               // (terminated),                        
		.m0_awunique       ()                                                // (terminated),                        
	);

	sys_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) jtag_uart_avalon_jtag_slave_translator (
		.clk                    (clock_in_out_clk_clk),                               //   input,   width = 1,                      clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset),              //   input,   width = 1,                    reset.reset
		.uav_address            (jtag_uart_avalon_jtag_slave_agent_m0_address),       //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),    //   input,   width = 3,                         .burstcount
		.uav_read               (jtag_uart_avalon_jtag_slave_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (jtag_uart_avalon_jtag_slave_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (jtag_uart_avalon_jtag_slave_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (jtag_uart_avalon_jtag_slave_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (jtag_uart_avalon_jtag_slave_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (jtag_uart_avalon_jtag_slave_address),                //  output,   width = 1,      avalon_anti_slave_0.address
		.av_write               (jtag_uart_avalon_jtag_slave_write),                  //  output,   width = 1,                         .write
		.av_read                (jtag_uart_avalon_jtag_slave_read),                   //  output,   width = 1,                         .read
		.av_readdata            (jtag_uart_avalon_jtag_slave_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (jtag_uart_avalon_jtag_slave_writedata),              //  output,  width = 32,                         .writedata
		.av_waitrequest         (jtag_uart_avalon_jtag_slave_waitrequest),            //   input,   width = 1,                         .waitrequest
		.av_chipselect          (jtag_uart_avalon_jtag_slave_chipselect),             //  output,   width = 1,                         .chipselect
		.av_begintransfer       (),                                                   // (terminated),                                       
		.av_beginbursttransfer  (),                                                   // (terminated),                                       
		.av_burstcount          (),                                                   // (terminated),                                       
		.av_byteenable          (),                                                   // (terminated),                                       
		.av_readdatavalid       (1'b0),                                               // (terminated),                                       
		.av_writebyteenable     (),                                                   // (terminated),                                       
		.av_lock                (),                                                   // (terminated),                                       
		.av_clken               (),                                                   // (terminated),                                       
		.uav_clken              (1'b0),                                               // (terminated),                                       
		.av_debugaccess         (),                                                   // (terminated),                                       
		.av_outputenable        (),                                                   // (terminated),                                       
		.uav_response           (),                                                   // (terminated),                                       
		.av_response            (2'b00),                                              // (terminated),                                       
		.uav_writeresponsevalid (),                                                   // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                // (terminated),                                       
	);

	sys_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) sysid_qsys_0_control_slave_translator (
		.clk                    (clock_in_out_clk_clk),                              //   input,   width = 1,                      clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset),             //   input,   width = 1,                    reset.reset
		.uav_address            (sysid_qsys_0_control_slave_agent_m0_address),       //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (sysid_qsys_0_control_slave_agent_m0_burstcount),    //   input,   width = 3,                         .burstcount
		.uav_read               (sysid_qsys_0_control_slave_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (sysid_qsys_0_control_slave_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (sysid_qsys_0_control_slave_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (sysid_qsys_0_control_slave_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (sysid_qsys_0_control_slave_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (sysid_qsys_0_control_slave_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (sysid_qsys_0_control_slave_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (sysid_qsys_0_control_slave_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (sysid_qsys_0_control_slave_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (sysid_qsys_0_control_slave_address),                //  output,   width = 1,      avalon_anti_slave_0.address
		.av_readdata            (sysid_qsys_0_control_slave_readdata),               //   input,  width = 32,                         .readdata
		.av_write               (),                                                  // (terminated),                                       
		.av_read                (),                                                  // (terminated),                                       
		.av_writedata           (),                                                  // (terminated),                                       
		.av_begintransfer       (),                                                  // (terminated),                                       
		.av_beginbursttransfer  (),                                                  // (terminated),                                       
		.av_burstcount          (),                                                  // (terminated),                                       
		.av_byteenable          (),                                                  // (terminated),                                       
		.av_readdatavalid       (1'b0),                                              // (terminated),                                       
		.av_waitrequest         (1'b0),                                              // (terminated),                                       
		.av_writebyteenable     (),                                                  // (terminated),                                       
		.av_lock                (),                                                  // (terminated),                                       
		.av_chipselect          (),                                                  // (terminated),                                       
		.av_clken               (),                                                  // (terminated),                                       
		.uav_clken              (1'b0),                                              // (terminated),                                       
		.av_debugaccess         (),                                                  // (terminated),                                       
		.av_outputenable        (),                                                  // (terminated),                                       
		.uav_response           (),                                                  // (terminated),                                       
		.av_response            (2'b00),                                             // (terminated),                                       
		.uav_writeresponsevalid (),                                                  // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                               // (terminated),                                       
	);

	sys_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (16),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) cpu_dm_agent_translator (
		.clk                    (clock_in_out_clk_clk),                  //   input,   width = 1,                      clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (cpu_dm_agent_agent_m0_address),         //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (cpu_dm_agent_agent_m0_burstcount),      //   input,   width = 3,                         .burstcount
		.uav_read               (cpu_dm_agent_agent_m0_read),            //   input,   width = 1,                         .read
		.uav_write              (cpu_dm_agent_agent_m0_write),           //   input,   width = 1,                         .write
		.uav_waitrequest        (cpu_dm_agent_agent_m0_waitrequest),     //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (cpu_dm_agent_agent_m0_readdatavalid),   //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (cpu_dm_agent_agent_m0_byteenable),      //   input,   width = 4,                         .byteenable
		.uav_readdata           (cpu_dm_agent_agent_m0_readdata),        //  output,  width = 32,                         .readdata
		.uav_writedata          (cpu_dm_agent_agent_m0_writedata),       //   input,  width = 32,                         .writedata
		.uav_lock               (cpu_dm_agent_agent_m0_lock),            //   input,   width = 1,                         .lock
		.uav_debugaccess        (cpu_dm_agent_agent_m0_debugaccess),     //   input,   width = 1,                         .debugaccess
		.av_address             (cpu_dm_agent_address),                  //  output,  width = 16,      avalon_anti_slave_0.address
		.av_write               (cpu_dm_agent_write),                    //  output,   width = 1,                         .write
		.av_read                (cpu_dm_agent_read),                     //  output,   width = 1,                         .read
		.av_readdata            (cpu_dm_agent_readdata),                 //   input,  width = 32,                         .readdata
		.av_writedata           (cpu_dm_agent_writedata),                //  output,  width = 32,                         .writedata
		.av_readdatavalid       (cpu_dm_agent_readdatavalid),            //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (cpu_dm_agent_waitrequest),              //   input,   width = 1,                         .waitrequest
		.av_begintransfer       (),                                      // (terminated),                                       
		.av_beginbursttransfer  (),                                      // (terminated),                                       
		.av_burstcount          (),                                      // (terminated),                                       
		.av_byteenable          (),                                      // (terminated),                                       
		.av_writebyteenable     (),                                      // (terminated),                                       
		.av_lock                (),                                      // (terminated),                                       
		.av_chipselect          (),                                      // (terminated),                                       
		.av_clken               (),                                      // (terminated),                                       
		.uav_clken              (1'b0),                                  // (terminated),                                       
		.av_debugaccess         (),                                      // (terminated),                                       
		.av_outputenable        (),                                      // (terminated),                                       
		.uav_response           (),                                      // (terminated),                                       
		.av_response            (2'b00),                                 // (terminated),                                       
		.uav_writeresponsevalid (),                                      // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                   // (terminated),                                       
	);

	sys_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (19),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) ram_s1_translator (
		.clk                    (clock_in_out_clk_clk),                  //   input,   width = 1,                      clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (ram_s1_agent_m0_address),               //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (ram_s1_agent_m0_burstcount),            //   input,   width = 3,                         .burstcount
		.uav_read               (ram_s1_agent_m0_read),                  //   input,   width = 1,                         .read
		.uav_write              (ram_s1_agent_m0_write),                 //   input,   width = 1,                         .write
		.uav_waitrequest        (ram_s1_agent_m0_waitrequest),           //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (ram_s1_agent_m0_readdatavalid),         //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (ram_s1_agent_m0_byteenable),            //   input,   width = 4,                         .byteenable
		.uav_readdata           (ram_s1_agent_m0_readdata),              //  output,  width = 32,                         .readdata
		.uav_writedata          (ram_s1_agent_m0_writedata),             //   input,  width = 32,                         .writedata
		.uav_lock               (ram_s1_agent_m0_lock),                  //   input,   width = 1,                         .lock
		.uav_debugaccess        (ram_s1_agent_m0_debugaccess),           //   input,   width = 1,                         .debugaccess
		.av_address             (ram_s1_address),                        //  output,  width = 19,      avalon_anti_slave_0.address
		.av_write               (ram_s1_write),                          //  output,   width = 1,                         .write
		.av_read                (ram_s1_read),                           //  output,   width = 1,                         .read
		.av_readdata            (ram_s1_readdata),                       //   input,  width = 32,                         .readdata
		.av_writedata           (ram_s1_writedata),                      //  output,  width = 32,                         .writedata
		.av_byteenable          (ram_s1_byteenable),                     //  output,   width = 4,                         .byteenable
		.av_begintransfer       (),                                      // (terminated),                                       
		.av_beginbursttransfer  (),                                      // (terminated),                                       
		.av_burstcount          (),                                      // (terminated),                                       
		.av_readdatavalid       (1'b0),                                  // (terminated),                                       
		.av_waitrequest         (1'b0),                                  // (terminated),                                       
		.av_writebyteenable     (),                                      // (terminated),                                       
		.av_lock                (),                                      // (terminated),                                       
		.av_chipselect          (),                                      // (terminated),                                       
		.av_clken               (),                                      // (terminated),                                       
		.uav_clken              (1'b0),                                  // (terminated),                                       
		.av_debugaccess         (),                                      // (terminated),                                       
		.av_outputenable        (),                                      // (terminated),                                       
		.uav_response           (),                                      // (terminated),                                       
		.av_response            (2'b00),                                 // (terminated),                                       
		.uav_writeresponsevalid (),                                      // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                   // (terminated),                                       
	);

	sys_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (6),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) cpu_timer_sw_agent_translator (
		.clk                    (clock_in_out_clk_clk),                      //   input,   width = 1,                      clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset),     //   input,   width = 1,                    reset.reset
		.uav_address            (cpu_timer_sw_agent_agent_m0_address),       //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (cpu_timer_sw_agent_agent_m0_burstcount),    //   input,   width = 3,                         .burstcount
		.uav_read               (cpu_timer_sw_agent_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (cpu_timer_sw_agent_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (cpu_timer_sw_agent_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (cpu_timer_sw_agent_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (cpu_timer_sw_agent_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (cpu_timer_sw_agent_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (cpu_timer_sw_agent_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (cpu_timer_sw_agent_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (cpu_timer_sw_agent_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (cpu_timer_sw_agent_address),                //  output,   width = 6,      avalon_anti_slave_0.address
		.av_write               (cpu_timer_sw_agent_write),                  //  output,   width = 1,                         .write
		.av_read                (cpu_timer_sw_agent_read),                   //  output,   width = 1,                         .read
		.av_readdata            (cpu_timer_sw_agent_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (cpu_timer_sw_agent_writedata),              //  output,  width = 32,                         .writedata
		.av_byteenable          (cpu_timer_sw_agent_byteenable),             //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (cpu_timer_sw_agent_readdatavalid),          //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (cpu_timer_sw_agent_waitrequest),            //   input,   width = 1,                         .waitrequest
		.av_begintransfer       (),                                          // (terminated),                                       
		.av_beginbursttransfer  (),                                          // (terminated),                                       
		.av_burstcount          (),                                          // (terminated),                                       
		.av_writebyteenable     (),                                          // (terminated),                                       
		.av_lock                (),                                          // (terminated),                                       
		.av_chipselect          (),                                          // (terminated),                                       
		.av_clken               (),                                          // (terminated),                                       
		.uav_clken              (1'b0),                                      // (terminated),                                       
		.av_debugaccess         (),                                          // (terminated),                                       
		.av_outputenable        (),                                          // (terminated),                                       
		.uav_response           (),                                          // (terminated),                                       
		.av_response            (2'b00),                                     // (terminated),                                       
		.uav_writeresponsevalid (),                                          // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                       // (terminated),                                       
	);

	sys_altera_merlin_axi_master_ni_1980_4qd7sla #(
		.ID_WIDTH                  (1),
		.ADDR_WIDTH                (32),
		.RDATA_WIDTH               (32),
		.WDATA_WIDTH               (32),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (8),
		.AXI_LOCK_WIDTH            (1),
		.SAI_WIDTH                 (1),
		.ADDRCHK_WIDTH             (1),
		.USER_DATA_WIDTH           (1),
		.USE_PKT_DATACHK           (0),
		.USE_PKT_ADDRCHK           (0),
		.AXI_VERSION               ("AXI4"),
		.ACE_LITE_SUPPORT          (0),
		.ROLE_BASED_USER           (0),
		.WRITE_ISSUING_CAPABILITY  (1),
		.READ_ISSUING_CAPABILITY   (1),
		.PKT_BEGIN_BURST           (99),
		.PKT_CACHE_H               (117),
		.PKT_CACHE_L               (114),
		.PKT_ADDR_SIDEBAND_H       (97),
		.PKT_ADDR_SIDEBAND_L       (97),
		.PKT_PROTECTION_H          (113),
		.PKT_PROTECTION_L          (111),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_RESPONSE_STATUS_L     (118),
		.PKT_RESPONSE_STATUS_H     (119),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (85),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (104),
		.PKT_DEST_ID_H             (109),
		.PKT_DEST_ID_L             (107),
		.PKT_THREAD_ID_H           (110),
		.PKT_THREAD_ID_L           (110),
		.PKT_QOS_L                 (100),
		.PKT_QOS_H                 (103),
		.PKT_ORI_BURST_SIZE_L      (120),
		.PKT_ORI_BURST_SIZE_H      (122),
		.PKT_DATA_SIDEBAND_H       (98),
		.PKT_DATA_SIDEBAND_L       (98),
		.PKT_DOMAIN_H              (130),
		.PKT_DOMAIN_L              (129),
		.PKT_SNOOP_H               (128),
		.PKT_SNOOP_L               (125),
		.PKT_BARRIER_H             (124),
		.PKT_BARRIER_L             (123),
		.PKT_WUNIQUE               (131),
		.PKT_EOP_OOO               (138),
		.PKT_SOP_OOO               (139),
		.PKT_POISON_H              (132),
		.PKT_POISON_L              (132),
		.PKT_DATACHK_H             (133),
		.PKT_DATACHK_L             (133),
		.PKT_ADDRCHK_H             (136),
		.PKT_ADDRCHK_L             (135),
		.PKT_SAI_H                 (137),
		.PKT_SAI_L                 (137),
		.PKT_USER_DATA_H           (134),
		.PKT_USER_DATA_L           (134),
		.ST_DATA_W                 (144),
		.ST_CHANNEL_W              (5),
		.ID                        (0),
		.SYNC_RESET                (0)
	) cpu_data_manager_agent (
		.aclk                   (clock_in_out_clk_clk),                          //   input,    width = 1,              clk.clk
		.aresetn                (~cpu_reset_reset_bridge_in_reset_reset),        //   input,    width = 1,        clk_reset.reset_n
		.write_cp_valid         (cpu_data_manager_agent_write_cp_valid),         //  output,    width = 1,         write_cp.valid
		.write_cp_data          (cpu_data_manager_agent_write_cp_data),          //  output,  width = 144,                 .data
		.write_cp_startofpacket (cpu_data_manager_agent_write_cp_startofpacket), //  output,    width = 1,                 .startofpacket
		.write_cp_endofpacket   (cpu_data_manager_agent_write_cp_endofpacket),   //  output,    width = 1,                 .endofpacket
		.write_cp_ready         (cpu_data_manager_agent_write_cp_ready),         //   input,    width = 1,                 .ready
		.write_rp_valid         (rsp_mux_src_valid),                             //   input,    width = 1,         write_rp.valid
		.write_rp_data          (rsp_mux_src_data),                              //   input,  width = 144,                 .data
		.write_rp_channel       (rsp_mux_src_channel),                           //   input,    width = 5,                 .channel
		.write_rp_startofpacket (rsp_mux_src_startofpacket),                     //   input,    width = 1,                 .startofpacket
		.write_rp_endofpacket   (rsp_mux_src_endofpacket),                       //   input,    width = 1,                 .endofpacket
		.write_rp_ready         (rsp_mux_src_ready),                             //  output,    width = 1,                 .ready
		.read_cp_valid          (cpu_data_manager_agent_read_cp_valid),          //  output,    width = 1,          read_cp.valid
		.read_cp_data           (cpu_data_manager_agent_read_cp_data),           //  output,  width = 144,                 .data
		.read_cp_startofpacket  (cpu_data_manager_agent_read_cp_startofpacket),  //  output,    width = 1,                 .startofpacket
		.read_cp_endofpacket    (cpu_data_manager_agent_read_cp_endofpacket),    //  output,    width = 1,                 .endofpacket
		.read_cp_ready          (cpu_data_manager_agent_read_cp_ready),          //   input,    width = 1,                 .ready
		.read_rp_valid          (rsp_mux_001_src_valid),                         //   input,    width = 1,          read_rp.valid
		.read_rp_data           (rsp_mux_001_src_data),                          //   input,  width = 144,                 .data
		.read_rp_channel        (rsp_mux_001_src_channel),                       //   input,    width = 5,                 .channel
		.read_rp_startofpacket  (rsp_mux_001_src_startofpacket),                 //   input,    width = 1,                 .startofpacket
		.read_rp_endofpacket    (rsp_mux_001_src_endofpacket),                   //   input,    width = 1,                 .endofpacket
		.read_rp_ready          (rsp_mux_001_src_ready),                         //  output,    width = 1,                 .ready
		.awid                   (cpu_data_manager_translator_m0_awid),           //   input,    width = 1, altera_axi_slave.awid
		.awaddr                 (cpu_data_manager_translator_m0_awaddr),         //   input,   width = 32,                 .awaddr
		.awlen                  (cpu_data_manager_translator_m0_awlen),          //   input,    width = 8,                 .awlen
		.awsize                 (cpu_data_manager_translator_m0_awsize),         //   input,    width = 3,                 .awsize
		.awburst                (cpu_data_manager_translator_m0_awburst),        //   input,    width = 2,                 .awburst
		.awlock                 (cpu_data_manager_translator_m0_awlock),         //   input,    width = 1,                 .awlock
		.awcache                (cpu_data_manager_translator_m0_awcache),        //   input,    width = 4,                 .awcache
		.awprot                 (cpu_data_manager_translator_m0_awprot),         //   input,    width = 3,                 .awprot
		.awuser                 (cpu_data_manager_translator_m0_awuser),         //   input,    width = 1,                 .awuser
		.awqos                  (cpu_data_manager_translator_m0_awqos),          //   input,    width = 4,                 .awqos
		.awregion               (cpu_data_manager_translator_m0_awregion),       //   input,    width = 4,                 .awregion
		.awvalid                (cpu_data_manager_translator_m0_awvalid),        //   input,    width = 1,                 .awvalid
		.awready                (cpu_data_manager_translator_m0_awready),        //  output,    width = 1,                 .awready
		.wdata                  (cpu_data_manager_translator_m0_wdata),          //   input,   width = 32,                 .wdata
		.wstrb                  (cpu_data_manager_translator_m0_wstrb),          //   input,    width = 4,                 .wstrb
		.wlast                  (cpu_data_manager_translator_m0_wlast),          //   input,    width = 1,                 .wlast
		.wvalid                 (cpu_data_manager_translator_m0_wvalid),         //   input,    width = 1,                 .wvalid
		.wuser                  (cpu_data_manager_translator_m0_wuser),          //   input,    width = 1,                 .wuser
		.wready                 (cpu_data_manager_translator_m0_wready),         //  output,    width = 1,                 .wready
		.bid                    (cpu_data_manager_translator_m0_bid),            //  output,    width = 1,                 .bid
		.bresp                  (cpu_data_manager_translator_m0_bresp),          //  output,    width = 2,                 .bresp
		.buser                  (cpu_data_manager_translator_m0_buser),          //  output,    width = 1,                 .buser
		.bvalid                 (cpu_data_manager_translator_m0_bvalid),         //  output,    width = 1,                 .bvalid
		.bready                 (cpu_data_manager_translator_m0_bready),         //   input,    width = 1,                 .bready
		.arid                   (cpu_data_manager_translator_m0_arid),           //   input,    width = 1,                 .arid
		.araddr                 (cpu_data_manager_translator_m0_araddr),         //   input,   width = 32,                 .araddr
		.arlen                  (cpu_data_manager_translator_m0_arlen),          //   input,    width = 8,                 .arlen
		.arsize                 (cpu_data_manager_translator_m0_arsize),         //   input,    width = 3,                 .arsize
		.arburst                (cpu_data_manager_translator_m0_arburst),        //   input,    width = 2,                 .arburst
		.arlock                 (cpu_data_manager_translator_m0_arlock),         //   input,    width = 1,                 .arlock
		.arcache                (cpu_data_manager_translator_m0_arcache),        //   input,    width = 4,                 .arcache
		.arprot                 (cpu_data_manager_translator_m0_arprot),         //   input,    width = 3,                 .arprot
		.aruser                 (cpu_data_manager_translator_m0_aruser),         //   input,    width = 1,                 .aruser
		.arqos                  (cpu_data_manager_translator_m0_arqos),          //   input,    width = 4,                 .arqos
		.arregion               (cpu_data_manager_translator_m0_arregion),       //   input,    width = 4,                 .arregion
		.arvalid                (cpu_data_manager_translator_m0_arvalid),        //   input,    width = 1,                 .arvalid
		.arready                (cpu_data_manager_translator_m0_arready),        //  output,    width = 1,                 .arready
		.rid                    (cpu_data_manager_translator_m0_rid),            //  output,    width = 1,                 .rid
		.rdata                  (cpu_data_manager_translator_m0_rdata),          //  output,   width = 32,                 .rdata
		.rresp                  (cpu_data_manager_translator_m0_rresp),          //  output,    width = 2,                 .rresp
		.rlast                  (cpu_data_manager_translator_m0_rlast),          //  output,    width = 1,                 .rlast
		.rvalid                 (cpu_data_manager_translator_m0_rvalid),         //  output,    width = 1,                 .rvalid
		.rready                 (cpu_data_manager_translator_m0_rready),         //   input,    width = 1,                 .rready
		.ruser                  (cpu_data_manager_translator_m0_ruser),          //  output,    width = 1,                 .ruser
		.awuser_addrchk         (1'b0),                                          // (terminated),                                
		.awuser_sai             (1'b0),                                          // (terminated),                                
		.wuser_datachk          (4'b0000),                                       // (terminated),                                
		.wuser_data             (1'b0),                                          // (terminated),                                
		.wuser_poison           (1'b0),                                          // (terminated),                                
		.aruser_addrchk         (1'b0),                                          // (terminated),                                
		.aruser_sai             (1'b0),                                          // (terminated),                                
		.ruser_datachk          (),                                              // (terminated),                                
		.ruser_data             (),                                              // (terminated),                                
		.ruser_poison           (),                                              // (terminated),                                
		.wid                    (1'b0),                                          // (terminated),                                
		.arsnoop                (4'b0000),                                       // (terminated),                                
		.ardomain               (2'b00),                                         // (terminated),                                
		.arbar                  (2'b00),                                         // (terminated),                                
		.awsnoop                (3'b000),                                        // (terminated),                                
		.awdomain               (2'b00),                                         // (terminated),                                
		.awbar                  (2'b00),                                         // (terminated),                                
		.awunique               (1'b0)                                           // (terminated),                                
	);

	sys_altera_merlin_axi_master_ni_1980_4qd7sla #(
		.ID_WIDTH                  (1),
		.ADDR_WIDTH                (32),
		.RDATA_WIDTH               (32),
		.WDATA_WIDTH               (32),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (8),
		.AXI_LOCK_WIDTH            (1),
		.SAI_WIDTH                 (1),
		.ADDRCHK_WIDTH             (1),
		.USER_DATA_WIDTH           (1),
		.USE_PKT_DATACHK           (0),
		.USE_PKT_ADDRCHK           (0),
		.AXI_VERSION               ("AXI4"),
		.ACE_LITE_SUPPORT          (0),
		.ROLE_BASED_USER           (0),
		.WRITE_ISSUING_CAPABILITY  (1),
		.READ_ISSUING_CAPABILITY   (8),
		.PKT_BEGIN_BURST           (99),
		.PKT_CACHE_H               (117),
		.PKT_CACHE_L               (114),
		.PKT_ADDR_SIDEBAND_H       (97),
		.PKT_ADDR_SIDEBAND_L       (97),
		.PKT_PROTECTION_H          (113),
		.PKT_PROTECTION_L          (111),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_RESPONSE_STATUS_L     (118),
		.PKT_RESPONSE_STATUS_H     (119),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (85),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (104),
		.PKT_DEST_ID_H             (109),
		.PKT_DEST_ID_L             (107),
		.PKT_THREAD_ID_H           (110),
		.PKT_THREAD_ID_L           (110),
		.PKT_QOS_L                 (100),
		.PKT_QOS_H                 (103),
		.PKT_ORI_BURST_SIZE_L      (120),
		.PKT_ORI_BURST_SIZE_H      (122),
		.PKT_DATA_SIDEBAND_H       (98),
		.PKT_DATA_SIDEBAND_L       (98),
		.PKT_DOMAIN_H              (130),
		.PKT_DOMAIN_L              (129),
		.PKT_SNOOP_H               (128),
		.PKT_SNOOP_L               (125),
		.PKT_BARRIER_H             (124),
		.PKT_BARRIER_L             (123),
		.PKT_WUNIQUE               (131),
		.PKT_EOP_OOO               (138),
		.PKT_SOP_OOO               (139),
		.PKT_POISON_H              (132),
		.PKT_POISON_L              (132),
		.PKT_DATACHK_H             (133),
		.PKT_DATACHK_L             (133),
		.PKT_ADDRCHK_H             (136),
		.PKT_ADDRCHK_L             (135),
		.PKT_SAI_H                 (137),
		.PKT_SAI_L                 (137),
		.PKT_USER_DATA_H           (134),
		.PKT_USER_DATA_L           (134),
		.ST_DATA_W                 (144),
		.ST_CHANNEL_W              (5),
		.ID                        (1),
		.SYNC_RESET                (0)
	) cpu_instruction_manager_agent (
		.aclk                   (clock_in_out_clk_clk),                                     //   input,    width = 1,              clk.clk
		.aresetn                (~cpu_reset_reset_bridge_in_reset_reset),                   //   input,    width = 1,        clk_reset.reset_n
		.write_cp_valid         (cpu_instruction_manager_agent_write_cp_valid),             //  output,    width = 1,         write_cp.valid
		.write_cp_data          (cpu_instruction_manager_agent_write_cp_data),              //  output,  width = 144,                 .data
		.write_cp_startofpacket (cpu_instruction_manager_agent_write_cp_startofpacket),     //  output,    width = 1,                 .startofpacket
		.write_cp_endofpacket   (cpu_instruction_manager_agent_write_cp_endofpacket),       //  output,    width = 1,                 .endofpacket
		.write_cp_ready         (cpu_instruction_manager_agent_write_cp_ready),             //   input,    width = 1,                 .ready
		.write_rp_valid         (cpu_instruction_manager_wr_limiter_rsp_src_valid),         //   input,    width = 1,         write_rp.valid
		.write_rp_data          (cpu_instruction_manager_wr_limiter_rsp_src_data),          //   input,  width = 144,                 .data
		.write_rp_channel       (cpu_instruction_manager_wr_limiter_rsp_src_channel),       //   input,    width = 5,                 .channel
		.write_rp_startofpacket (cpu_instruction_manager_wr_limiter_rsp_src_startofpacket), //   input,    width = 1,                 .startofpacket
		.write_rp_endofpacket   (cpu_instruction_manager_wr_limiter_rsp_src_endofpacket),   //   input,    width = 1,                 .endofpacket
		.write_rp_ready         (cpu_instruction_manager_wr_limiter_rsp_src_ready),         //  output,    width = 1,                 .ready
		.read_cp_valid          (cpu_instruction_manager_agent_read_cp_valid),              //  output,    width = 1,          read_cp.valid
		.read_cp_data           (cpu_instruction_manager_agent_read_cp_data),               //  output,  width = 144,                 .data
		.read_cp_startofpacket  (cpu_instruction_manager_agent_read_cp_startofpacket),      //  output,    width = 1,                 .startofpacket
		.read_cp_endofpacket    (cpu_instruction_manager_agent_read_cp_endofpacket),        //  output,    width = 1,                 .endofpacket
		.read_cp_ready          (cpu_instruction_manager_agent_read_cp_ready),              //   input,    width = 1,                 .ready
		.read_rp_valid          (cpu_instruction_manager_rd_limiter_rsp_src_valid),         //   input,    width = 1,          read_rp.valid
		.read_rp_data           (cpu_instruction_manager_rd_limiter_rsp_src_data),          //   input,  width = 144,                 .data
		.read_rp_channel        (cpu_instruction_manager_rd_limiter_rsp_src_channel),       //   input,    width = 5,                 .channel
		.read_rp_startofpacket  (cpu_instruction_manager_rd_limiter_rsp_src_startofpacket), //   input,    width = 1,                 .startofpacket
		.read_rp_endofpacket    (cpu_instruction_manager_rd_limiter_rsp_src_endofpacket),   //   input,    width = 1,                 .endofpacket
		.read_rp_ready          (cpu_instruction_manager_rd_limiter_rsp_src_ready),         //  output,    width = 1,                 .ready
		.awid                   (cpu_instruction_manager_translator_m0_awid),               //   input,    width = 1, altera_axi_slave.awid
		.awaddr                 (cpu_instruction_manager_translator_m0_awaddr),             //   input,   width = 32,                 .awaddr
		.awlen                  (cpu_instruction_manager_translator_m0_awlen),              //   input,    width = 8,                 .awlen
		.awsize                 (cpu_instruction_manager_translator_m0_awsize),             //   input,    width = 3,                 .awsize
		.awburst                (cpu_instruction_manager_translator_m0_awburst),            //   input,    width = 2,                 .awburst
		.awlock                 (cpu_instruction_manager_translator_m0_awlock),             //   input,    width = 1,                 .awlock
		.awcache                (cpu_instruction_manager_translator_m0_awcache),            //   input,    width = 4,                 .awcache
		.awprot                 (cpu_instruction_manager_translator_m0_awprot),             //   input,    width = 3,                 .awprot
		.awuser                 (cpu_instruction_manager_translator_m0_awuser),             //   input,    width = 1,                 .awuser
		.awqos                  (cpu_instruction_manager_translator_m0_awqos),              //   input,    width = 4,                 .awqos
		.awregion               (cpu_instruction_manager_translator_m0_awregion),           //   input,    width = 4,                 .awregion
		.awvalid                (cpu_instruction_manager_translator_m0_awvalid),            //   input,    width = 1,                 .awvalid
		.awready                (cpu_instruction_manager_translator_m0_awready),            //  output,    width = 1,                 .awready
		.wdata                  (cpu_instruction_manager_translator_m0_wdata),              //   input,   width = 32,                 .wdata
		.wstrb                  (cpu_instruction_manager_translator_m0_wstrb),              //   input,    width = 4,                 .wstrb
		.wlast                  (cpu_instruction_manager_translator_m0_wlast),              //   input,    width = 1,                 .wlast
		.wvalid                 (cpu_instruction_manager_translator_m0_wvalid),             //   input,    width = 1,                 .wvalid
		.wuser                  (cpu_instruction_manager_translator_m0_wuser),              //   input,    width = 1,                 .wuser
		.wready                 (cpu_instruction_manager_translator_m0_wready),             //  output,    width = 1,                 .wready
		.bid                    (cpu_instruction_manager_translator_m0_bid),                //  output,    width = 1,                 .bid
		.bresp                  (cpu_instruction_manager_translator_m0_bresp),              //  output,    width = 2,                 .bresp
		.buser                  (cpu_instruction_manager_translator_m0_buser),              //  output,    width = 1,                 .buser
		.bvalid                 (cpu_instruction_manager_translator_m0_bvalid),             //  output,    width = 1,                 .bvalid
		.bready                 (cpu_instruction_manager_translator_m0_bready),             //   input,    width = 1,                 .bready
		.arid                   (cpu_instruction_manager_translator_m0_arid),               //   input,    width = 1,                 .arid
		.araddr                 (cpu_instruction_manager_translator_m0_araddr),             //   input,   width = 32,                 .araddr
		.arlen                  (cpu_instruction_manager_translator_m0_arlen),              //   input,    width = 8,                 .arlen
		.arsize                 (cpu_instruction_manager_translator_m0_arsize),             //   input,    width = 3,                 .arsize
		.arburst                (cpu_instruction_manager_translator_m0_arburst),            //   input,    width = 2,                 .arburst
		.arlock                 (cpu_instruction_manager_translator_m0_arlock),             //   input,    width = 1,                 .arlock
		.arcache                (cpu_instruction_manager_translator_m0_arcache),            //   input,    width = 4,                 .arcache
		.arprot                 (cpu_instruction_manager_translator_m0_arprot),             //   input,    width = 3,                 .arprot
		.aruser                 (cpu_instruction_manager_translator_m0_aruser),             //   input,    width = 1,                 .aruser
		.arqos                  (cpu_instruction_manager_translator_m0_arqos),              //   input,    width = 4,                 .arqos
		.arregion               (cpu_instruction_manager_translator_m0_arregion),           //   input,    width = 4,                 .arregion
		.arvalid                (cpu_instruction_manager_translator_m0_arvalid),            //   input,    width = 1,                 .arvalid
		.arready                (cpu_instruction_manager_translator_m0_arready),            //  output,    width = 1,                 .arready
		.rid                    (cpu_instruction_manager_translator_m0_rid),                //  output,    width = 1,                 .rid
		.rdata                  (cpu_instruction_manager_translator_m0_rdata),              //  output,   width = 32,                 .rdata
		.rresp                  (cpu_instruction_manager_translator_m0_rresp),              //  output,    width = 2,                 .rresp
		.rlast                  (cpu_instruction_manager_translator_m0_rlast),              //  output,    width = 1,                 .rlast
		.rvalid                 (cpu_instruction_manager_translator_m0_rvalid),             //  output,    width = 1,                 .rvalid
		.rready                 (cpu_instruction_manager_translator_m0_rready),             //   input,    width = 1,                 .rready
		.ruser                  (cpu_instruction_manager_translator_m0_ruser),              //  output,    width = 1,                 .ruser
		.awuser_addrchk         (1'b0),                                                     // (terminated),                                
		.awuser_sai             (1'b0),                                                     // (terminated),                                
		.wuser_datachk          (4'b0000),                                                  // (terminated),                                
		.wuser_data             (1'b0),                                                     // (terminated),                                
		.wuser_poison           (1'b0),                                                     // (terminated),                                
		.aruser_addrchk         (1'b0),                                                     // (terminated),                                
		.aruser_sai             (1'b0),                                                     // (terminated),                                
		.ruser_datachk          (),                                                         // (terminated),                                
		.ruser_data             (),                                                         // (terminated),                                
		.ruser_poison           (),                                                         // (terminated),                                
		.wid                    (1'b0),                                                     // (terminated),                                
		.arsnoop                (4'b0000),                                                  // (terminated),                                
		.ardomain               (2'b00),                                                    // (terminated),                                
		.arbar                  (2'b00),                                                    // (terminated),                                
		.awsnoop                (3'b000),                                                   // (terminated),                                
		.awdomain               (2'b00),                                                    // (terminated),                                
		.awbar                  (2'b00),                                                    // (terminated),                                
		.awunique               (1'b0)                                                      // (terminated),                                
	);

	sys_altera_merlin_slave_agent_1921_b6r3djy #(
		.PKT_ORI_BURST_SIZE_H      (122),
		.PKT_ORI_BURST_SIZE_L      (120),
		.PKT_RESPONSE_STATUS_H     (119),
		.PKT_RESPONSE_STATUS_L     (118),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (113),
		.PKT_PROTECTION_L          (111),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (85),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (104),
		.PKT_DEST_ID_H             (109),
		.PKT_DEST_ID_L             (107),
		.PKT_POISON_H              (132),
		.PKT_POISON_L              (132),
		.PKT_DATACHK_H             (133),
		.PKT_DATACHK_L             (133),
		.PKT_SAI_H                 (137),
		.PKT_SAI_L                 (137),
		.PKT_ADDRCHK_H             (136),
		.PKT_ADDRCHK_L             (135),
		.PKT_USER_DATA_H           (134),
		.PKT_USER_DATA_L           (134),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (144),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.USE_MEMORY_BLOCKS         (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0),
		.USE_PKT_DATACHK           (0),
		.ROLE_BASED_USER           (0)
	) jtag_uart_avalon_jtag_slave_agent (
		.clk                     (clock_in_out_clk_clk),                                            //   input,    width = 1,             clk.clk
		.reset                   (cpu_reset_reset_bridge_in_reset_reset),                           //   input,    width = 1,       clk_reset.reset
		.m0_address              (jtag_uart_avalon_jtag_slave_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),                 //  output,    width = 3,                .burstcount
		.m0_byteenable           (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (jtag_uart_avalon_jtag_slave_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (jtag_uart_avalon_jtag_slave_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (jtag_uart_avalon_jtag_slave_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (jtag_uart_avalon_jtag_slave_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (jtag_uart_avalon_jtag_slave_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (jtag_uart_avalon_jtag_slave_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (jtag_uart_avalon_jtag_slave_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (jtag_uart_avalon_jtag_slave_agent_rp_data),                       //  output,  width = 144,                .data
		.rp_startofpacket        (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (jtag_uart_avalon_jtag_slave_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (jtag_uart_avalon_jtag_slave_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (jtag_uart_avalon_jtag_slave_burst_adapter_source0_data),          //   input,  width = 144,                .data
		.cp_startofpacket        (jtag_uart_avalon_jtag_slave_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (jtag_uart_avalon_jtag_slave_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (jtag_uart_avalon_jtag_slave_burst_adapter_source0_channel),       //   input,    width = 5,                .channel
		.rf_sink_ready           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),             //   input,  width = 145,                .data
		.rf_source_ready         (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (jtag_uart_avalon_jtag_slave_agent_rf_source_data),                //  output,  width = 145,                .data
		.rdata_fifo_sink_ready   (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                           // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                            // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                             // (terminated),                               
	);

	sys_altera_avalon_sc_fifo_1932_5j7ufsq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (145),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.MEM_TYPE            ("M20K"),
		.SYNC_RESET          (0)
	) jtag_uart_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (clock_in_out_clk_clk),                                         //   input,    width = 1,       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),                        //   input,    width = 1, clk_reset.reset
		.in_data           (jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //   input,  width = 145,        in.data
		.in_valid          (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //  output,  width = 145,       out.data
		.out_valid         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated),                         
		.csr_read          (1'b0),                                                         // (terminated),                         
		.csr_write         (1'b0),                                                         // (terminated),                         
		.csr_readdata      (),                                                             // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated),                         
		.almost_full_data  (),                                                             // (terminated),                         
		.almost_empty_data (),                                                             // (terminated),                         
		.in_empty          (1'b0),                                                         // (terminated),                         
		.out_empty         (),                                                             // (terminated),                         
		.in_error          (1'b0),                                                         // (terminated),                         
		.out_error         (),                                                             // (terminated),                         
		.in_channel        (1'b0),                                                         // (terminated),                         
		.out_channel       ()                                                              // (terminated),                         
	);

	sys_altera_avalon_sc_fifo_1932_5j7ufsq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.MEM_TYPE            ("M20K"),
		.SYNC_RESET          (0)
	) jtag_uart_avalon_jtag_slave_agent_rdata_fifo (
		.clk               (clock_in_out_clk_clk),                                   //   input,   width = 1,       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),                  //   input,   width = 1, clk_reset.reset
		.in_data           (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),  //   input,  width = 34,        in.data
		.in_valid          (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid), //   input,   width = 1,          .valid
		.in_ready          (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready), //  output,   width = 1,          .ready
		.out_data          (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_data),  //  output,  width = 34,       out.data
		.out_valid         (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_valid), //  output,   width = 1,          .valid
		.out_ready         (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_ready), //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                  // (terminated),                        
		.csr_read          (1'b0),                                                   // (terminated),                        
		.csr_write         (1'b0),                                                   // (terminated),                        
		.csr_readdata      (),                                                       // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated),                        
		.almost_full_data  (),                                                       // (terminated),                        
		.almost_empty_data (),                                                       // (terminated),                        
		.in_startofpacket  (1'b0),                                                   // (terminated),                        
		.in_endofpacket    (1'b0),                                                   // (terminated),                        
		.out_startofpacket (),                                                       // (terminated),                        
		.out_endofpacket   (),                                                       // (terminated),                        
		.in_empty          (1'b0),                                                   // (terminated),                        
		.out_empty         (),                                                       // (terminated),                        
		.in_error          (1'b0),                                                   // (terminated),                        
		.out_error         (),                                                       // (terminated),                        
		.in_channel        (1'b0),                                                   // (terminated),                        
		.out_channel       ()                                                        // (terminated),                        
	);

	sys_altera_merlin_slave_agent_1921_b6r3djy #(
		.PKT_ORI_BURST_SIZE_H      (122),
		.PKT_ORI_BURST_SIZE_L      (120),
		.PKT_RESPONSE_STATUS_H     (119),
		.PKT_RESPONSE_STATUS_L     (118),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (113),
		.PKT_PROTECTION_L          (111),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (85),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (104),
		.PKT_DEST_ID_H             (109),
		.PKT_DEST_ID_L             (107),
		.PKT_POISON_H              (132),
		.PKT_POISON_L              (132),
		.PKT_DATACHK_H             (133),
		.PKT_DATACHK_L             (133),
		.PKT_SAI_H                 (137),
		.PKT_SAI_L                 (137),
		.PKT_ADDRCHK_H             (136),
		.PKT_ADDRCHK_L             (135),
		.PKT_USER_DATA_H           (134),
		.PKT_USER_DATA_L           (134),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (144),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.USE_MEMORY_BLOCKS         (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0),
		.USE_PKT_DATACHK           (0),
		.ROLE_BASED_USER           (0)
	) sysid_qsys_0_control_slave_agent (
		.clk                     (clock_in_out_clk_clk),                                           //   input,    width = 1,             clk.clk
		.reset                   (cpu_reset_reset_bridge_in_reset_reset),                          //   input,    width = 1,       clk_reset.reset
		.m0_address              (sysid_qsys_0_control_slave_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (sysid_qsys_0_control_slave_agent_m0_burstcount),                 //  output,    width = 3,                .burstcount
		.m0_byteenable           (sysid_qsys_0_control_slave_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (sysid_qsys_0_control_slave_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (sysid_qsys_0_control_slave_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (sysid_qsys_0_control_slave_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (sysid_qsys_0_control_slave_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (sysid_qsys_0_control_slave_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (sysid_qsys_0_control_slave_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (sysid_qsys_0_control_slave_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (sysid_qsys_0_control_slave_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (sysid_qsys_0_control_slave_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (sysid_qsys_0_control_slave_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (sysid_qsys_0_control_slave_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (sysid_qsys_0_control_slave_agent_rp_data),                       //  output,  width = 144,                .data
		.rp_startofpacket        (sysid_qsys_0_control_slave_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (sysid_qsys_0_control_slave_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (sysid_qsys_0_control_slave_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (sysid_qsys_0_control_slave_burst_adapter_source0_data),          //   input,  width = 144,                .data
		.cp_startofpacket        (sysid_qsys_0_control_slave_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (sysid_qsys_0_control_slave_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (sysid_qsys_0_control_slave_burst_adapter_source0_channel),       //   input,    width = 5,                .channel
		.rf_sink_ready           (sysid_qsys_0_control_slave_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (sysid_qsys_0_control_slave_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (sysid_qsys_0_control_slave_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (sysid_qsys_0_control_slave_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (sysid_qsys_0_control_slave_agent_rsp_fifo_out_data),             //   input,  width = 145,                .data
		.rf_source_ready         (sysid_qsys_0_control_slave_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (sysid_qsys_0_control_slave_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (sysid_qsys_0_control_slave_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (sysid_qsys_0_control_slave_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (sysid_qsys_0_control_slave_agent_rf_source_data),                //  output,  width = 145,                .data
		.rdata_fifo_sink_ready   (sysid_qsys_0_control_slave_agent_rdata_fifo_out_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (sysid_qsys_0_control_slave_agent_rdata_fifo_out_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (sysid_qsys_0_control_slave_agent_rdata_fifo_out_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (sysid_qsys_0_control_slave_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sysid_qsys_0_control_slave_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (sysid_qsys_0_control_slave_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                          // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                           // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                            // (terminated),                               
	);

	sys_altera_avalon_sc_fifo_1932_5j7ufsq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (145),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.MEM_TYPE            ("M20K"),
		.SYNC_RESET          (0)
	) sysid_qsys_0_control_slave_agent_rsp_fifo (
		.clk               (clock_in_out_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),                       //   input,    width = 1, clk_reset.reset
		.in_data           (sysid_qsys_0_control_slave_agent_rf_source_data),             //   input,  width = 145,        in.data
		.in_valid          (sysid_qsys_0_control_slave_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (sysid_qsys_0_control_slave_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (sysid_qsys_0_control_slave_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (sysid_qsys_0_control_slave_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (sysid_qsys_0_control_slave_agent_rsp_fifo_out_data),          //  output,  width = 145,       out.data
		.out_valid         (sysid_qsys_0_control_slave_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (sysid_qsys_0_control_slave_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (sysid_qsys_0_control_slave_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (sysid_qsys_0_control_slave_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated),                         
		.csr_read          (1'b0),                                                        // (terminated),                         
		.csr_write         (1'b0),                                                        // (terminated),                         
		.csr_readdata      (),                                                            // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated),                         
		.almost_full_data  (),                                                            // (terminated),                         
		.almost_empty_data (),                                                            // (terminated),                         
		.in_empty          (1'b0),                                                        // (terminated),                         
		.out_empty         (),                                                            // (terminated),                         
		.in_error          (1'b0),                                                        // (terminated),                         
		.out_error         (),                                                            // (terminated),                         
		.in_channel        (1'b0),                                                        // (terminated),                         
		.out_channel       ()                                                             // (terminated),                         
	);

	sys_altera_avalon_sc_fifo_1932_5j7ufsq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.MEM_TYPE            ("M20K"),
		.SYNC_RESET          (0)
	) sysid_qsys_0_control_slave_agent_rdata_fifo (
		.clk               (clock_in_out_clk_clk),                                  //   input,   width = 1,       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),                 //   input,   width = 1, clk_reset.reset
		.in_data           (sysid_qsys_0_control_slave_agent_rdata_fifo_src_data),  //   input,  width = 34,        in.data
		.in_valid          (sysid_qsys_0_control_slave_agent_rdata_fifo_src_valid), //   input,   width = 1,          .valid
		.in_ready          (sysid_qsys_0_control_slave_agent_rdata_fifo_src_ready), //  output,   width = 1,          .ready
		.out_data          (sysid_qsys_0_control_slave_agent_rdata_fifo_out_data),  //  output,  width = 34,       out.data
		.out_valid         (sysid_qsys_0_control_slave_agent_rdata_fifo_out_valid), //  output,   width = 1,          .valid
		.out_ready         (sysid_qsys_0_control_slave_agent_rdata_fifo_out_ready), //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                 // (terminated),                        
		.csr_read          (1'b0),                                                  // (terminated),                        
		.csr_write         (1'b0),                                                  // (terminated),                        
		.csr_readdata      (),                                                      // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated),                        
		.almost_full_data  (),                                                      // (terminated),                        
		.almost_empty_data (),                                                      // (terminated),                        
		.in_startofpacket  (1'b0),                                                  // (terminated),                        
		.in_endofpacket    (1'b0),                                                  // (terminated),                        
		.out_startofpacket (),                                                      // (terminated),                        
		.out_endofpacket   (),                                                      // (terminated),                        
		.in_empty          (1'b0),                                                  // (terminated),                        
		.out_empty         (),                                                      // (terminated),                        
		.in_error          (1'b0),                                                  // (terminated),                        
		.out_error         (),                                                      // (terminated),                        
		.in_channel        (1'b0),                                                  // (terminated),                        
		.out_channel       ()                                                       // (terminated),                        
	);

	sys_altera_merlin_slave_agent_1921_b6r3djy #(
		.PKT_ORI_BURST_SIZE_H      (122),
		.PKT_ORI_BURST_SIZE_L      (120),
		.PKT_RESPONSE_STATUS_H     (119),
		.PKT_RESPONSE_STATUS_L     (118),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (113),
		.PKT_PROTECTION_L          (111),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (85),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (104),
		.PKT_DEST_ID_H             (109),
		.PKT_DEST_ID_L             (107),
		.PKT_POISON_H              (132),
		.PKT_POISON_L              (132),
		.PKT_DATACHK_H             (133),
		.PKT_DATACHK_L             (133),
		.PKT_SAI_H                 (137),
		.PKT_SAI_L                 (137),
		.PKT_ADDRCHK_H             (136),
		.PKT_ADDRCHK_L             (135),
		.PKT_USER_DATA_H           (134),
		.PKT_USER_DATA_L           (134),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (144),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.USE_MEMORY_BLOCKS         (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0),
		.USE_PKT_DATACHK           (0),
		.ROLE_BASED_USER           (0)
	) cpu_dm_agent_agent (
		.clk                     (clock_in_out_clk_clk),                             //   input,    width = 1,             clk.clk
		.reset                   (cpu_reset_reset_bridge_in_reset_reset),            //   input,    width = 1,       clk_reset.reset
		.m0_address              (cpu_dm_agent_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (cpu_dm_agent_agent_m0_burstcount),                 //  output,    width = 3,                .burstcount
		.m0_byteenable           (cpu_dm_agent_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (cpu_dm_agent_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (cpu_dm_agent_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (cpu_dm_agent_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (cpu_dm_agent_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (cpu_dm_agent_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (cpu_dm_agent_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (cpu_dm_agent_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (cpu_dm_agent_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (cpu_dm_agent_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (cpu_dm_agent_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (cpu_dm_agent_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (cpu_dm_agent_agent_rp_data),                       //  output,  width = 144,                .data
		.rp_startofpacket        (cpu_dm_agent_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (cpu_dm_agent_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (cpu_dm_agent_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (cpu_dm_agent_burst_adapter_source0_data),          //   input,  width = 144,                .data
		.cp_startofpacket        (cpu_dm_agent_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cpu_dm_agent_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (cpu_dm_agent_burst_adapter_source0_channel),       //   input,    width = 5,                .channel
		.rf_sink_ready           (cpu_dm_agent_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (cpu_dm_agent_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (cpu_dm_agent_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (cpu_dm_agent_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (cpu_dm_agent_agent_rsp_fifo_out_data),             //   input,  width = 145,                .data
		.rf_source_ready         (cpu_dm_agent_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (cpu_dm_agent_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (cpu_dm_agent_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (cpu_dm_agent_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (cpu_dm_agent_agent_rf_source_data),                //  output,  width = 145,                .data
		.rdata_fifo_sink_ready   (cpu_dm_agent_agent_rdata_fifo_out_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (cpu_dm_agent_agent_rdata_fifo_out_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (cpu_dm_agent_agent_rdata_fifo_out_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (cpu_dm_agent_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (cpu_dm_agent_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (cpu_dm_agent_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                            // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                             // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                              // (terminated),                               
	);

	sys_altera_avalon_sc_fifo_1932_5j7ufsq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (145),
		.FIFO_DEPTH          (3),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.MEM_TYPE            ("M20K"),
		.SYNC_RESET          (0)
	) cpu_dm_agent_agent_rsp_fifo (
		.clk               (clock_in_out_clk_clk),                          //   input,    width = 1,       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),         //   input,    width = 1, clk_reset.reset
		.in_data           (cpu_dm_agent_agent_rf_source_data),             //   input,  width = 145,        in.data
		.in_valid          (cpu_dm_agent_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (cpu_dm_agent_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (cpu_dm_agent_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (cpu_dm_agent_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (cpu_dm_agent_agent_rsp_fifo_out_data),          //  output,  width = 145,       out.data
		.out_valid         (cpu_dm_agent_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (cpu_dm_agent_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (cpu_dm_agent_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (cpu_dm_agent_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                         // (terminated),                         
		.csr_read          (1'b0),                                          // (terminated),                         
		.csr_write         (1'b0),                                          // (terminated),                         
		.csr_readdata      (),                                              // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated),                         
		.almost_full_data  (),                                              // (terminated),                         
		.almost_empty_data (),                                              // (terminated),                         
		.in_empty          (1'b0),                                          // (terminated),                         
		.out_empty         (),                                              // (terminated),                         
		.in_error          (1'b0),                                          // (terminated),                         
		.out_error         (),                                              // (terminated),                         
		.in_channel        (1'b0),                                          // (terminated),                         
		.out_channel       ()                                               // (terminated),                         
	);

	sys_altera_avalon_sc_fifo_1932_5j7ufsq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (3),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.MEM_TYPE            ("M20K"),
		.SYNC_RESET          (0)
	) cpu_dm_agent_agent_rdata_fifo (
		.clk               (clock_in_out_clk_clk),                    //   input,   width = 1,       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),   //   input,   width = 1, clk_reset.reset
		.in_data           (cpu_dm_agent_agent_rdata_fifo_src_data),  //   input,  width = 34,        in.data
		.in_valid          (cpu_dm_agent_agent_rdata_fifo_src_valid), //   input,   width = 1,          .valid
		.in_ready          (cpu_dm_agent_agent_rdata_fifo_src_ready), //  output,   width = 1,          .ready
		.out_data          (cpu_dm_agent_agent_rdata_fifo_out_data),  //  output,  width = 34,       out.data
		.out_valid         (cpu_dm_agent_agent_rdata_fifo_out_valid), //  output,   width = 1,          .valid
		.out_ready         (cpu_dm_agent_agent_rdata_fifo_out_ready), //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                   // (terminated),                        
		.csr_read          (1'b0),                                    // (terminated),                        
		.csr_write         (1'b0),                                    // (terminated),                        
		.csr_readdata      (),                                        // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),    // (terminated),                        
		.almost_full_data  (),                                        // (terminated),                        
		.almost_empty_data (),                                        // (terminated),                        
		.in_startofpacket  (1'b0),                                    // (terminated),                        
		.in_endofpacket    (1'b0),                                    // (terminated),                        
		.out_startofpacket (),                                        // (terminated),                        
		.out_endofpacket   (),                                        // (terminated),                        
		.in_empty          (1'b0),                                    // (terminated),                        
		.out_empty         (),                                        // (terminated),                        
		.in_error          (1'b0),                                    // (terminated),                        
		.out_error         (),                                        // (terminated),                        
		.in_channel        (1'b0),                                    // (terminated),                        
		.out_channel       ()                                         // (terminated),                        
	);

	sys_altera_merlin_slave_agent_1921_b6r3djy #(
		.PKT_ORI_BURST_SIZE_H      (122),
		.PKT_ORI_BURST_SIZE_L      (120),
		.PKT_RESPONSE_STATUS_H     (119),
		.PKT_RESPONSE_STATUS_L     (118),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (113),
		.PKT_PROTECTION_L          (111),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (85),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (104),
		.PKT_DEST_ID_H             (109),
		.PKT_DEST_ID_L             (107),
		.PKT_POISON_H              (132),
		.PKT_POISON_L              (132),
		.PKT_DATACHK_H             (133),
		.PKT_DATACHK_L             (133),
		.PKT_SAI_H                 (137),
		.PKT_SAI_L                 (137),
		.PKT_ADDRCHK_H             (136),
		.PKT_ADDRCHK_L             (135),
		.PKT_USER_DATA_H           (134),
		.PKT_USER_DATA_L           (134),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (144),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.USE_MEMORY_BLOCKS         (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0),
		.USE_PKT_DATACHK           (0),
		.ROLE_BASED_USER           (0)
	) ram_s1_agent (
		.clk                     (clock_in_out_clk_clk),                       //   input,    width = 1,             clk.clk
		.reset                   (cpu_reset_reset_bridge_in_reset_reset),      //   input,    width = 1,       clk_reset.reset
		.m0_address              (ram_s1_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (ram_s1_agent_m0_burstcount),                 //  output,    width = 3,                .burstcount
		.m0_byteenable           (ram_s1_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (ram_s1_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (ram_s1_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (ram_s1_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (ram_s1_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (ram_s1_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (ram_s1_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (ram_s1_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (ram_s1_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (ram_s1_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (ram_s1_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (ram_s1_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (ram_s1_agent_rp_data),                       //  output,  width = 144,                .data
		.rp_startofpacket        (ram_s1_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (ram_s1_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (ram_s1_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (ram_s1_burst_adapter_source0_data),          //   input,  width = 144,                .data
		.cp_startofpacket        (ram_s1_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (ram_s1_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (ram_s1_burst_adapter_source0_channel),       //   input,    width = 5,                .channel
		.rf_sink_ready           (ram_s1_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (ram_s1_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (ram_s1_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (ram_s1_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (ram_s1_agent_rsp_fifo_out_data),             //   input,  width = 145,                .data
		.rf_source_ready         (ram_s1_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (ram_s1_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (ram_s1_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (ram_s1_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (ram_s1_agent_rf_source_data),                //  output,  width = 145,                .data
		.rdata_fifo_sink_ready   (ram_s1_agent_rdata_fifo_out_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (ram_s1_agent_rdata_fifo_out_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (ram_s1_agent_rdata_fifo_out_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (ram_s1_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ram_s1_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (ram_s1_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                      // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                       // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                        // (terminated),                               
	);

	sys_altera_avalon_sc_fifo_1932_5j7ufsq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (145),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.MEM_TYPE            ("M20K"),
		.SYNC_RESET          (0)
	) ram_s1_agent_rsp_fifo (
		.clk               (clock_in_out_clk_clk),                    //   input,    width = 1,       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),   //   input,    width = 1, clk_reset.reset
		.in_data           (ram_s1_agent_rf_source_data),             //   input,  width = 145,        in.data
		.in_valid          (ram_s1_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (ram_s1_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (ram_s1_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (ram_s1_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (ram_s1_agent_rsp_fifo_out_data),          //  output,  width = 145,       out.data
		.out_valid         (ram_s1_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (ram_s1_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (ram_s1_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (ram_s1_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                   // (terminated),                         
		.csr_read          (1'b0),                                    // (terminated),                         
		.csr_write         (1'b0),                                    // (terminated),                         
		.csr_readdata      (),                                        // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),    // (terminated),                         
		.almost_full_data  (),                                        // (terminated),                         
		.almost_empty_data (),                                        // (terminated),                         
		.in_empty          (1'b0),                                    // (terminated),                         
		.out_empty         (),                                        // (terminated),                         
		.in_error          (1'b0),                                    // (terminated),                         
		.out_error         (),                                        // (terminated),                         
		.in_channel        (1'b0),                                    // (terminated),                         
		.out_channel       ()                                         // (terminated),                         
	);

	sys_altera_avalon_sc_fifo_1932_5j7ufsq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.MEM_TYPE            ("M20K"),
		.SYNC_RESET          (0)
	) ram_s1_agent_rdata_fifo (
		.clk               (clock_in_out_clk_clk),                  //   input,   width = 1,       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.in_data           (ram_s1_agent_rdata_fifo_src_data),      //   input,  width = 34,        in.data
		.in_valid          (ram_s1_agent_rdata_fifo_src_valid),     //   input,   width = 1,          .valid
		.in_ready          (ram_s1_agent_rdata_fifo_src_ready),     //  output,   width = 1,          .ready
		.out_data          (ram_s1_agent_rdata_fifo_out_data),      //  output,  width = 34,       out.data
		.out_valid         (ram_s1_agent_rdata_fifo_out_valid),     //  output,   width = 1,          .valid
		.out_ready         (ram_s1_agent_rdata_fifo_out_ready),     //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                 // (terminated),                        
		.csr_read          (1'b0),                                  // (terminated),                        
		.csr_write         (1'b0),                                  // (terminated),                        
		.csr_readdata      (),                                      // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),  // (terminated),                        
		.almost_full_data  (),                                      // (terminated),                        
		.almost_empty_data (),                                      // (terminated),                        
		.in_startofpacket  (1'b0),                                  // (terminated),                        
		.in_endofpacket    (1'b0),                                  // (terminated),                        
		.out_startofpacket (),                                      // (terminated),                        
		.out_endofpacket   (),                                      // (terminated),                        
		.in_empty          (1'b0),                                  // (terminated),                        
		.out_empty         (),                                      // (terminated),                        
		.in_error          (1'b0),                                  // (terminated),                        
		.out_error         (),                                      // (terminated),                        
		.in_channel        (1'b0),                                  // (terminated),                        
		.out_channel       ()                                       // (terminated),                        
	);

	sys_altera_merlin_slave_agent_1921_b6r3djy #(
		.PKT_ORI_BURST_SIZE_H      (122),
		.PKT_ORI_BURST_SIZE_L      (120),
		.PKT_RESPONSE_STATUS_H     (119),
		.PKT_RESPONSE_STATUS_L     (118),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (113),
		.PKT_PROTECTION_L          (111),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (85),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (104),
		.PKT_DEST_ID_H             (109),
		.PKT_DEST_ID_L             (107),
		.PKT_POISON_H              (132),
		.PKT_POISON_L              (132),
		.PKT_DATACHK_H             (133),
		.PKT_DATACHK_L             (133),
		.PKT_SAI_H                 (137),
		.PKT_SAI_L                 (137),
		.PKT_ADDRCHK_H             (136),
		.PKT_ADDRCHK_L             (135),
		.PKT_USER_DATA_H           (134),
		.PKT_USER_DATA_L           (134),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (144),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.USE_MEMORY_BLOCKS         (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0),
		.USE_PKT_DATACHK           (0),
		.ROLE_BASED_USER           (0)
	) cpu_timer_sw_agent_agent (
		.clk                     (clock_in_out_clk_clk),                                   //   input,    width = 1,             clk.clk
		.reset                   (cpu_reset_reset_bridge_in_reset_reset),                  //   input,    width = 1,       clk_reset.reset
		.m0_address              (cpu_timer_sw_agent_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (cpu_timer_sw_agent_agent_m0_burstcount),                 //  output,    width = 3,                .burstcount
		.m0_byteenable           (cpu_timer_sw_agent_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (cpu_timer_sw_agent_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (cpu_timer_sw_agent_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (cpu_timer_sw_agent_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (cpu_timer_sw_agent_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (cpu_timer_sw_agent_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (cpu_timer_sw_agent_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (cpu_timer_sw_agent_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (cpu_timer_sw_agent_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (cpu_timer_sw_agent_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (cpu_timer_sw_agent_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (cpu_timer_sw_agent_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (cpu_timer_sw_agent_agent_rp_data),                       //  output,  width = 144,                .data
		.rp_startofpacket        (cpu_timer_sw_agent_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (cpu_timer_sw_agent_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (cpu_timer_sw_agent_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (cpu_timer_sw_agent_burst_adapter_source0_data),          //   input,  width = 144,                .data
		.cp_startofpacket        (cpu_timer_sw_agent_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cpu_timer_sw_agent_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (cpu_timer_sw_agent_burst_adapter_source0_channel),       //   input,    width = 5,                .channel
		.rf_sink_ready           (cpu_timer_sw_agent_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (cpu_timer_sw_agent_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (cpu_timer_sw_agent_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (cpu_timer_sw_agent_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (cpu_timer_sw_agent_agent_rsp_fifo_out_data),             //   input,  width = 145,                .data
		.rf_source_ready         (cpu_timer_sw_agent_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (cpu_timer_sw_agent_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (cpu_timer_sw_agent_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (cpu_timer_sw_agent_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (cpu_timer_sw_agent_agent_rf_source_data),                //  output,  width = 145,                .data
		.rdata_fifo_sink_ready   (cpu_timer_sw_agent_agent_rdata_fifo_out_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (cpu_timer_sw_agent_agent_rdata_fifo_out_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (cpu_timer_sw_agent_agent_rdata_fifo_out_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (cpu_timer_sw_agent_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (cpu_timer_sw_agent_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (cpu_timer_sw_agent_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                  // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                   // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                    // (terminated),                               
	);

	sys_altera_avalon_sc_fifo_1932_5j7ufsq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (145),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.MEM_TYPE            ("M20K"),
		.SYNC_RESET          (0)
	) cpu_timer_sw_agent_agent_rsp_fifo (
		.clk               (clock_in_out_clk_clk),                                //   input,    width = 1,       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),               //   input,    width = 1, clk_reset.reset
		.in_data           (cpu_timer_sw_agent_agent_rf_source_data),             //   input,  width = 145,        in.data
		.in_valid          (cpu_timer_sw_agent_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (cpu_timer_sw_agent_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (cpu_timer_sw_agent_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (cpu_timer_sw_agent_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (cpu_timer_sw_agent_agent_rsp_fifo_out_data),          //  output,  width = 145,       out.data
		.out_valid         (cpu_timer_sw_agent_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (cpu_timer_sw_agent_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (cpu_timer_sw_agent_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (cpu_timer_sw_agent_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                               // (terminated),                         
		.csr_read          (1'b0),                                                // (terminated),                         
		.csr_write         (1'b0),                                                // (terminated),                         
		.csr_readdata      (),                                                    // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated),                         
		.almost_full_data  (),                                                    // (terminated),                         
		.almost_empty_data (),                                                    // (terminated),                         
		.in_empty          (1'b0),                                                // (terminated),                         
		.out_empty         (),                                                    // (terminated),                         
		.in_error          (1'b0),                                                // (terminated),                         
		.out_error         (),                                                    // (terminated),                         
		.in_channel        (1'b0),                                                // (terminated),                         
		.out_channel       ()                                                     // (terminated),                         
	);

	sys_altera_avalon_sc_fifo_1932_5j7ufsq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.MEM_TYPE            ("M20K"),
		.SYNC_RESET          (0)
	) cpu_timer_sw_agent_agent_rdata_fifo (
		.clk               (clock_in_out_clk_clk),                          //   input,   width = 1,       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),         //   input,   width = 1, clk_reset.reset
		.in_data           (cpu_timer_sw_agent_agent_rdata_fifo_src_data),  //   input,  width = 34,        in.data
		.in_valid          (cpu_timer_sw_agent_agent_rdata_fifo_src_valid), //   input,   width = 1,          .valid
		.in_ready          (cpu_timer_sw_agent_agent_rdata_fifo_src_ready), //  output,   width = 1,          .ready
		.out_data          (cpu_timer_sw_agent_agent_rdata_fifo_out_data),  //  output,  width = 34,       out.data
		.out_valid         (cpu_timer_sw_agent_agent_rdata_fifo_out_valid), //  output,   width = 1,          .valid
		.out_ready         (cpu_timer_sw_agent_agent_rdata_fifo_out_ready), //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                         // (terminated),                        
		.csr_read          (1'b0),                                          // (terminated),                        
		.csr_write         (1'b0),                                          // (terminated),                        
		.csr_readdata      (),                                              // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated),                        
		.almost_full_data  (),                                              // (terminated),                        
		.almost_empty_data (),                                              // (terminated),                        
		.in_startofpacket  (1'b0),                                          // (terminated),                        
		.in_endofpacket    (1'b0),                                          // (terminated),                        
		.out_startofpacket (),                                              // (terminated),                        
		.out_endofpacket   (),                                              // (terminated),                        
		.in_empty          (1'b0),                                          // (terminated),                        
		.out_empty         (),                                              // (terminated),                        
		.in_error          (1'b0),                                          // (terminated),                        
		.out_error         (),                                              // (terminated),                        
		.in_channel        (1'b0),                                          // (terminated),                        
		.out_channel       ()                                               // (terminated),                        
	);

	sys_altera_merlin_router_1921_7iqpkva router (
		.sink_ready         (cpu_data_manager_agent_write_cp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (cpu_data_manager_agent_write_cp_valid),         //   input,    width = 1,          .valid
		.sink_data          (cpu_data_manager_agent_write_cp_data),          //   input,  width = 144,          .data
		.sink_startofpacket (cpu_data_manager_agent_write_cp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (cpu_data_manager_agent_write_cp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                          //   input,    width = 1,       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset),         //   input,    width = 1, clk_reset.reset
		.src_ready          (router_src_ready),                              //   input,    width = 1,       src.ready
		.src_valid          (router_src_valid),                              //  output,    width = 1,          .valid
		.src_data           (router_src_data),                               //  output,  width = 144,          .data
		.src_channel        (router_src_channel),                            //  output,    width = 5,          .channel
		.src_startofpacket  (router_src_startofpacket),                      //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                         //  output,    width = 1,          .endofpacket
	);

	sys_altera_merlin_router_1921_7iqpkva router_001 (
		.sink_ready         (cpu_data_manager_agent_read_cp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (cpu_data_manager_agent_read_cp_valid),         //   input,    width = 1,          .valid
		.sink_data          (cpu_data_manager_agent_read_cp_data),          //   input,  width = 144,          .data
		.sink_startofpacket (cpu_data_manager_agent_read_cp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (cpu_data_manager_agent_read_cp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                         //   input,    width = 1,       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset),        //   input,    width = 1, clk_reset.reset
		.src_ready          (router_001_src_ready),                         //   input,    width = 1,       src.ready
		.src_valid          (router_001_src_valid),                         //  output,    width = 1,          .valid
		.src_data           (router_001_src_data),                          //  output,  width = 144,          .data
		.src_channel        (router_001_src_channel),                       //  output,    width = 5,          .channel
		.src_startofpacket  (router_001_src_startofpacket),                 //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                    //  output,    width = 1,          .endofpacket
	);

	sys_altera_merlin_router_1921_ccbe2hi router_002 (
		.sink_ready         (cpu_instruction_manager_agent_write_cp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (cpu_instruction_manager_agent_write_cp_valid),         //   input,    width = 1,          .valid
		.sink_data          (cpu_instruction_manager_agent_write_cp_data),          //   input,  width = 144,          .data
		.sink_startofpacket (cpu_instruction_manager_agent_write_cp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (cpu_instruction_manager_agent_write_cp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                                 //   input,    width = 1,       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset),                //   input,    width = 1, clk_reset.reset
		.src_ready          (router_002_src_ready),                                 //   input,    width = 1,       src.ready
		.src_valid          (router_002_src_valid),                                 //  output,    width = 1,          .valid
		.src_data           (router_002_src_data),                                  //  output,  width = 144,          .data
		.src_channel        (router_002_src_channel),                               //  output,    width = 5,          .channel
		.src_startofpacket  (router_002_src_startofpacket),                         //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                            //  output,    width = 1,          .endofpacket
	);

	sys_altera_merlin_router_1921_ccbe2hi router_003 (
		.sink_ready         (cpu_instruction_manager_agent_read_cp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (cpu_instruction_manager_agent_read_cp_valid),         //   input,    width = 1,          .valid
		.sink_data          (cpu_instruction_manager_agent_read_cp_data),          //   input,  width = 144,          .data
		.sink_startofpacket (cpu_instruction_manager_agent_read_cp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (cpu_instruction_manager_agent_read_cp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                                //   input,    width = 1,       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset),               //   input,    width = 1, clk_reset.reset
		.src_ready          (router_003_src_ready),                                //   input,    width = 1,       src.ready
		.src_valid          (router_003_src_valid),                                //  output,    width = 1,          .valid
		.src_data           (router_003_src_data),                                 //  output,  width = 144,          .data
		.src_channel        (router_003_src_channel),                              //  output,    width = 5,          .channel
		.src_startofpacket  (router_003_src_startofpacket),                        //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                           //  output,    width = 1,          .endofpacket
	);

	sys_altera_merlin_router_1921_7fls4eq router_004 (
		.sink_ready         (jtag_uart_avalon_jtag_slave_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (jtag_uart_avalon_jtag_slave_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (jtag_uart_avalon_jtag_slave_agent_rp_data),          //   input,  width = 144,          .data
		.sink_startofpacket (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset),              //   input,    width = 1, clk_reset.reset
		.src_ready          (router_004_src_ready),                               //   input,    width = 1,       src.ready
		.src_valid          (router_004_src_valid),                               //  output,    width = 1,          .valid
		.src_data           (router_004_src_data),                                //  output,  width = 144,          .data
		.src_channel        (router_004_src_channel),                             //  output,    width = 5,          .channel
		.src_startofpacket  (router_004_src_startofpacket),                       //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                          //  output,    width = 1,          .endofpacket
	);

	sys_altera_merlin_router_1921_7fls4eq router_005 (
		.sink_ready         (sysid_qsys_0_control_slave_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (sysid_qsys_0_control_slave_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (sysid_qsys_0_control_slave_agent_rp_data),          //   input,  width = 144,          .data
		.sink_startofpacket (sysid_qsys_0_control_slave_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (sysid_qsys_0_control_slave_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                              //   input,    width = 1,       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset),             //   input,    width = 1, clk_reset.reset
		.src_ready          (router_005_src_ready),                              //   input,    width = 1,       src.ready
		.src_valid          (router_005_src_valid),                              //  output,    width = 1,          .valid
		.src_data           (router_005_src_data),                               //  output,  width = 144,          .data
		.src_channel        (router_005_src_channel),                            //  output,    width = 5,          .channel
		.src_startofpacket  (router_005_src_startofpacket),                      //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                         //  output,    width = 1,          .endofpacket
	);

	sys_altera_merlin_router_1921_42yp2zy router_006 (
		.sink_ready         (cpu_dm_agent_agent_rp_ready),           //  output,    width = 1,      sink.ready
		.sink_valid         (cpu_dm_agent_agent_rp_valid),           //   input,    width = 1,          .valid
		.sink_data          (cpu_dm_agent_agent_rp_data),            //   input,  width = 144,          .data
		.sink_startofpacket (cpu_dm_agent_agent_rp_startofpacket),   //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (cpu_dm_agent_agent_rp_endofpacket),     //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                  //   input,    width = 1,       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_006_src_ready),                  //   input,    width = 1,       src.ready
		.src_valid          (router_006_src_valid),                  //  output,    width = 1,          .valid
		.src_data           (router_006_src_data),                   //  output,  width = 144,          .data
		.src_channel        (router_006_src_channel),                //  output,    width = 5,          .channel
		.src_startofpacket  (router_006_src_startofpacket),          //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)             //  output,    width = 1,          .endofpacket
	);

	sys_altera_merlin_router_1921_42yp2zy router_007 (
		.sink_ready         (ram_s1_agent_rp_ready),                 //  output,    width = 1,      sink.ready
		.sink_valid         (ram_s1_agent_rp_valid),                 //   input,    width = 1,          .valid
		.sink_data          (ram_s1_agent_rp_data),                  //   input,  width = 144,          .data
		.sink_startofpacket (ram_s1_agent_rp_startofpacket),         //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (ram_s1_agent_rp_endofpacket),           //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                  //   input,    width = 1,       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_007_src_ready),                  //   input,    width = 1,       src.ready
		.src_valid          (router_007_src_valid),                  //  output,    width = 1,          .valid
		.src_data           (router_007_src_data),                   //  output,  width = 144,          .data
		.src_channel        (router_007_src_channel),                //  output,    width = 5,          .channel
		.src_startofpacket  (router_007_src_startofpacket),          //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)             //  output,    width = 1,          .endofpacket
	);

	sys_altera_merlin_router_1921_7fls4eq router_008 (
		.sink_ready         (cpu_timer_sw_agent_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (cpu_timer_sw_agent_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (cpu_timer_sw_agent_agent_rp_data),          //   input,  width = 144,          .data
		.sink_startofpacket (cpu_timer_sw_agent_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (cpu_timer_sw_agent_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                      //   input,    width = 1,       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset),     //   input,    width = 1, clk_reset.reset
		.src_ready          (router_008_src_ready),                      //   input,    width = 1,       src.ready
		.src_valid          (router_008_src_valid),                      //  output,    width = 1,          .valid
		.src_data           (router_008_src_data),                       //  output,  width = 144,          .data
		.src_channel        (router_008_src_channel),                    //  output,    width = 5,          .channel
		.src_startofpacket  (router_008_src_startofpacket),              //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                 //  output,    width = 1,          .endofpacket
	);

	sys_altera_merlin_traffic_limiter_1921_7c7jj4q #(
		.SYNC_RESET                           (0),
		.PKT_DEST_ID_H                        (109),
		.PKT_DEST_ID_L                        (107),
		.PKT_SRC_ID_H                         (106),
		.PKT_SRC_ID_L                         (104),
		.PKT_BYTE_CNT_H                       (84),
		.PKT_BYTE_CNT_L                       (74),
		.PKT_BYTEEN_H                         (35),
		.PKT_BYTEEN_L                         (32),
		.PKT_TRANS_POSTED                     (69),
		.PKT_TRANS_WRITE                      (70),
		.PKT_TRANS_SEQ_H                      (143),
		.PKT_TRANS_SEQ_L                      (140),
		.MAX_OUTSTANDING_RESPONSES            (5),
		.PIPELINED                            (0),
		.ST_DATA_W                            (144),
		.ST_CHANNEL_W                         (5),
		.VALID_WIDTH                          (5),
		.ENFORCE_ORDER                        (1),
		.PREVENT_HAZARDS                      (0),
		.SUPPORTS_POSTED_WRITES               (1),
		.SUPPORTS_NONPOSTED_WRITES            (0),
		.REORDER                              (0),
		.ENABLE_CONCURRENT_SUBORDINATE_ACCESS (0),
		.NO_REPEATED_IDS_BETWEEN_SUBORDINATES (0),
		.ENABLE_OOO                           (0)
	) cpu_instruction_manager_wr_limiter (
		.clk                    (clock_in_out_clk_clk),                                     //   input,    width = 1,       clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset),                    //   input,    width = 1, clk_reset.reset
		.cmd_sink_ready         (router_002_src_ready),                                     //  output,    width = 1,  cmd_sink.ready
		.cmd_sink_valid         (router_002_src_valid),                                     //   input,    width = 1,          .valid
		.cmd_sink_data          (router_002_src_data),                                      //   input,  width = 144,          .data
		.cmd_sink_channel       (router_002_src_channel),                                   //   input,    width = 5,          .channel
		.cmd_sink_startofpacket (router_002_src_startofpacket),                             //   input,    width = 1,          .startofpacket
		.cmd_sink_endofpacket   (router_002_src_endofpacket),                               //   input,    width = 1,          .endofpacket
		.cmd_src_ready          (cpu_instruction_manager_wr_limiter_cmd_src_ready),         //   input,    width = 1,   cmd_src.ready
		.cmd_src_data           (cpu_instruction_manager_wr_limiter_cmd_src_data),          //  output,  width = 144,          .data
		.cmd_src_channel        (cpu_instruction_manager_wr_limiter_cmd_src_channel),       //  output,    width = 5,          .channel
		.cmd_src_startofpacket  (cpu_instruction_manager_wr_limiter_cmd_src_startofpacket), //  output,    width = 1,          .startofpacket
		.cmd_src_endofpacket    (cpu_instruction_manager_wr_limiter_cmd_src_endofpacket),   //  output,    width = 1,          .endofpacket
		.rsp_sink_ready         (rsp_mux_002_src_ready),                                    //  output,    width = 1,  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_002_src_valid),                                    //   input,    width = 1,          .valid
		.rsp_sink_channel       (rsp_mux_002_src_channel),                                  //   input,    width = 5,          .channel
		.rsp_sink_data          (rsp_mux_002_src_data),                                     //   input,  width = 144,          .data
		.rsp_sink_startofpacket (rsp_mux_002_src_startofpacket),                            //   input,    width = 1,          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_002_src_endofpacket),                              //   input,    width = 1,          .endofpacket
		.rsp_src_ready          (cpu_instruction_manager_wr_limiter_rsp_src_ready),         //   input,    width = 1,   rsp_src.ready
		.rsp_src_valid          (cpu_instruction_manager_wr_limiter_rsp_src_valid),         //  output,    width = 1,          .valid
		.rsp_src_data           (cpu_instruction_manager_wr_limiter_rsp_src_data),          //  output,  width = 144,          .data
		.rsp_src_channel        (cpu_instruction_manager_wr_limiter_rsp_src_channel),       //  output,    width = 5,          .channel
		.rsp_src_startofpacket  (cpu_instruction_manager_wr_limiter_rsp_src_startofpacket), //  output,    width = 1,          .startofpacket
		.rsp_src_endofpacket    (cpu_instruction_manager_wr_limiter_rsp_src_endofpacket),   //  output,    width = 1,          .endofpacket
		.cmd_src_valid          (cpu_instruction_manager_wr_limiter_cmd_valid_data)         //  output,    width = 5, cmd_valid.data
	);

	sys_altera_merlin_traffic_limiter_1921_7c7jj4q #(
		.SYNC_RESET                           (0),
		.PKT_DEST_ID_H                        (109),
		.PKT_DEST_ID_L                        (107),
		.PKT_SRC_ID_H                         (106),
		.PKT_SRC_ID_L                         (104),
		.PKT_BYTE_CNT_H                       (84),
		.PKT_BYTE_CNT_L                       (74),
		.PKT_BYTEEN_H                         (35),
		.PKT_BYTEEN_L                         (32),
		.PKT_TRANS_POSTED                     (69),
		.PKT_TRANS_WRITE                      (70),
		.PKT_TRANS_SEQ_H                      (143),
		.PKT_TRANS_SEQ_L                      (140),
		.MAX_OUTSTANDING_RESPONSES            (5),
		.PIPELINED                            (0),
		.ST_DATA_W                            (144),
		.ST_CHANNEL_W                         (5),
		.VALID_WIDTH                          (5),
		.ENFORCE_ORDER                        (1),
		.PREVENT_HAZARDS                      (0),
		.SUPPORTS_POSTED_WRITES               (1),
		.SUPPORTS_NONPOSTED_WRITES            (0),
		.REORDER                              (0),
		.ENABLE_CONCURRENT_SUBORDINATE_ACCESS (0),
		.NO_REPEATED_IDS_BETWEEN_SUBORDINATES (0),
		.ENABLE_OOO                           (0)
	) cpu_instruction_manager_rd_limiter (
		.clk                    (clock_in_out_clk_clk),                                     //   input,    width = 1,       clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset),                    //   input,    width = 1, clk_reset.reset
		.cmd_sink_ready         (router_003_src_ready),                                     //  output,    width = 1,  cmd_sink.ready
		.cmd_sink_valid         (router_003_src_valid),                                     //   input,    width = 1,          .valid
		.cmd_sink_data          (router_003_src_data),                                      //   input,  width = 144,          .data
		.cmd_sink_channel       (router_003_src_channel),                                   //   input,    width = 5,          .channel
		.cmd_sink_startofpacket (router_003_src_startofpacket),                             //   input,    width = 1,          .startofpacket
		.cmd_sink_endofpacket   (router_003_src_endofpacket),                               //   input,    width = 1,          .endofpacket
		.cmd_src_ready          (cpu_instruction_manager_rd_limiter_cmd_src_ready),         //   input,    width = 1,   cmd_src.ready
		.cmd_src_data           (cpu_instruction_manager_rd_limiter_cmd_src_data),          //  output,  width = 144,          .data
		.cmd_src_channel        (cpu_instruction_manager_rd_limiter_cmd_src_channel),       //  output,    width = 5,          .channel
		.cmd_src_startofpacket  (cpu_instruction_manager_rd_limiter_cmd_src_startofpacket), //  output,    width = 1,          .startofpacket
		.cmd_src_endofpacket    (cpu_instruction_manager_rd_limiter_cmd_src_endofpacket),   //  output,    width = 1,          .endofpacket
		.rsp_sink_ready         (rsp_mux_003_src_ready),                                    //  output,    width = 1,  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_003_src_valid),                                    //   input,    width = 1,          .valid
		.rsp_sink_channel       (rsp_mux_003_src_channel),                                  //   input,    width = 5,          .channel
		.rsp_sink_data          (rsp_mux_003_src_data),                                     //   input,  width = 144,          .data
		.rsp_sink_startofpacket (rsp_mux_003_src_startofpacket),                            //   input,    width = 1,          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_003_src_endofpacket),                              //   input,    width = 1,          .endofpacket
		.rsp_src_ready          (cpu_instruction_manager_rd_limiter_rsp_src_ready),         //   input,    width = 1,   rsp_src.ready
		.rsp_src_valid          (cpu_instruction_manager_rd_limiter_rsp_src_valid),         //  output,    width = 1,          .valid
		.rsp_src_data           (cpu_instruction_manager_rd_limiter_rsp_src_data),          //  output,  width = 144,          .data
		.rsp_src_channel        (cpu_instruction_manager_rd_limiter_rsp_src_channel),       //  output,    width = 5,          .channel
		.rsp_src_startofpacket  (cpu_instruction_manager_rd_limiter_rsp_src_startofpacket), //  output,    width = 1,          .startofpacket
		.rsp_src_endofpacket    (cpu_instruction_manager_rd_limiter_rsp_src_endofpacket),   //  output,    width = 1,          .endofpacket
		.cmd_src_valid          (cpu_instruction_manager_rd_limiter_cmd_valid_data)         //  output,    width = 5, cmd_valid.data
	);

	sys_altera_merlin_burst_adapter_1932_yh5s4ha #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (85),
		.PKT_SAI_H                 (89),
		.PKT_SAI_L                 (89),
		.ROLE_BASED_USER           (0),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.PKT_EOP_OOO               (89),
		.PKT_SOP_OOO               (90),
		.ENABLE_OOO                (0),
		.ST_DATA_W                 (144),
		.ST_CHANNEL_W              (5),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) jtag_uart_avalon_jtag_slave_burst_adapter (
		.clk                   (clock_in_out_clk_clk),                                            //   input,    width = 1,       cr0.clk
		.reset                 (cpu_reset_reset_bridge_in_reset_reset),                           //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                                               //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_src_data),                                                //   input,  width = 144,          .data
		.sink0_channel         (cmd_mux_src_channel),                                             //   input,    width = 5,          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                                       //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                                         //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                                               //  output,    width = 1,          .ready
		.source0_valid         (jtag_uart_avalon_jtag_slave_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (jtag_uart_avalon_jtag_slave_burst_adapter_source0_data),          //  output,  width = 144,          .data
		.source0_channel       (jtag_uart_avalon_jtag_slave_burst_adapter_source0_channel),       //  output,    width = 5,          .channel
		.source0_startofpacket (jtag_uart_avalon_jtag_slave_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (jtag_uart_avalon_jtag_slave_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (jtag_uart_avalon_jtag_slave_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	sys_altera_merlin_burst_adapter_1932_yh5s4ha #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (85),
		.PKT_SAI_H                 (89),
		.PKT_SAI_L                 (89),
		.ROLE_BASED_USER           (0),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.PKT_EOP_OOO               (89),
		.PKT_SOP_OOO               (90),
		.ENABLE_OOO                (0),
		.ST_DATA_W                 (144),
		.ST_CHANNEL_W              (5),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) sysid_qsys_0_control_slave_burst_adapter (
		.clk                   (clock_in_out_clk_clk),                                           //   input,    width = 1,       cr0.clk
		.reset                 (cpu_reset_reset_bridge_in_reset_reset),                          //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_001_src_valid),                                          //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_001_src_data),                                           //   input,  width = 144,          .data
		.sink0_channel         (cmd_mux_001_src_channel),                                        //   input,    width = 5,          .channel
		.sink0_startofpacket   (cmd_mux_001_src_startofpacket),                                  //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_001_src_endofpacket),                                    //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_001_src_ready),                                          //  output,    width = 1,          .ready
		.source0_valid         (sysid_qsys_0_control_slave_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (sysid_qsys_0_control_slave_burst_adapter_source0_data),          //  output,  width = 144,          .data
		.source0_channel       (sysid_qsys_0_control_slave_burst_adapter_source0_channel),       //  output,    width = 5,          .channel
		.source0_startofpacket (sysid_qsys_0_control_slave_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (sysid_qsys_0_control_slave_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (sysid_qsys_0_control_slave_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	sys_altera_merlin_burst_adapter_1932_yh5s4ha #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (85),
		.PKT_SAI_H                 (89),
		.PKT_SAI_L                 (89),
		.ROLE_BASED_USER           (0),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.PKT_EOP_OOO               (89),
		.PKT_SOP_OOO               (90),
		.ENABLE_OOO                (0),
		.ST_DATA_W                 (144),
		.ST_CHANNEL_W              (5),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) cpu_dm_agent_burst_adapter (
		.clk                   (clock_in_out_clk_clk),                             //   input,    width = 1,       cr0.clk
		.reset                 (cpu_reset_reset_bridge_in_reset_reset),            //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_002_src_valid),                            //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_002_src_data),                             //   input,  width = 144,          .data
		.sink0_channel         (cmd_mux_002_src_channel),                          //   input,    width = 5,          .channel
		.sink0_startofpacket   (cmd_mux_002_src_startofpacket),                    //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_002_src_endofpacket),                      //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_002_src_ready),                            //  output,    width = 1,          .ready
		.source0_valid         (cpu_dm_agent_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (cpu_dm_agent_burst_adapter_source0_data),          //  output,  width = 144,          .data
		.source0_channel       (cpu_dm_agent_burst_adapter_source0_channel),       //  output,    width = 5,          .channel
		.source0_startofpacket (cpu_dm_agent_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (cpu_dm_agent_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (cpu_dm_agent_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	sys_altera_merlin_burst_adapter_1932_yh5s4ha #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (85),
		.PKT_SAI_H                 (89),
		.PKT_SAI_L                 (89),
		.ROLE_BASED_USER           (0),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.PKT_EOP_OOO               (89),
		.PKT_SOP_OOO               (90),
		.ENABLE_OOO                (0),
		.ST_DATA_W                 (144),
		.ST_CHANNEL_W              (5),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) ram_s1_burst_adapter (
		.clk                   (clock_in_out_clk_clk),                       //   input,    width = 1,       cr0.clk
		.reset                 (cpu_reset_reset_bridge_in_reset_reset),      //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_003_src_valid),                      //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_003_src_data),                       //   input,  width = 144,          .data
		.sink0_channel         (cmd_mux_003_src_channel),                    //   input,    width = 5,          .channel
		.sink0_startofpacket   (cmd_mux_003_src_startofpacket),              //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_003_src_endofpacket),                //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_003_src_ready),                      //  output,    width = 1,          .ready
		.source0_valid         (ram_s1_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (ram_s1_burst_adapter_source0_data),          //  output,  width = 144,          .data
		.source0_channel       (ram_s1_burst_adapter_source0_channel),       //  output,    width = 5,          .channel
		.source0_startofpacket (ram_s1_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (ram_s1_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (ram_s1_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	sys_altera_merlin_burst_adapter_1932_yh5s4ha #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (85),
		.PKT_SAI_H                 (89),
		.PKT_SAI_L                 (89),
		.ROLE_BASED_USER           (0),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.PKT_EOP_OOO               (89),
		.PKT_SOP_OOO               (90),
		.ENABLE_OOO                (0),
		.ST_DATA_W                 (144),
		.ST_CHANNEL_W              (5),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) cpu_timer_sw_agent_burst_adapter (
		.clk                   (clock_in_out_clk_clk),                                   //   input,    width = 1,       cr0.clk
		.reset                 (cpu_reset_reset_bridge_in_reset_reset),                  //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_004_src_valid),                                  //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_004_src_data),                                   //   input,  width = 144,          .data
		.sink0_channel         (cmd_mux_004_src_channel),                                //   input,    width = 5,          .channel
		.sink0_startofpacket   (cmd_mux_004_src_startofpacket),                          //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_004_src_endofpacket),                            //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_004_src_ready),                                  //  output,    width = 1,          .ready
		.source0_valid         (cpu_timer_sw_agent_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (cpu_timer_sw_agent_burst_adapter_source0_data),          //  output,  width = 144,          .data
		.source0_channel       (cpu_timer_sw_agent_burst_adapter_source0_channel),       //  output,    width = 5,          .channel
		.source0_startofpacket (cpu_timer_sw_agent_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (cpu_timer_sw_agent_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (cpu_timer_sw_agent_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	sys_altera_merlin_demultiplexer_1921_k7pyk6y cmd_demux (
		.clk                (clock_in_out_clk_clk),                  //   input,    width = 1,       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_src_ready),                      //  output,    width = 1,      sink.ready
		.sink_channel       (router_src_channel),                    //   input,    width = 5,          .channel
		.sink_data          (router_src_data),                       //   input,  width = 144,          .data
		.sink_startofpacket (router_src_startofpacket),              //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                //   input,    width = 1,          .endofpacket
		.sink_valid         (router_src_valid),                      //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_src0_ready),                  //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                  //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_src0_data),                   //  output,  width = 144,          .data
		.src0_channel       (cmd_demux_src0_channel),                //  output,    width = 5,          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),          //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),            //  output,    width = 1,          .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                  //   input,    width = 1,      src1.ready
		.src1_valid         (cmd_demux_src1_valid),                  //  output,    width = 1,          .valid
		.src1_data          (cmd_demux_src1_data),                   //  output,  width = 144,          .data
		.src1_channel       (cmd_demux_src1_channel),                //  output,    width = 5,          .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),          //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),            //  output,    width = 1,          .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                  //   input,    width = 1,      src2.ready
		.src2_valid         (cmd_demux_src2_valid),                  //  output,    width = 1,          .valid
		.src2_data          (cmd_demux_src2_data),                   //  output,  width = 144,          .data
		.src2_channel       (cmd_demux_src2_channel),                //  output,    width = 5,          .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),          //  output,    width = 1,          .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),            //  output,    width = 1,          .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                  //   input,    width = 1,      src3.ready
		.src3_valid         (cmd_demux_src3_valid),                  //  output,    width = 1,          .valid
		.src3_data          (cmd_demux_src3_data),                   //  output,  width = 144,          .data
		.src3_channel       (cmd_demux_src3_channel),                //  output,    width = 5,          .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),          //  output,    width = 1,          .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket),            //  output,    width = 1,          .endofpacket
		.src4_ready         (cmd_demux_src4_ready),                  //   input,    width = 1,      src4.ready
		.src4_valid         (cmd_demux_src4_valid),                  //  output,    width = 1,          .valid
		.src4_data          (cmd_demux_src4_data),                   //  output,  width = 144,          .data
		.src4_channel       (cmd_demux_src4_channel),                //  output,    width = 5,          .channel
		.src4_startofpacket (cmd_demux_src4_startofpacket),          //  output,    width = 1,          .startofpacket
		.src4_endofpacket   (cmd_demux_src4_endofpacket)             //  output,    width = 1,          .endofpacket
	);

	sys_altera_merlin_demultiplexer_1921_k7pyk6y cmd_demux_001 (
		.clk                (clock_in_out_clk_clk),                  //   input,    width = 1,       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_001_src_ready),                  //  output,    width = 1,      sink.ready
		.sink_channel       (router_001_src_channel),                //   input,    width = 5,          .channel
		.sink_data          (router_001_src_data),                   //   input,  width = 144,          .data
		.sink_startofpacket (router_001_src_startofpacket),          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),            //   input,    width = 1,          .endofpacket
		.sink_valid         (router_001_src_valid),                  //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_001_src0_ready),              //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),              //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_001_src0_data),               //  output,  width = 144,          .data
		.src0_channel       (cmd_demux_001_src0_channel),            //  output,    width = 5,          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),      //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),        //  output,    width = 1,          .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),              //   input,    width = 1,      src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),              //  output,    width = 1,          .valid
		.src1_data          (cmd_demux_001_src1_data),               //  output,  width = 144,          .data
		.src1_channel       (cmd_demux_001_src1_channel),            //  output,    width = 5,          .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),      //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket),        //  output,    width = 1,          .endofpacket
		.src2_ready         (cmd_demux_001_src2_ready),              //   input,    width = 1,      src2.ready
		.src2_valid         (cmd_demux_001_src2_valid),              //  output,    width = 1,          .valid
		.src2_data          (cmd_demux_001_src2_data),               //  output,  width = 144,          .data
		.src2_channel       (cmd_demux_001_src2_channel),            //  output,    width = 5,          .channel
		.src2_startofpacket (cmd_demux_001_src2_startofpacket),      //  output,    width = 1,          .startofpacket
		.src2_endofpacket   (cmd_demux_001_src2_endofpacket),        //  output,    width = 1,          .endofpacket
		.src3_ready         (cmd_demux_001_src3_ready),              //   input,    width = 1,      src3.ready
		.src3_valid         (cmd_demux_001_src3_valid),              //  output,    width = 1,          .valid
		.src3_data          (cmd_demux_001_src3_data),               //  output,  width = 144,          .data
		.src3_channel       (cmd_demux_001_src3_channel),            //  output,    width = 5,          .channel
		.src3_startofpacket (cmd_demux_001_src3_startofpacket),      //  output,    width = 1,          .startofpacket
		.src3_endofpacket   (cmd_demux_001_src3_endofpacket),        //  output,    width = 1,          .endofpacket
		.src4_ready         (cmd_demux_001_src4_ready),              //   input,    width = 1,      src4.ready
		.src4_valid         (cmd_demux_001_src4_valid),              //  output,    width = 1,          .valid
		.src4_data          (cmd_demux_001_src4_data),               //  output,  width = 144,          .data
		.src4_channel       (cmd_demux_001_src4_channel),            //  output,    width = 5,          .channel
		.src4_startofpacket (cmd_demux_001_src4_startofpacket),      //  output,    width = 1,          .startofpacket
		.src4_endofpacket   (cmd_demux_001_src4_endofpacket)         //  output,    width = 1,          .endofpacket
	);

	sys_altera_merlin_demultiplexer_1921_zzwenmi cmd_demux_002 (
		.clk                (clock_in_out_clk_clk),                                     //   input,    width = 1,        clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset),                    //   input,    width = 1,  clk_reset.reset
		.sink_ready         (cpu_instruction_manager_wr_limiter_cmd_src_ready),         //  output,    width = 1,       sink.ready
		.sink_channel       (cpu_instruction_manager_wr_limiter_cmd_src_channel),       //   input,    width = 5,           .channel
		.sink_data          (cpu_instruction_manager_wr_limiter_cmd_src_data),          //   input,  width = 144,           .data
		.sink_startofpacket (cpu_instruction_manager_wr_limiter_cmd_src_startofpacket), //   input,    width = 1,           .startofpacket
		.sink_endofpacket   (cpu_instruction_manager_wr_limiter_cmd_src_endofpacket),   //   input,    width = 1,           .endofpacket
		.sink_valid         (cpu_instruction_manager_wr_limiter_cmd_valid_data),        //   input,    width = 5, sink_valid.data
		.src0_ready         (cmd_demux_002_src0_ready),                                 //   input,    width = 1,       src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                                 //  output,    width = 1,           .valid
		.src0_data          (cmd_demux_002_src0_data),                                  //  output,  width = 144,           .data
		.src0_channel       (cmd_demux_002_src0_channel),                               //  output,    width = 5,           .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),                         //  output,    width = 1,           .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket),                           //  output,    width = 1,           .endofpacket
		.src1_ready         (cmd_demux_002_src1_ready),                                 //   input,    width = 1,       src1.ready
		.src1_valid         (cmd_demux_002_src1_valid),                                 //  output,    width = 1,           .valid
		.src1_data          (cmd_demux_002_src1_data),                                  //  output,  width = 144,           .data
		.src1_channel       (cmd_demux_002_src1_channel),                               //  output,    width = 5,           .channel
		.src1_startofpacket (cmd_demux_002_src1_startofpacket),                         //  output,    width = 1,           .startofpacket
		.src1_endofpacket   (cmd_demux_002_src1_endofpacket)                            //  output,    width = 1,           .endofpacket
	);

	sys_altera_merlin_demultiplexer_1921_zzwenmi cmd_demux_003 (
		.clk                (clock_in_out_clk_clk),                                     //   input,    width = 1,        clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset),                    //   input,    width = 1,  clk_reset.reset
		.sink_ready         (cpu_instruction_manager_rd_limiter_cmd_src_ready),         //  output,    width = 1,       sink.ready
		.sink_channel       (cpu_instruction_manager_rd_limiter_cmd_src_channel),       //   input,    width = 5,           .channel
		.sink_data          (cpu_instruction_manager_rd_limiter_cmd_src_data),          //   input,  width = 144,           .data
		.sink_startofpacket (cpu_instruction_manager_rd_limiter_cmd_src_startofpacket), //   input,    width = 1,           .startofpacket
		.sink_endofpacket   (cpu_instruction_manager_rd_limiter_cmd_src_endofpacket),   //   input,    width = 1,           .endofpacket
		.sink_valid         (cpu_instruction_manager_rd_limiter_cmd_valid_data),        //   input,    width = 5, sink_valid.data
		.src0_ready         (cmd_demux_003_src0_ready),                                 //   input,    width = 1,       src0.ready
		.src0_valid         (cmd_demux_003_src0_valid),                                 //  output,    width = 1,           .valid
		.src0_data          (cmd_demux_003_src0_data),                                  //  output,  width = 144,           .data
		.src0_channel       (cmd_demux_003_src0_channel),                               //  output,    width = 5,           .channel
		.src0_startofpacket (cmd_demux_003_src0_startofpacket),                         //  output,    width = 1,           .startofpacket
		.src0_endofpacket   (cmd_demux_003_src0_endofpacket),                           //  output,    width = 1,           .endofpacket
		.src1_ready         (cmd_demux_003_src1_ready),                                 //   input,    width = 1,       src1.ready
		.src1_valid         (cmd_demux_003_src1_valid),                                 //  output,    width = 1,           .valid
		.src1_data          (cmd_demux_003_src1_data),                                  //  output,  width = 144,           .data
		.src1_channel       (cmd_demux_003_src1_channel),                               //  output,    width = 5,           .channel
		.src1_startofpacket (cmd_demux_003_src1_startofpacket),                         //  output,    width = 1,           .startofpacket
		.src1_endofpacket   (cmd_demux_003_src1_endofpacket)                            //  output,    width = 1,           .endofpacket
	);

	sys_altera_merlin_multiplexer_1922_oted5cy cmd_mux (
		.clk                 (clock_in_out_clk_clk),                  //   input,    width = 1,       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                     //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_src_valid),                     //  output,    width = 1,          .valid
		.src_data            (cmd_mux_src_data),                      //  output,  width = 144,          .data
		.src_channel         (cmd_mux_src_channel),                   //  output,    width = 5,          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),             //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),               //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                  //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                  //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src0_channel),                //   input,    width = 5,          .channel
		.sink0_data          (cmd_demux_src0_data),                   //   input,  width = 144,          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),          //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),            //   input,    width = 1,          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),              //  output,    width = 1,     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),              //   input,    width = 1,          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),            //   input,    width = 5,          .channel
		.sink1_data          (cmd_demux_001_src0_data),               //   input,  width = 144,          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),      //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)         //   input,    width = 1,          .endofpacket
	);

	sys_altera_merlin_multiplexer_1922_oted5cy cmd_mux_001 (
		.clk                 (clock_in_out_clk_clk),                  //   input,    width = 1,       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                 //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_001_src_valid),                 //  output,    width = 1,          .valid
		.src_data            (cmd_mux_001_src_data),                  //  output,  width = 144,          .data
		.src_channel         (cmd_mux_001_src_channel),               //  output,    width = 5,          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),         //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),           //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                  //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                  //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src1_channel),                //   input,    width = 5,          .channel
		.sink0_data          (cmd_demux_src1_data),                   //   input,  width = 144,          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),          //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket),            //   input,    width = 1,          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),              //  output,    width = 1,     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),              //   input,    width = 1,          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),            //   input,    width = 5,          .channel
		.sink1_data          (cmd_demux_001_src1_data),               //   input,  width = 144,          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),      //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket)         //   input,    width = 1,          .endofpacket
	);

	sys_altera_merlin_multiplexer_1922_esaz2xq cmd_mux_002 (
		.clk                 (clock_in_out_clk_clk),                  //   input,    width = 1,       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                 //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_002_src_valid),                 //  output,    width = 1,          .valid
		.src_data            (cmd_mux_002_src_data),                  //  output,  width = 144,          .data
		.src_channel         (cmd_mux_002_src_channel),               //  output,    width = 5,          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),         //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),           //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                  //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                  //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src2_channel),                //   input,    width = 5,          .channel
		.sink0_data          (cmd_demux_src2_data),                   //   input,  width = 144,          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),          //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket),            //   input,    width = 1,          .endofpacket
		.sink1_ready         (cmd_demux_001_src2_ready),              //  output,    width = 1,     sink1.ready
		.sink1_valid         (cmd_demux_001_src2_valid),              //   input,    width = 1,          .valid
		.sink1_channel       (cmd_demux_001_src2_channel),            //   input,    width = 5,          .channel
		.sink1_data          (cmd_demux_001_src2_data),               //   input,  width = 144,          .data
		.sink1_startofpacket (cmd_demux_001_src2_startofpacket),      //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src2_endofpacket),        //   input,    width = 1,          .endofpacket
		.sink2_ready         (cmd_demux_002_src0_ready),              //  output,    width = 1,     sink2.ready
		.sink2_valid         (cmd_demux_002_src0_valid),              //   input,    width = 1,          .valid
		.sink2_channel       (cmd_demux_002_src0_channel),            //   input,    width = 5,          .channel
		.sink2_data          (cmd_demux_002_src0_data),               //   input,  width = 144,          .data
		.sink2_startofpacket (cmd_demux_002_src0_startofpacket),      //   input,    width = 1,          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src0_endofpacket),        //   input,    width = 1,          .endofpacket
		.sink3_ready         (cmd_demux_003_src0_ready),              //  output,    width = 1,     sink3.ready
		.sink3_valid         (cmd_demux_003_src0_valid),              //   input,    width = 1,          .valid
		.sink3_channel       (cmd_demux_003_src0_channel),            //   input,    width = 5,          .channel
		.sink3_data          (cmd_demux_003_src0_data),               //   input,  width = 144,          .data
		.sink3_startofpacket (cmd_demux_003_src0_startofpacket),      //   input,    width = 1,          .startofpacket
		.sink3_endofpacket   (cmd_demux_003_src0_endofpacket)         //   input,    width = 1,          .endofpacket
	);

	sys_altera_merlin_multiplexer_1922_esaz2xq cmd_mux_003 (
		.clk                 (clock_in_out_clk_clk),                  //   input,    width = 1,       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                 //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_003_src_valid),                 //  output,    width = 1,          .valid
		.src_data            (cmd_mux_003_src_data),                  //  output,  width = 144,          .data
		.src_channel         (cmd_mux_003_src_channel),               //  output,    width = 5,          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),         //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),           //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                  //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                  //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src3_channel),                //   input,    width = 5,          .channel
		.sink0_data          (cmd_demux_src3_data),                   //   input,  width = 144,          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),          //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket),            //   input,    width = 1,          .endofpacket
		.sink1_ready         (cmd_demux_001_src3_ready),              //  output,    width = 1,     sink1.ready
		.sink1_valid         (cmd_demux_001_src3_valid),              //   input,    width = 1,          .valid
		.sink1_channel       (cmd_demux_001_src3_channel),            //   input,    width = 5,          .channel
		.sink1_data          (cmd_demux_001_src3_data),               //   input,  width = 144,          .data
		.sink1_startofpacket (cmd_demux_001_src3_startofpacket),      //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src3_endofpacket),        //   input,    width = 1,          .endofpacket
		.sink2_ready         (cmd_demux_002_src1_ready),              //  output,    width = 1,     sink2.ready
		.sink2_valid         (cmd_demux_002_src1_valid),              //   input,    width = 1,          .valid
		.sink2_channel       (cmd_demux_002_src1_channel),            //   input,    width = 5,          .channel
		.sink2_data          (cmd_demux_002_src1_data),               //   input,  width = 144,          .data
		.sink2_startofpacket (cmd_demux_002_src1_startofpacket),      //   input,    width = 1,          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src1_endofpacket),        //   input,    width = 1,          .endofpacket
		.sink3_ready         (cmd_demux_003_src1_ready),              //  output,    width = 1,     sink3.ready
		.sink3_valid         (cmd_demux_003_src1_valid),              //   input,    width = 1,          .valid
		.sink3_channel       (cmd_demux_003_src1_channel),            //   input,    width = 5,          .channel
		.sink3_data          (cmd_demux_003_src1_data),               //   input,  width = 144,          .data
		.sink3_startofpacket (cmd_demux_003_src1_startofpacket),      //   input,    width = 1,          .startofpacket
		.sink3_endofpacket   (cmd_demux_003_src1_endofpacket)         //   input,    width = 1,          .endofpacket
	);

	sys_altera_merlin_multiplexer_1922_oted5cy cmd_mux_004 (
		.clk                 (clock_in_out_clk_clk),                  //   input,    width = 1,       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                 //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_004_src_valid),                 //  output,    width = 1,          .valid
		.src_data            (cmd_mux_004_src_data),                  //  output,  width = 144,          .data
		.src_channel         (cmd_mux_004_src_channel),               //  output,    width = 5,          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),         //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),           //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                  //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                  //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src4_channel),                //   input,    width = 5,          .channel
		.sink0_data          (cmd_demux_src4_data),                   //   input,  width = 144,          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),          //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket),            //   input,    width = 1,          .endofpacket
		.sink1_ready         (cmd_demux_001_src4_ready),              //  output,    width = 1,     sink1.ready
		.sink1_valid         (cmd_demux_001_src4_valid),              //   input,    width = 1,          .valid
		.sink1_channel       (cmd_demux_001_src4_channel),            //   input,    width = 5,          .channel
		.sink1_data          (cmd_demux_001_src4_data),               //   input,  width = 144,          .data
		.sink1_startofpacket (cmd_demux_001_src4_startofpacket),      //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src4_endofpacket)         //   input,    width = 1,          .endofpacket
	);

	sys_altera_merlin_demultiplexer_1921_7espnsi rsp_demux (
		.clk                (clock_in_out_clk_clk),                  //   input,    width = 1,       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_004_src_ready),                  //  output,    width = 1,      sink.ready
		.sink_channel       (router_004_src_channel),                //   input,    width = 5,          .channel
		.sink_data          (router_004_src_data),                   //   input,  width = 144,          .data
		.sink_startofpacket (router_004_src_startofpacket),          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),            //   input,    width = 1,          .endofpacket
		.sink_valid         (router_004_src_valid),                  //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_src0_ready),                  //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                  //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_src0_data),                   //  output,  width = 144,          .data
		.src0_channel       (rsp_demux_src0_channel),                //  output,    width = 5,          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),          //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),            //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                  //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                  //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_src1_data),                   //  output,  width = 144,          .data
		.src1_channel       (rsp_demux_src1_channel),                //  output,    width = 5,          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),          //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)             //  output,    width = 1,          .endofpacket
	);

	sys_altera_merlin_demultiplexer_1921_7espnsi rsp_demux_001 (
		.clk                (clock_in_out_clk_clk),                  //   input,    width = 1,       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_005_src_ready),                  //  output,    width = 1,      sink.ready
		.sink_channel       (router_005_src_channel),                //   input,    width = 5,          .channel
		.sink_data          (router_005_src_data),                   //   input,  width = 144,          .data
		.sink_startofpacket (router_005_src_startofpacket),          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),            //   input,    width = 1,          .endofpacket
		.sink_valid         (router_005_src_valid),                  //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_001_src0_ready),              //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),              //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_001_src0_data),               //  output,  width = 144,          .data
		.src0_channel       (rsp_demux_001_src0_channel),            //  output,    width = 5,          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),      //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),        //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),              //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),              //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_001_src1_data),               //  output,  width = 144,          .data
		.src1_channel       (rsp_demux_001_src1_channel),            //  output,    width = 5,          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),      //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket)         //  output,    width = 1,          .endofpacket
	);

	sys_altera_merlin_demultiplexer_1921_imrd56i rsp_demux_002 (
		.clk                (clock_in_out_clk_clk),                  //   input,    width = 1,       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_006_src_ready),                  //  output,    width = 1,      sink.ready
		.sink_channel       (router_006_src_channel),                //   input,    width = 5,          .channel
		.sink_data          (router_006_src_data),                   //   input,  width = 144,          .data
		.sink_startofpacket (router_006_src_startofpacket),          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),            //   input,    width = 1,          .endofpacket
		.sink_valid         (router_006_src_valid),                  //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_002_src0_ready),              //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),              //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_002_src0_data),               //  output,  width = 144,          .data
		.src0_channel       (rsp_demux_002_src0_channel),            //  output,    width = 5,          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),      //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),        //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),              //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),              //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_002_src1_data),               //  output,  width = 144,          .data
		.src1_channel       (rsp_demux_002_src1_channel),            //  output,    width = 5,          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),      //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket),        //  output,    width = 1,          .endofpacket
		.src2_ready         (rsp_demux_002_src2_ready),              //   input,    width = 1,      src2.ready
		.src2_valid         (rsp_demux_002_src2_valid),              //  output,    width = 1,          .valid
		.src2_data          (rsp_demux_002_src2_data),               //  output,  width = 144,          .data
		.src2_channel       (rsp_demux_002_src2_channel),            //  output,    width = 5,          .channel
		.src2_startofpacket (rsp_demux_002_src2_startofpacket),      //  output,    width = 1,          .startofpacket
		.src2_endofpacket   (rsp_demux_002_src2_endofpacket),        //  output,    width = 1,          .endofpacket
		.src3_ready         (rsp_demux_002_src3_ready),              //   input,    width = 1,      src3.ready
		.src3_valid         (rsp_demux_002_src3_valid),              //  output,    width = 1,          .valid
		.src3_data          (rsp_demux_002_src3_data),               //  output,  width = 144,          .data
		.src3_channel       (rsp_demux_002_src3_channel),            //  output,    width = 5,          .channel
		.src3_startofpacket (rsp_demux_002_src3_startofpacket),      //  output,    width = 1,          .startofpacket
		.src3_endofpacket   (rsp_demux_002_src3_endofpacket)         //  output,    width = 1,          .endofpacket
	);

	sys_altera_merlin_demultiplexer_1921_imrd56i rsp_demux_003 (
		.clk                (clock_in_out_clk_clk),                  //   input,    width = 1,       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_007_src_ready),                  //  output,    width = 1,      sink.ready
		.sink_channel       (router_007_src_channel),                //   input,    width = 5,          .channel
		.sink_data          (router_007_src_data),                   //   input,  width = 144,          .data
		.sink_startofpacket (router_007_src_startofpacket),          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),            //   input,    width = 1,          .endofpacket
		.sink_valid         (router_007_src_valid),                  //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_003_src0_ready),              //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),              //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_003_src0_data),               //  output,  width = 144,          .data
		.src0_channel       (rsp_demux_003_src0_channel),            //  output,    width = 5,          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),      //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),        //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),              //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),              //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_003_src1_data),               //  output,  width = 144,          .data
		.src1_channel       (rsp_demux_003_src1_channel),            //  output,    width = 5,          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),      //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket),        //  output,    width = 1,          .endofpacket
		.src2_ready         (rsp_demux_003_src2_ready),              //   input,    width = 1,      src2.ready
		.src2_valid         (rsp_demux_003_src2_valid),              //  output,    width = 1,          .valid
		.src2_data          (rsp_demux_003_src2_data),               //  output,  width = 144,          .data
		.src2_channel       (rsp_demux_003_src2_channel),            //  output,    width = 5,          .channel
		.src2_startofpacket (rsp_demux_003_src2_startofpacket),      //  output,    width = 1,          .startofpacket
		.src2_endofpacket   (rsp_demux_003_src2_endofpacket),        //  output,    width = 1,          .endofpacket
		.src3_ready         (rsp_demux_003_src3_ready),              //   input,    width = 1,      src3.ready
		.src3_valid         (rsp_demux_003_src3_valid),              //  output,    width = 1,          .valid
		.src3_data          (rsp_demux_003_src3_data),               //  output,  width = 144,          .data
		.src3_channel       (rsp_demux_003_src3_channel),            //  output,    width = 5,          .channel
		.src3_startofpacket (rsp_demux_003_src3_startofpacket),      //  output,    width = 1,          .startofpacket
		.src3_endofpacket   (rsp_demux_003_src3_endofpacket)         //  output,    width = 1,          .endofpacket
	);

	sys_altera_merlin_demultiplexer_1921_7espnsi rsp_demux_004 (
		.clk                (clock_in_out_clk_clk),                  //   input,    width = 1,       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_008_src_ready),                  //  output,    width = 1,      sink.ready
		.sink_channel       (router_008_src_channel),                //   input,    width = 5,          .channel
		.sink_data          (router_008_src_data),                   //   input,  width = 144,          .data
		.sink_startofpacket (router_008_src_startofpacket),          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),            //   input,    width = 1,          .endofpacket
		.sink_valid         (router_008_src_valid),                  //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_004_src0_ready),              //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),              //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_004_src0_data),               //  output,  width = 144,          .data
		.src0_channel       (rsp_demux_004_src0_channel),            //  output,    width = 5,          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),      //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket),        //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_004_src1_ready),              //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_004_src1_valid),              //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_004_src1_data),               //  output,  width = 144,          .data
		.src1_channel       (rsp_demux_004_src1_channel),            //  output,    width = 5,          .channel
		.src1_startofpacket (rsp_demux_004_src1_startofpacket),      //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_004_src1_endofpacket)         //  output,    width = 1,          .endofpacket
	);

	sys_altera_merlin_multiplexer_1922_5yxsbci rsp_mux (
		.clk                 (clock_in_out_clk_clk),                  //   input,    width = 1,       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                     //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_src_valid),                     //  output,    width = 1,          .valid
		.src_data            (rsp_mux_src_data),                      //  output,  width = 144,          .data
		.src_channel         (rsp_mux_src_channel),                   //  output,    width = 5,          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),             //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),               //  output,    width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                  //  output,    width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                  //   input,    width = 1,          .valid
		.sink0_channel       (rsp_demux_src0_channel),                //   input,    width = 5,          .channel
		.sink0_data          (rsp_demux_src0_data),                   //   input,  width = 144,          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),          //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),            //   input,    width = 1,          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),              //  output,    width = 1,     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),              //   input,    width = 1,          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),            //   input,    width = 5,          .channel
		.sink1_data          (rsp_demux_001_src0_data),               //   input,  width = 144,          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),      //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket),        //   input,    width = 1,          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),              //  output,    width = 1,     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),              //   input,    width = 1,          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),            //   input,    width = 5,          .channel
		.sink2_data          (rsp_demux_002_src0_data),               //   input,  width = 144,          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),      //   input,    width = 1,          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket),        //   input,    width = 1,          .endofpacket
		.sink3_ready         (rsp_demux_003_src0_ready),              //  output,    width = 1,     sink3.ready
		.sink3_valid         (rsp_demux_003_src0_valid),              //   input,    width = 1,          .valid
		.sink3_channel       (rsp_demux_003_src0_channel),            //   input,    width = 5,          .channel
		.sink3_data          (rsp_demux_003_src0_data),               //   input,  width = 144,          .data
		.sink3_startofpacket (rsp_demux_003_src0_startofpacket),      //   input,    width = 1,          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src0_endofpacket),        //   input,    width = 1,          .endofpacket
		.sink4_ready         (rsp_demux_004_src0_ready),              //  output,    width = 1,     sink4.ready
		.sink4_valid         (rsp_demux_004_src0_valid),              //   input,    width = 1,          .valid
		.sink4_channel       (rsp_demux_004_src0_channel),            //   input,    width = 5,          .channel
		.sink4_data          (rsp_demux_004_src0_data),               //   input,  width = 144,          .data
		.sink4_startofpacket (rsp_demux_004_src0_startofpacket),      //   input,    width = 1,          .startofpacket
		.sink4_endofpacket   (rsp_demux_004_src0_endofpacket)         //   input,    width = 1,          .endofpacket
	);

	sys_altera_merlin_multiplexer_1922_5yxsbci rsp_mux_001 (
		.clk                 (clock_in_out_clk_clk),                  //   input,    width = 1,       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                 //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_001_src_valid),                 //  output,    width = 1,          .valid
		.src_data            (rsp_mux_001_src_data),                  //  output,  width = 144,          .data
		.src_channel         (rsp_mux_001_src_channel),               //  output,    width = 5,          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),         //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),           //  output,    width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_src1_ready),                  //  output,    width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_src1_valid),                  //   input,    width = 1,          .valid
		.sink0_channel       (rsp_demux_src1_channel),                //   input,    width = 5,          .channel
		.sink0_data          (rsp_demux_src1_data),                   //   input,  width = 144,          .data
		.sink0_startofpacket (rsp_demux_src1_startofpacket),          //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_src1_endofpacket),            //   input,    width = 1,          .endofpacket
		.sink1_ready         (rsp_demux_001_src1_ready),              //  output,    width = 1,     sink1.ready
		.sink1_valid         (rsp_demux_001_src1_valid),              //   input,    width = 1,          .valid
		.sink1_channel       (rsp_demux_001_src1_channel),            //   input,    width = 5,          .channel
		.sink1_data          (rsp_demux_001_src1_data),               //   input,  width = 144,          .data
		.sink1_startofpacket (rsp_demux_001_src1_startofpacket),      //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src1_endofpacket),        //   input,    width = 1,          .endofpacket
		.sink2_ready         (rsp_demux_002_src1_ready),              //  output,    width = 1,     sink2.ready
		.sink2_valid         (rsp_demux_002_src1_valid),              //   input,    width = 1,          .valid
		.sink2_channel       (rsp_demux_002_src1_channel),            //   input,    width = 5,          .channel
		.sink2_data          (rsp_demux_002_src1_data),               //   input,  width = 144,          .data
		.sink2_startofpacket (rsp_demux_002_src1_startofpacket),      //   input,    width = 1,          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src1_endofpacket),        //   input,    width = 1,          .endofpacket
		.sink3_ready         (rsp_demux_003_src1_ready),              //  output,    width = 1,     sink3.ready
		.sink3_valid         (rsp_demux_003_src1_valid),              //   input,    width = 1,          .valid
		.sink3_channel       (rsp_demux_003_src1_channel),            //   input,    width = 5,          .channel
		.sink3_data          (rsp_demux_003_src1_data),               //   input,  width = 144,          .data
		.sink3_startofpacket (rsp_demux_003_src1_startofpacket),      //   input,    width = 1,          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src1_endofpacket),        //   input,    width = 1,          .endofpacket
		.sink4_ready         (rsp_demux_004_src1_ready),              //  output,    width = 1,     sink4.ready
		.sink4_valid         (rsp_demux_004_src1_valid),              //   input,    width = 1,          .valid
		.sink4_channel       (rsp_demux_004_src1_channel),            //   input,    width = 5,          .channel
		.sink4_data          (rsp_demux_004_src1_data),               //   input,  width = 144,          .data
		.sink4_startofpacket (rsp_demux_004_src1_startofpacket),      //   input,    width = 1,          .startofpacket
		.sink4_endofpacket   (rsp_demux_004_src1_endofpacket)         //   input,    width = 1,          .endofpacket
	);

	sys_altera_merlin_multiplexer_1922_hobyaqy rsp_mux_002 (
		.clk                 (clock_in_out_clk_clk),                  //   input,    width = 1,       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                 //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_002_src_valid),                 //  output,    width = 1,          .valid
		.src_data            (rsp_mux_002_src_data),                  //  output,  width = 144,          .data
		.src_channel         (rsp_mux_002_src_channel),               //  output,    width = 5,          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),         //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),           //  output,    width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_002_src2_ready),              //  output,    width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_002_src2_valid),              //   input,    width = 1,          .valid
		.sink0_channel       (rsp_demux_002_src2_channel),            //   input,    width = 5,          .channel
		.sink0_data          (rsp_demux_002_src2_data),               //   input,  width = 144,          .data
		.sink0_startofpacket (rsp_demux_002_src2_startofpacket),      //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_002_src2_endofpacket),        //   input,    width = 1,          .endofpacket
		.sink1_ready         (rsp_demux_003_src2_ready),              //  output,    width = 1,     sink1.ready
		.sink1_valid         (rsp_demux_003_src2_valid),              //   input,    width = 1,          .valid
		.sink1_channel       (rsp_demux_003_src2_channel),            //   input,    width = 5,          .channel
		.sink1_data          (rsp_demux_003_src2_data),               //   input,  width = 144,          .data
		.sink1_startofpacket (rsp_demux_003_src2_startofpacket),      //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (rsp_demux_003_src2_endofpacket)         //   input,    width = 1,          .endofpacket
	);

	sys_altera_merlin_multiplexer_1922_hobyaqy rsp_mux_003 (
		.clk                 (clock_in_out_clk_clk),                  //   input,    width = 1,       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_003_src_ready),                 //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_003_src_valid),                 //  output,    width = 1,          .valid
		.src_data            (rsp_mux_003_src_data),                  //  output,  width = 144,          .data
		.src_channel         (rsp_mux_003_src_channel),               //  output,    width = 5,          .channel
		.src_startofpacket   (rsp_mux_003_src_startofpacket),         //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_003_src_endofpacket),           //  output,    width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_002_src3_ready),              //  output,    width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_002_src3_valid),              //   input,    width = 1,          .valid
		.sink0_channel       (rsp_demux_002_src3_channel),            //   input,    width = 5,          .channel
		.sink0_data          (rsp_demux_002_src3_data),               //   input,  width = 144,          .data
		.sink0_startofpacket (rsp_demux_002_src3_startofpacket),      //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_002_src3_endofpacket),        //   input,    width = 1,          .endofpacket
		.sink1_ready         (rsp_demux_003_src3_ready),              //  output,    width = 1,     sink1.ready
		.sink1_valid         (rsp_demux_003_src3_valid),              //   input,    width = 1,          .valid
		.sink1_channel       (rsp_demux_003_src3_channel),            //   input,    width = 5,          .channel
		.sink1_data          (rsp_demux_003_src3_data),               //   input,  width = 144,          .data
		.sink1_startofpacket (rsp_demux_003_src3_startofpacket),      //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (rsp_demux_003_src3_endofpacket)         //   input,    width = 1,          .endofpacket
	);

endmodule
